<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1030" onload="init(evt)" viewBox="0 0 1200 1030" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="1030.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="1013" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="1013" > </text>
<g id="frames">
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_rehash (40,887,566 samples, 0.01%)</title><rect x="1174.9" y="805" width="0.2" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1177.94" y="815.5" ></text>
</g>
<g >
<title>checked_request2size (46,529,226 samples, 0.01%)</title><rect x="1073.0" y="677" width="0.1" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1075.95" y="687.5" ></text>
</g>
<g >
<title>operator new (81,378,256 samples, 0.02%)</title><rect x="1107.7" y="485" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1110.74" y="495.5" ></text>
</g>
<g >
<title>cpp_redis::reply::reply (669,909,714 samples, 0.17%)</title><rect x="1080.3" y="821" width="2.0" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="1083.27" y="831.5" ></text>
</g>
<g >
<title>std::set&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;, bool  (7,877,250,818 samples, 2.04%)</title><rect x="1120.0" y="853" width="24.0" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="1122.98" y="863.5" >s..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (81,962,169 samples, 0.02%)</title><rect x="1137.4" y="773" width="0.2" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="1140.38" y="783.5" ></text>
</g>
<g >
<title>do_anonymous_page (90,081,862 samples, 0.02%)</title><rect x="139.0" y="661" width="0.2" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="141.97" y="671.5" ></text>
</g>
<g >
<title>_int_free (1,551,149,298 samples, 0.40%)</title><rect x="121.6" y="933" width="4.7" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="124.55" y="943.5" ></text>
</g>
<g >
<title>__ip_finish_output (200,404,724 samples, 0.05%)</title><rect x="1060.1" y="341" width="0.6" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1063.06" y="351.5" ></text>
</g>
<g >
<title>do_anonymous_page (34,961,903 samples, 0.01%)</title><rect x="1161.4" y="565" width="0.1" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1164.42" y="575.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt; &gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (72,856,718 samples, 0.02%)</title><rect x="1173.9" y="805" width="0.2" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1176.90" y="815.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (1,136,579,901 samples, 0.29%)</title><rect x="1037.7" y="741" width="3.5" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="1040.73" y="751.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (486,549,604 samples, 0.13%)</title><rect x="763.4" y="693" width="1.5" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="766.44" y="703.5" ></text>
</g>
<g >
<title>__x64_sys_futex (680,209,338 samples, 0.18%)</title><rect x="466.7" y="661" width="2.1" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="469.74" y="671.5" ></text>
</g>
<g >
<title>malloc_consolidate (102,637,099 samples, 0.03%)</title><rect x="1083.7" y="773" width="0.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1086.67" y="783.5" ></text>
</g>
<g >
<title>std::__allocated_ptr&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (208,485,702 samples, 0.05%)</title><rect x="1055.9" y="693" width="0.6" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="1058.85" y="703.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::lock_guard (267,958,313 samples, 0.07%)</title><rect x="974.9" y="789" width="0.8" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="977.88" y="799.5" ></text>
</g>
<g >
<title>void std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_realloc_insert&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (1,426,556,327 samples, 0.37%)</title><rect x="1024.9" y="773" width="4.4" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="1027.93" y="783.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::~unordered_set (76,443,784 samples, 0.02%)</title><rect x="1175.2" y="869" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1178.22" y="879.5" ></text>
</g>
<g >
<title>_int_malloc (171,067,796 samples, 0.04%)</title><rect x="928.6" y="677" width="0.5" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="931.63" y="687.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;::construct&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; (179,041,128 samples, 0.05%)</title><rect x="1102.9" y="693" width="0.5" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1105.87" y="703.5" ></text>
</g>
<g >
<title>encryption_engine::encrypt (306,963,045 samples, 0.08%)</title><rect x="1150.4" y="837" width="0.9" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="1153.40" y="847.5" ></text>
</g>
<g >
<title>std::vector&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::push_back (327,121,853 samples, 0.08%)</title><rect x="1090.3" y="773" width="1.0" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1093.28" y="783.5" ></text>
</g>
<g >
<title>std::vector&lt;cpp_redis::reply, std::allocator&lt;cpp_redis::reply&gt; &gt;::vector (1,473,869,460 samples, 0.38%)</title><rect x="921.7" y="773" width="4.5" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="924.71" y="783.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (125,898,470 samples, 0.03%)</title><rect x="910.8" y="677" width="0.3" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="913.76" y="687.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (194,826,490 samples, 0.05%)</title><rect x="522.2" y="757" width="0.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="525.22" y="767.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (236,289,539 samples, 0.06%)</title><rect x="1115.2" y="821" width="0.8" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1118.24" y="831.5" ></text>
</g>
<g >
<title>_int_free (91,308,073 samples, 0.02%)</title><rect x="1084.2" y="821" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1087.17" y="831.5" ></text>
</g>
<g >
<title>_int_free (2,276,612,569 samples, 0.59%)</title><rect x="1030.4" y="693" width="7.0" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1033.41" y="703.5" ></text>
</g>
<g >
<title>update_load_avg (40,734,905 samples, 0.01%)</title><rect x="1054.2" y="517" width="0.2" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1057.23" y="527.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt; &gt; &gt;::allocate (164,029,211 samples, 0.04%)</title><rect x="1173.4" y="805" width="0.5" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1176.40" y="815.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (36,478,827 samples, 0.01%)</title><rect x="1165.2" y="677" width="0.1" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1168.19" y="687.5" ></text>
</g>
<g >
<title>malloc_consolidate (62,313,302 samples, 0.02%)</title><rect x="214.3" y="549" width="0.1" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="217.26" y="559.5" ></text>
</g>
<g >
<title>apache::thrift::concurrency::ThreadManager::Task::Task (35,261,788 samples, 0.01%)</title><rect x="203.3" y="629" width="0.1" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="206.29" y="639.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (90,133,313 samples, 0.02%)</title><rect x="1160.1" y="661" width="0.3" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1163.10" y="671.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (45,167,166 samples, 0.01%)</title><rect x="43.5" y="933" width="0.2" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="46.54" y="943.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::destroy&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (73,457,272 samples, 0.02%)</title><rect x="961.0" y="629" width="0.2" height="15.0" fill="rgb(208,18,4)" rx="2" ry="2" />
<text  x="963.95" y="639.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (54,123,136 samples, 0.01%)</title><rect x="72.5" y="933" width="0.1" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="75.48" y="943.5" ></text>
</g>
<g >
<title>cpp_redis::network::redis_connection::build_command (1,348,073,347 samples, 0.35%)</title><rect x="938.3" y="677" width="4.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="941.27" y="687.5" ></text>
</g>
<g >
<title>operator new (214,341,130 samples, 0.06%)</title><rect x="853.2" y="741" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="856.17" y="751.5" ></text>
</g>
<g >
<title>_int_malloc (55,684,991 samples, 0.01%)</title><rect x="1107.8" y="453" width="0.2" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1110.80" y="463.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::~lock_guard (44,607,892 samples, 0.01%)</title><rect x="433.3" y="773" width="0.1" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="436.27" y="783.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cpp_redis::reply, std::allocator&lt;cpp_redis::reply&gt; &gt;::_M_create_storage (40,325,447 samples, 0.01%)</title><rect x="922.8" y="645" width="0.1" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="925.78" y="655.5" ></text>
</g>
<g >
<title>std::__atomic_futex_unsigned&lt;2147483648u&gt;::_M_load_and_test_until (303,312,919 samples, 0.08%)</title><rect x="1054.0" y="741" width="0.9" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="1056.97" y="751.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (45,082,651 samples, 0.01%)</title><rect x="1159.6" y="757" width="0.2" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="1162.64" y="767.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt;::_M_ptr (232,880,305 samples, 0.06%)</title><rect x="119.4" y="933" width="0.7" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="122.38" y="943.5" ></text>
</g>
<g >
<title>schedule_hrtimeout_range_clock (112,425,161 samples, 0.03%)</title><rect x="1062.6" y="757" width="0.3" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1065.57" y="767.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (222,880,677 samples, 0.06%)</title><rect x="1027.9" y="661" width="0.6" height="15.0" fill="rgb(214,41,9)" rx="2" ry="2" />
<text  x="1030.86" y="671.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, false&gt; &gt; &gt;::destroy&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; (158,696,342 samples, 0.04%)</title><rect x="1164.1" y="773" width="0.5" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="1167.12" y="783.5" ></text>
</g>
<g >
<title>lll_mutex_unlock_optimized (39,572,226 samples, 0.01%)</title><rect x="805.3" y="693" width="0.1" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="808.31" y="703.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (107,736,746 samples, 0.03%)</title><rect x="434.2" y="709" width="0.4" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="437.24" y="719.5" ></text>
</g>
<g >
<title>__GI___libc_free (53,943,842 samples, 0.01%)</title><rect x="506.6" y="645" width="0.1" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="509.55" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_eq (45,537,009 samples, 0.01%)</title><rect x="983.6" y="709" width="0.2" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="986.62" y="719.5" ></text>
</g>
<g >
<title>__GI___libc_free (2,143,066,652 samples, 0.55%)</title><rect x="49.1" y="933" width="6.6" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="52.14" y="943.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;char*&gt;::difference_type std::__distance&lt;char*&gt; (40,808,611 samples, 0.01%)</title><rect x="1137.9" y="773" width="0.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1140.88" y="783.5" ></text>
</g>
<g >
<title>[proxy_server] (269,967,448 samples, 0.07%)</title><rect x="112.6" y="949" width="0.9" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="115.64" y="959.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt;::_M_addr (57,526,096 samples, 0.01%)</title><rect x="1112.7" y="949" width="0.1" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="1115.66" y="959.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (684,589,477 samples, 0.18%)</title><rect x="476.9" y="661" width="2.1" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="479.93" y="671.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (73,307,938 samples, 0.02%)</title><rect x="218.7" y="677" width="0.2" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="221.65" y="687.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__relocate_a&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (82,560,140 samples, 0.02%)</title><rect x="1178.1" y="805" width="0.3" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="1181.10" y="815.5" ></text>
</g>
<g >
<title>_int_free (123,869,577 samples, 0.03%)</title><rect x="214.5" y="565" width="0.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="217.47" y="575.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (67,200,046 samples, 0.02%)</title><rect x="33.7" y="933" width="0.3" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="36.75" y="943.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;::find (868,584,602 samples, 0.22%)</title><rect x="422.4" y="773" width="2.6" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="425.37" y="783.5" ></text>
</g>
<g >
<title>operator new (113,477,013 samples, 0.03%)</title><rect x="1177.6" y="805" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1180.59" y="815.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (36,074,773 samples, 0.01%)</title><rect x="1151.4" y="837" width="0.1" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="1154.36" y="847.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (82,409,670 samples, 0.02%)</title><rect x="987.5" y="709" width="0.3" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="990.50" y="719.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::vector (108,585,362 samples, 0.03%)</title><rect x="1029.4" y="789" width="0.3" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1032.39" y="799.5" ></text>
</g>
<g >
<title>std::__atomic_futex_unsigned&lt;2147483648u&gt;::_M_load_and_test (56,618,046 samples, 0.01%)</title><rect x="953.3" y="725" width="0.1" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="956.27" y="735.5" ></text>
</g>
<g >
<title>do_syscall_64 (288,472,679 samples, 0.07%)</title><rect x="1062.2" y="853" width="0.9" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1065.17" y="863.5" ></text>
</g>
<g >
<title>exit_to_user_mode_loop (55,216,278 samples, 0.01%)</title><rect x="1088.6" y="677" width="0.1" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="1091.57" y="687.5" ></text>
</g>
<g >
<title>void std::__relocate_object_a&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (297,986,784 samples, 0.08%)</title><rect x="929.5" y="677" width="1.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="932.55" y="687.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (612,743,504 samples, 0.16%)</title><rect x="1147.3" y="821" width="1.8" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1150.25" y="831.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Vector_impl::_Vector_impl (70,425,299 samples, 0.02%)</title><rect x="1029.4" y="757" width="0.3" height="15.0" fill="rgb(236,147,35)" rx="2" ry="2" />
<text  x="1032.44" y="767.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__addressof&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (48,604,767 samples, 0.01%)</title><rect x="43.0" y="933" width="0.2" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="46.05" y="943.5" ></text>
</g>
<g >
<title>__x64_sys_pselect6 (261,200,729 samples, 0.07%)</title><rect x="1062.2" y="837" width="0.8" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="1065.17" y="847.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::assign (87,799,637 samples, 0.02%)</title><rect x="845.3" y="677" width="0.3" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="848.29" y="687.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (139,671,335 samples, 0.04%)</title><rect x="138.8" y="789" width="0.4" height="15.0" fill="rgb(214,41,9)" rx="2" ry="2" />
<text  x="141.82" y="799.5" ></text>
</g>
<g >
<title>___pthread_mutex_unlock (48,248,058 samples, 0.01%)</title><rect x="805.3" y="725" width="0.1" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="808.28" y="735.5" ></text>
</g>
<g >
<title>unlink_chunk (209,264,981 samples, 0.05%)</title><rect x="880.5" y="693" width="0.7" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="883.54" y="703.5" ></text>
</g>
<g >
<title>do_futex (237,790,916 samples, 0.06%)</title><rect x="1087.8" y="693" width="0.7" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1090.77" y="703.5" ></text>
</g>
<g >
<title>operation::~operation (74,372,019 samples, 0.02%)</title><rect x="1094.2" y="741" width="0.2" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="1097.22" y="751.5" ></text>
</g>
<g >
<title>std::__basic_future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::~__basic_future (33,035,557 samples, 0.01%)</title><rect x="1100.8" y="757" width="0.1" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="1103.76" y="767.5" ></text>
</g>
<g >
<title>std::mutex::lock (321,399,297 samples, 0.08%)</title><rect x="537.6" y="757" width="0.9" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="540.57" y="767.5" ></text>
</g>
<g >
<title>_int_malloc (132,388,888 samples, 0.03%)</title><rect x="437.0" y="645" width="0.4" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="439.95" y="655.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;::find (356,841,215 samples, 0.09%)</title><rect x="425.5" y="773" width="1.1" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="428.49" y="783.5" ></text>
</g>
<g >
<title>void std::__relocate_object_a&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (151,591,093 samples, 0.04%)</title><rect x="1161.1" y="725" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1164.14" y="735.5" ></text>
</g>
<g >
<title>_int_free (88,453,602 samples, 0.02%)</title><rect x="816.4" y="549" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="819.37" y="559.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Vector_impl_data::_M_swap_data (320,272,839 samples, 0.08%)</title><rect x="1017.8" y="757" width="1.0" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="1020.77" y="767.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (305,251,993 samples, 0.08%)</title><rect x="906.0" y="645" width="0.9" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="908.95" y="655.5" ></text>
</g>
<g >
<title>__GI___libc_free (416,727,779 samples, 0.11%)</title><rect x="935.7" y="757" width="1.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="938.71" y="767.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (139,116,891 samples, 0.04%)</title><rect x="910.7" y="709" width="0.4" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="913.72" y="719.5" ></text>
</g>
<g >
<title>_int_free (330,767,721 samples, 0.09%)</title><rect x="1139.5" y="773" width="1.0" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1142.50" y="783.5" ></text>
</g>
<g >
<title>_int_free (40,660,552 samples, 0.01%)</title><rect x="1150.1" y="853" width="0.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1153.09" y="863.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (195,632,997 samples, 0.05%)</title><rect x="1142.4" y="709" width="0.6" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1145.43" y="719.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (71,167,025 samples, 0.02%)</title><rect x="1101.7" y="565" width="0.3" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="1104.73" y="575.5" ></text>
</g>
<g >
<title>vma_merge (43,581,502 samples, 0.01%)</title><rect x="1104.4" y="549" width="0.2" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="1107.43" y="559.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;char*&gt;::difference_type std::__distance&lt;char*&gt; (218,982,423 samples, 0.06%)</title><rect x="691.9" y="677" width="0.6" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="694.85" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (93,914,963 samples, 0.02%)</title><rect x="426.3" y="741" width="0.2" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="429.25" y="751.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_capacity (86,965,490 samples, 0.02%)</title><rect x="80.5" y="933" width="0.2" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="83.45" y="943.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (184,100,713 samples, 0.05%)</title><rect x="158.4" y="933" width="0.6" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="161.44" y="943.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (62,020,480 samples, 0.02%)</title><rect x="894.1" y="693" width="0.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="897.10" y="703.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (35,867,678 samples, 0.01%)</title><rect x="218.9" y="677" width="0.1" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="221.88" y="687.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::~vector (260,276,098 samples, 0.07%)</title><rect x="910.4" y="741" width="0.7" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="913.35" y="751.5" ></text>
</g>
<g >
<title>void std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_realloc_insert&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (164,614,080 samples, 0.04%)</title><rect x="1116.0" y="853" width="0.5" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="1118.98" y="863.5" ></text>
</g>
<g >
<title>EVP_DigestFinal_ex (50,794,859 samples, 0.01%)</title><rect x="46.7" y="933" width="0.2" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="49.73" y="943.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; (163,205,297 samples, 0.04%)</title><rect x="1163.3" y="837" width="0.5" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1166.26" y="847.5" ></text>
</g>
<g >
<title>epoll_apply_one_change.constprop.0 (46,267,426 samples, 0.01%)</title><rect x="202.8" y="597" width="0.1" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="205.75" y="607.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;::pair (368,262,842 samples, 0.10%)</title><rect x="791.3" y="725" width="1.2" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="794.34" y="735.5" ></text>
</g>
<g >
<title>__tcp_send_ack.part.0 (34,007,746 samples, 0.01%)</title><rect x="204.0" y="469" width="0.1" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="207.04" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (952,569,078 samples, 0.25%)</title><rect x="1144.1" y="837" width="2.9" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="1147.09" y="847.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (522,267,882 samples, 0.14%)</title><rect x="801.2" y="741" width="1.6" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="804.21" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;int, std::pair&lt;int const, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (294,096,720 samples, 0.08%)</title><rect x="213.3" y="773" width="0.9" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="216.32" y="783.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__relocate_a&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (229,710,399 samples, 0.06%)</title><rect x="933.8" y="709" width="0.7" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="936.77" y="719.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (240,150,848 samples, 0.06%)</title><rect x="214.3" y="757" width="0.7" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="217.26" y="767.5" ></text>
</g>
<g >
<title>unlink_chunk (80,863,330 samples, 0.02%)</title><rect x="910.0" y="645" width="0.2" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="912.98" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (77,147,153 samples, 0.02%)</title><rect x="434.6" y="725" width="0.2" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="437.58" y="735.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt; &gt;::operator[] (2,835,844,425 samples, 0.73%)</title><rect x="794.5" y="773" width="8.7" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="797.51" y="783.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (35,184,836 samples, 0.01%)</title><rect x="961.1" y="597" width="0.1" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="964.07" y="607.5" ></text>
</g>
<g >
<title>evictedItems::getValue (248,934,268 samples, 0.06%)</title><rect x="451.9" y="789" width="0.7" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="454.87" y="799.5" ></text>
</g>
<g >
<title>exc_page_fault (90,501,530 samples, 0.02%)</title><rect x="1119.7" y="757" width="0.2" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1122.66" y="767.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (54,544,479 samples, 0.01%)</title><rect x="1165.1" y="709" width="0.2" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1168.13" y="719.5" ></text>
</g>
<g >
<title>tcache_get (113,319,502 samples, 0.03%)</title><rect x="1136.2" y="741" width="0.3" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="1139.19" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (426,660,097 samples, 0.11%)</title><rect x="1117.4" y="837" width="1.3" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1120.42" y="847.5" ></text>
</g>
<g >
<title>_int_free (44,355,252 samples, 0.01%)</title><rect x="596.3" y="629" width="0.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="599.29" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_eq (52,975,720 samples, 0.01%)</title><rect x="799.3" y="693" width="0.2" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="802.35" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (52,995,858 samples, 0.01%)</title><rect x="812.9" y="709" width="0.1" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="815.87" y="719.5" ></text>
</g>
<g >
<title>do_syscall_64 (200,388,437 samples, 0.05%)</title><rect x="459.8" y="629" width="0.6" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="462.82" y="639.5" ></text>
</g>
<g >
<title>memcmp@plt (52,114,097 samples, 0.01%)</title><rect x="591.0" y="677" width="0.1" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="593.96" y="687.5" ></text>
</g>
<g >
<title>std::__cxx11::to_string (89,907,961 samples, 0.02%)</title><rect x="1166.7" y="869" width="0.3" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1169.71" y="879.5" ></text>
</g>
<g >
<title>tcache_get (55,183,432 samples, 0.01%)</title><rect x="489.0" y="741" width="0.2" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="492.01" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;int, std::pair&lt;int const, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (113,152,325 samples, 0.03%)</title><rect x="213.7" y="725" width="0.3" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="216.70" y="735.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; &gt;::type&amp; std::get&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (41,777,975 samples, 0.01%)</title><rect x="892.8" y="645" width="0.1" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="895.80" y="655.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (250,633,588 samples, 0.06%)</title><rect x="31.3" y="933" width="0.8" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="34.30" y="943.5" ></text>
</g>
<g >
<title>lll_mutex_lock_optimized (48,206,468 samples, 0.01%)</title><rect x="804.9" y="709" width="0.1" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="807.90" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (92,386,022 samples, 0.02%)</title><rect x="430.9" y="741" width="0.2" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="433.85" y="751.5" ></text>
</g>
<g >
<title>unlink_chunk (301,494,252 samples, 0.08%)</title><rect x="1036.4" y="661" width="0.9" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="1039.42" y="671.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;::pair (154,312,068 samples, 0.04%)</title><rect x="1143.2" y="805" width="0.4" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="1146.17" y="815.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (36,158,255 samples, 0.01%)</title><rect x="1117.7" y="789" width="0.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1120.69" y="799.5" ></text>
</g>
<g >
<title>cpp_redis::reply* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;cpp_redis::reply const*, std::vector&lt;cpp_redis::reply, std::allocator&lt;cpp_redis::reply&gt; &gt; &gt;, cpp_redis::reply*&gt; (1,172,872,181 samples, 0.30%)</title><rect x="921.7" y="725" width="3.6" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="924.71" y="735.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;cpp_redis::reply, cpp_redis::reply const&amp;&gt; (1,105,725,286 samples, 0.29%)</title><rect x="921.9" y="709" width="3.4" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="924.91" y="719.5" ></text>
</g>
<g >
<title>std::__atomic_futex_unsigned_base::_M_futex_wait_until (279,125,104 samples, 0.07%)</title><rect x="1054.0" y="725" width="0.9" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="1057.04" y="735.5" ></text>
</g>
<g >
<title>CRYPTO_free (60,543,472 samples, 0.02%)</title><rect x="860.1" y="725" width="0.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="863.10" y="735.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_capacity (43,159,235 samples, 0.01%)</title><rect x="159.0" y="933" width="0.1" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="162.00" y="943.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_break_promise (55,998,606 samples, 0.01%)</title><rect x="462.8" y="645" width="0.2" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="465.85" y="655.5" ></text>
</g>
<g >
<title>std::vector&lt;cpp_redis::reply, std::allocator&lt;cpp_redis::reply&gt; &gt;::vector (189,042,332 samples, 0.05%)</title><rect x="1078.3" y="629" width="0.6" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="1081.33" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (1,655,296,786 samples, 0.43%)</title><rect x="532.1" y="757" width="5.0" height="15.0" fill="rgb(253,225,53)" rx="2" ry="2" />
<text  x="535.06" y="767.5" ></text>
</g>
<g >
<title>_int_malloc (48,413,743 samples, 0.01%)</title><rect x="1093.8" y="693" width="0.2" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1096.81" y="703.5" ></text>
</g>
<g >
<title>__GI___libc_free (45,409,023 samples, 0.01%)</title><rect x="1150.7" y="789" width="0.1" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1153.71" y="799.5" ></text>
</g>
<g >
<title>std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;  (727,491,640 samples, 0.19%)</title><rect x="469.5" y="613" width="2.3" height="15.0" fill="rgb(241,170,40)" rx="2" ry="2" />
<text  x="472.54" y="623.5" ></text>
</g>
<g >
<title>std::enable_if&lt;std::__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;std::__future_base::_Result_base*&gt; &gt;, std::is_move_constructible&lt;std::__future_base::_Result_base*&gt;, std::is_move_assignable&lt;std::__future_base::_Result_base*&gt; &gt;::value, void&gt;::type std::swap&lt;std::__future_base::_Result_base*&gt; (48,089,433 samples, 0.01%)</title><rect x="811.2" y="565" width="0.2" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="814.22" y="575.5" ></text>
</g>
<g >
<title>CRYPTO_malloc (74,196,280 samples, 0.02%)</title><rect x="871.6" y="693" width="0.2" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="874.59" y="703.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned_erms (40,474,987 samples, 0.01%)</title><rect x="1158.6" y="725" width="0.2" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1161.64" y="735.5" ></text>
</g>
<g >
<title>do_syscall_64 (223,645,541 samples, 0.06%)</title><rect x="1054.2" y="677" width="0.7" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1057.19" y="687.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (123,460,871 samples, 0.03%)</title><rect x="1103.0" y="629" width="0.4" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1106.01" y="639.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (54,231,634 samples, 0.01%)</title><rect x="1118.5" y="789" width="0.2" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="1121.49" y="799.5" ></text>
</g>
<g >
<title>__GI___libc_free (101,973,854 samples, 0.03%)</title><rect x="966.1" y="741" width="0.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="969.06" y="751.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (321,586,365 samples, 0.08%)</title><rect x="1161.6" y="821" width="1.0" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1164.65" y="831.5" ></text>
</g>
<g >
<title>CRYPTO_zalloc (145,003,911 samples, 0.04%)</title><rect x="1153.6" y="789" width="0.5" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="1156.63" y="799.5" ></text>
</g>
<g >
<title>waffle_thrift_async_put_batch_args::read (854,581,532 samples, 0.22%)</title><rect x="1108.4" y="805" width="2.6" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1111.43" y="815.5" ></text>
</g>
<g >
<title>__gthread_mutex_unlock (215,344,831 samples, 0.06%)</title><rect x="976.0" y="757" width="0.6" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="978.96" y="767.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, 0ul&gt; (1,041,529,608 samples, 0.27%)</title><rect x="997.0" y="677" width="3.2" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="999.98" y="687.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (176,289,123 samples, 0.05%)</title><rect x="205.2" y="725" width="0.5" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="208.18" y="735.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, void  (281,054,969,830 samples, 72.70%)</title><rect x="204.3" y="837" width="857.8" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="207.26" y="847.5" >void std::__invoke_impl&lt;void, void </text>
</g>
<g >
<title>unsigned int std::__detail::__to_chars_len&lt;unsigned int&gt; (125,712,171 samples, 0.03%)</title><rect x="973.5" y="773" width="0.4" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="976.54" y="783.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (176,058,961 samples, 0.05%)</title><rect x="1065.2" y="725" width="0.5" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1068.18" y="735.5" ></text>
</g>
<g >
<title>EVP_EncryptUpdate (217,553,711 samples, 0.06%)</title><rect x="842.4" y="725" width="0.7" height="15.0" fill="rgb(248,197,47)" rx="2" ry="2" />
<text  x="845.41" y="735.5" ></text>
</g>
<g >
<title>handle_pte_fault (41,294,646 samples, 0.01%)</title><rect x="1157.8" y="725" width="0.1" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1160.81" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_node_ptr (227,768,293 samples, 0.06%)</title><rect x="884.2" y="693" width="0.7" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="887.17" y="703.5" ></text>
</g>
<g >
<title>HMAC (37,236,126 samples, 0.01%)</title><rect x="39.9" y="933" width="0.1" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="42.86" y="943.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (90,238,328 samples, 0.02%)</title><rect x="953.6" y="757" width="0.3" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="956.61" y="767.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_Setter&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt;::operator (212,550,309 samples, 0.05%)</title><rect x="470.1" y="549" width="0.7" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="473.12" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_S_relocate (222,794,742 samples, 0.06%)</title><rect x="1058.4" y="757" width="0.7" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1061.44" y="767.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;1ul, std::tuple&lt;std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt; &gt;::type&amp; std::get&lt;1ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt; (60,250,704 samples, 0.02%)</title><rect x="471.9" y="565" width="0.1" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="474.86" y="575.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__addressof&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (81,564,923 samples, 0.02%)</title><rect x="158.2" y="933" width="0.2" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="161.19" y="943.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::~lock_guard (117,340,534 samples, 0.03%)</title><rect x="882.5" y="773" width="0.4" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="885.54" y="783.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (734,620,715 samples, 0.19%)</title><rect x="954.2" y="741" width="2.2" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="957.18" y="751.5" ></text>
</g>
<g >
<title>schedule_hrtimeout_range (112,425,161 samples, 0.03%)</title><rect x="1062.6" y="773" width="0.3" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="1065.57" y="783.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;char*&gt;::difference_type std::distance&lt;char*&gt; (162,190,433 samples, 0.04%)</title><rect x="95.3" y="933" width="0.5" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="98.32" y="943.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;queue&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;,  (2,493,156,641 samples, 0.64%)</title><rect x="397.2" y="757" width="7.6" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="400.19" y="767.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (55,710,721 samples, 0.01%)</title><rect x="520.9" y="741" width="0.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="523.85" y="751.5" ></text>
</g>
<g >
<title>__gthread_mutex_lock (143,834,053 samples, 0.04%)</title><rect x="1092.9" y="693" width="0.4" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1095.87" y="703.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::~unordered_set (609,088,378 samples, 0.16%)</title><rect x="1015.4" y="789" width="1.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1018.44" y="799.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (212,894,786 samples, 0.06%)</title><rect x="1079.1" y="597" width="0.6" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1082.08" y="607.5" ></text>
</g>
<g >
<title>ep_insert (41,815,692 samples, 0.01%)</title><rect x="202.8" y="485" width="0.1" height="15.0" fill="rgb(253,225,53)" rx="2" ry="2" />
<text  x="205.77" y="495.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__strip_reference_wrapper&lt;std::decay&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;::type&gt;::__type, std::__strip_reference_wrapper&lt;std::decay&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;::type&gt;::__type&gt; std::make_pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (181,364,735 samples, 0.05%)</title><rect x="1163.2" y="853" width="0.6" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="1166.20" y="863.5" ></text>
</g>
<g >
<title>_int_malloc (122,063,501 samples, 0.03%)</title><rect x="212.1" y="645" width="0.3" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="215.07" y="655.5" ></text>
</g>
<g >
<title>unlink_chunk (71,191,282 samples, 0.02%)</title><rect x="1049.2" y="725" width="0.2" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="1052.16" y="735.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::~pair (43,784,941 samples, 0.01%)</title><rect x="105.2" y="933" width="0.1" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="108.18" y="943.5" ></text>
</g>
<g >
<title>ep_autoremove_wake_function (41,924,497 samples, 0.01%)</title><rect x="1112.0" y="581" width="0.1" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="1114.96" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (59,006,868 samples, 0.02%)</title><rect x="1173.2" y="837" width="0.1" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="1176.17" y="847.5" ></text>
</g>
<g >
<title>std::operator&amp; (5,215,798,055 samples, 1.35%)</title><rect x="327.1" y="773" width="15.9" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="330.06" y="783.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (301,306,440 samples, 0.08%)</title><rect x="820.2" y="709" width="1.0" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="823.24" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;::_M_v (78,339,071 samples, 0.02%)</title><rect x="577.4" y="741" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="580.45" y="751.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (300,954,012 samples, 0.08%)</title><rect x="1078.9" y="629" width="0.9" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1081.91" y="639.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cpp_redis::reply, std::allocator&lt;cpp_redis::reply&gt; &gt;::_M_get_Tp_allocator (41,785,184 samples, 0.01%)</title><rect x="77.9" y="933" width="0.1" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="80.86" y="943.5" ></text>
</g>
<g >
<title>queue&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::size (2,355,167,254 samples, 0.61%)</title><rect x="129.3" y="933" width="7.2" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="132.33" y="943.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (177,837,546 samples, 0.05%)</title><rect x="214.4" y="629" width="0.6" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="217.45" y="639.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::find (368,933,505 samples, 0.10%)</title><rect x="829.4" y="773" width="1.1" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="832.37" y="783.5" ></text>
</g>
<g >
<title>__gthread_mutex_lock (68,420,737 samples, 0.02%)</title><rect x="1103.7" y="693" width="0.2" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1106.68" y="703.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned_erms (148,877,810 samples, 0.04%)</title><rect x="137.5" y="853" width="0.5" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="140.50" y="863.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (37,542,400 samples, 0.01%)</title><rect x="43.4" y="933" width="0.1" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="46.38" y="943.5" ></text>
</g>
<g >
<title>tcp_cleanup_rbuf (34,007,746 samples, 0.01%)</title><rect x="204.0" y="517" width="0.1" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="207.04" y="527.5" ></text>
</g>
<g >
<title>std::initializer_list&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::end (42,982,345 samples, 0.01%)</title><rect x="515.3" y="757" width="0.2" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="518.34" y="767.5" ></text>
</g>
<g >
<title>_int_malloc (41,973,299 samples, 0.01%)</title><rect x="844.0" y="661" width="0.2" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="847.03" y="671.5" ></text>
</g>
<g >
<title>lll_mutex_unlock_optimized (80,120,313 samples, 0.02%)</title><rect x="1093.3" y="661" width="0.3" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="1096.35" y="671.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (148,804,304 samples, 0.04%)</title><rect x="437.5" y="677" width="0.5" height="15.0" fill="rgb(252,217,52)" rx="2" ry="2" />
<text  x="440.53" y="687.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (132,261,977 samples, 0.03%)</title><rect x="447.1" y="677" width="0.4" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="450.10" y="687.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin (81,566,760 samples, 0.02%)</title><rect x="1171.5" y="821" width="0.2" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1174.47" y="831.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::allocate (529,670,459 samples, 0.14%)</title><rect x="1109.3" y="725" width="1.6" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1112.26" y="735.5" ></text>
</g>
<g >
<title>__GI___libc_free (162,903,920 samples, 0.04%)</title><rect x="875.7" y="757" width="0.5" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="878.67" y="767.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, false&gt; &gt; &gt;::_M_deallocate_node (511,911,207 samples, 0.13%)</title><rect x="957.6" y="709" width="1.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="960.63" y="719.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (297,319,651 samples, 0.08%)</title><rect x="932.6" y="757" width="0.9" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="935.57" y="767.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;char*&gt;::iterator_category std::__iterator_category&lt;char*&gt; (37,413,572 samples, 0.01%)</title><rect x="1115.8" y="789" width="0.2" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1118.85" y="799.5" ></text>
</g>
<g >
<title>__GI___pthread_mutex_unlock_usercnt (42,321,452 samples, 0.01%)</title><rect x="439.1" y="709" width="0.1" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="442.06" y="719.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::~lock_guard (48,707,813 samples, 0.01%)</title><rect x="829.2" y="773" width="0.1" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="832.16" y="783.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt; &gt;::type&amp; std::get&lt;0ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt; (45,524,210 samples, 0.01%)</title><rect x="472.6" y="581" width="0.1" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="475.56" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (158,696,342 samples, 0.04%)</title><rect x="1164.1" y="837" width="0.5" height="15.0" fill="rgb(253,220,52)" rx="2" ry="2" />
<text  x="1167.12" y="847.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::~vector (1,084,698,814 samples, 0.28%)</title><rect x="1178.4" y="869" width="3.3" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1181.42" y="879.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (345,645,762 samples, 0.09%)</title><rect x="426.6" y="757" width="1.1" height="15.0" fill="rgb(253,225,53)" rx="2" ry="2" />
<text  x="429.60" y="767.5" ></text>
</g>
<g >
<title>EVP_MD_CTX_copy_ex (98,683,343 samples, 0.03%)</title><rect x="113.8" y="933" width="0.3" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="116.83" y="943.5" ></text>
</g>
<g >
<title>std::call_once&lt;void  (1,170,049,375 samples, 0.30%)</title><rect x="469.2" y="677" width="3.5" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="472.17" y="687.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (35,830,608 samples, 0.01%)</title><rect x="1055.7" y="693" width="0.2" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="1058.75" y="703.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (35,265,253 samples, 0.01%)</title><rect x="805.7" y="725" width="0.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="808.68" y="735.5" ></text>
</g>
<g >
<title>operator new (458,279,208 samples, 0.12%)</title><rect x="26.7" y="933" width="1.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="29.72" y="943.5" ></text>
</g>
<g >
<title>__handle_mm_fault (34,100,432 samples, 0.01%)</title><rect x="1115.7" y="725" width="0.1" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1118.68" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (2,110,521,996 samples, 0.55%)</title><rect x="888.3" y="757" width="6.4" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="891.25" y="767.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (111,619,338 samples, 0.03%)</title><rect x="830.1" y="741" width="0.4" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="833.14" y="751.5" ></text>
</g>
<g >
<title>alloc_new_heap (33,539,657 samples, 0.01%)</title><rect x="1087.3" y="725" width="0.1" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="1090.34" y="735.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, false&gt; &gt;::destroy&lt;std::pair&lt;int const, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; (317,899,685 samples, 0.08%)</title><rect x="920.7" y="677" width="1.0" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="923.74" y="687.5" ></text>
</g>
<g >
<title>std::unique_lock&lt;std::mutex&gt;::~unique_lock (374,154,580 samples, 0.10%)</title><rect x="459.3" y="773" width="1.1" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="462.30" y="783.5" ></text>
</g>
<g >
<title>redis::delete_batch (4,779,594,596 samples, 1.24%)</title><rect x="204.4" y="805" width="14.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="207.40" y="815.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (80,739,271 samples, 0.02%)</title><rect x="1175.5" y="789" width="0.2" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1178.49" y="799.5" ></text>
</g>
<g >
<title>operator new (725,601,903 samples, 0.19%)</title><rect x="912.2" y="661" width="2.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="915.17" y="671.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (336,959,743 samples, 0.09%)</title><rect x="969.0" y="789" width="1.0" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="971.98" y="799.5" ></text>
</g>
<g >
<title>_int_free (162,538,118 samples, 0.04%)</title><rect x="40.8" y="933" width="0.5" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="43.84" y="943.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr (85,281,896 samples, 0.02%)</title><rect x="464.2" y="629" width="0.3" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="467.25" y="639.5" ></text>
</g>
<g >
<title>__pthread_cond_wait_common (267,980,804 samples, 0.07%)</title><rect x="1086.3" y="853" width="0.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1089.32" y="863.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::allocate (104,003,530 samples, 0.03%)</title><rect x="516.1" y="709" width="0.3" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="519.10" y="719.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::~lock_guard (163,126,423 samples, 0.04%)</title><rect x="492.7" y="773" width="0.5" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="495.73" y="783.5" ></text>
</g>
<g >
<title>_int_free (42,003,014 samples, 0.01%)</title><rect x="506.0" y="629" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="509.02" y="639.5" ></text>
</g>
<g >
<title>__GI___pthread_mutex_unlock_usercnt (80,120,313 samples, 0.02%)</title><rect x="1093.3" y="677" width="0.3" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1096.35" y="687.5" ></text>
</g>
<g >
<title>std::unique_lock&lt;std::mutex&gt;::lock (143,834,053 samples, 0.04%)</title><rect x="1092.9" y="725" width="0.4" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="1095.87" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (117,666,880 samples, 0.03%)</title><rect x="890.1" y="709" width="0.4" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="893.12" y="719.5" ></text>
</g>
<g >
<title>checked_request2size (81,947,121 samples, 0.02%)</title><rect x="1135.9" y="741" width="0.3" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1138.94" y="751.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_deallocate (189,764,787 samples, 0.05%)</title><rect x="219.0" y="773" width="0.6" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="221.99" y="783.5" ></text>
</g>
<g >
<title>malloc_consolidate (958,503,339 samples, 0.25%)</title><rect x="897.3" y="565" width="3.0" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="900.33" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;* std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (515,051,996 samples, 0.13%)</title><rect x="1013.8" y="725" width="1.5" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="1016.77" y="735.5" ></text>
</g>
<g >
<title>_int_malloc (145,680,197 samples, 0.04%)</title><rect x="218.0" y="677" width="0.5" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="221.03" y="687.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::size (41,344,521 samples, 0.01%)</title><rect x="448.2" y="725" width="0.1" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="451.22" y="735.5" ></text>
</g>
<g >
<title>operator new (199,115,876 samples, 0.05%)</title><rect x="1119.4" y="821" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1122.36" y="831.5" ></text>
</g>
<g >
<title>ip_local_out (35,952,852 samples, 0.01%)</title><rect x="1085.9" y="597" width="0.1" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1088.89" y="607.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::__future_base::_State_baseV2&gt;::construct&lt;std::__future_base::_State_baseV2&gt; (61,259,600 samples, 0.02%)</title><rect x="1096.4" y="501" width="0.2" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="1099.38" y="511.5" ></text>
</g>
<g >
<title>tacopie::io_service::set_wr_callback (35,738,470 samples, 0.01%)</title><rect x="903.3" y="693" width="0.1" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="906.29" y="703.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::operator bool (34,028,988 samples, 0.01%)</title><rect x="818.5" y="421" width="0.1" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="821.54" y="431.5" ></text>
</g>
<g >
<title>__libc_send (582,093,686 samples, 0.15%)</title><rect x="1084.5" y="821" width="1.8" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="1087.51" y="831.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;,  (782,359,441 samples, 0.20%)</title><rect x="1106.0" y="709" width="2.3" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="1108.96" y="719.5" ></text>
</g>
<g >
<title>__netif_receive_skb (136,814,316 samples, 0.04%)</title><rect x="1060.1" y="181" width="0.4" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="1063.08" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::vector (1,214,587,819 samples, 0.31%)</title><rect x="515.0" y="773" width="3.7" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="517.98" y="783.5" ></text>
</g>
<g >
<title>operator new (131,382,748 samples, 0.03%)</title><rect x="138.0" y="853" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="140.97" y="863.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt;::_M_next (72,039,369 samples, 0.02%)</title><rect x="1004.9" y="725" width="0.3" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="1007.93" y="735.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (580,279,515 samples, 0.15%)</title><rect x="1171.4" y="837" width="1.8" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="1174.40" y="847.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::~vector (124,468,945 samples, 0.03%)</title><rect x="1019.2" y="757" width="0.4" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1022.18" y="767.5" ></text>
</g>
<g >
<title>cpp_redis::builders::array_builder::get_reply (521,446,854 samples, 0.13%)</title><rect x="1064.3" y="789" width="1.6" height="15.0" fill="rgb(223,82,19)" rx="2" ry="2" />
<text  x="1067.31" y="799.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;std::__future_base::_State_baseV2&gt;::shared_ptr (71,167,025 samples, 0.02%)</title><rect x="1101.7" y="581" width="0.3" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="1104.73" y="591.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;std::__future_base::_State_baseV2&gt;::~shared_ptr (44,544,855 samples, 0.01%)</title><rect x="818.9" y="437" width="0.1" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="821.86" y="447.5" ></text>
</g>
<g >
<title>_int_free (141,877,153 samples, 0.04%)</title><rect x="814.3" y="629" width="0.5" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="817.35" y="639.5" ></text>
</g>
<g >
<title>void std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::_M_realloc_insert&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;&gt; (476,038,210 samples, 0.12%)</title><rect x="833.3" y="757" width="1.5" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="836.31" y="767.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (439,211,265 samples, 0.11%)</title><rect x="574.8" y="645" width="1.4" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="577.83" y="655.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (361,399,225 samples, 0.09%)</title><rect x="137.4" y="869" width="1.1" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="140.39" y="879.5" ></text>
</g>
<g >
<title>operator new (364,439,179 samples, 0.09%)</title><rect x="128.2" y="933" width="1.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="131.20" y="943.5" ></text>
</g>
<g >
<title>std::__basic_future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::__basic_future (47,214,147 samples, 0.01%)</title><rect x="1101.1" y="693" width="0.2" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1104.15" y="703.5" ></text>
</g>
<g >
<title>handle_mm_fault (45,239,788 samples, 0.01%)</title><rect x="1160.4" y="613" width="0.2" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1163.42" y="623.5" ></text>
</g>
<g >
<title>_int_malloc (387,600,672 samples, 0.10%)</title><rect x="1025.0" y="677" width="1.2" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1028.03" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_S_equals (385,372,659 samples, 0.10%)</title><rect x="499.0" y="693" width="1.2" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="502.02" y="703.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::operator bool (47,562,182 samples, 0.01%)</title><rect x="462.9" y="629" width="0.1" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="465.87" y="639.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (73,067,540 samples, 0.02%)</title><rect x="438.1" y="725" width="0.2" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="441.09" y="735.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_equals_val&lt;char const&gt;::operator (165,451,633 samples, 0.04%)</title><rect x="846.3" y="709" width="0.5" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="849.34" y="719.5" ></text>
</g>
<g >
<title>malloc_consolidate (291,030,697 samples, 0.08%)</title><rect x="1076.8" y="773" width="0.9" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1079.81" y="783.5" ></text>
</g>
<g >
<title>std::__future_base::_Result&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::_M_destroy (255,751,669 samples, 0.07%)</title><rect x="1056.6" y="613" width="0.7" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="1059.57" y="623.5" ></text>
</g>
<g >
<title>dequeue_task_fair (63,465,892 samples, 0.02%)</title><rect x="202.1" y="549" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="205.07" y="559.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (1,392,660,576 samples, 0.36%)</title><rect x="964.7" y="789" width="4.3" height="15.0" fill="rgb(218,59,14)" rx="2" ry="2" />
<text  x="967.73" y="799.5" ></text>
</g>
<g >
<title>redis::put_batch (9,273,798,308 samples, 2.40%)</title><rect x="934.5" y="789" width="28.3" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="937.48" y="799.5" >r..</text>
</g>
<g >
<title>__gthread_once (1,865,903,235 samples, 0.48%)</title><rect x="805.9" y="725" width="5.7" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="808.91" y="735.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::_List_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::destroy&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (96,520,897 samples, 0.02%)</title><rect x="503.8" y="725" width="0.3" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="506.78" y="735.5" ></text>
</g>
<g >
<title>__handle_mm_fault (90,081,862 samples, 0.02%)</title><rect x="139.0" y="693" width="0.2" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="141.97" y="703.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (510,872,793 samples, 0.13%)</title><rect x="907.4" y="645" width="1.5" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="910.36" y="655.5" ></text>
</g>
<g >
<title>operator new (187,872,195 samples, 0.05%)</title><rect x="210.4" y="773" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="213.43" y="783.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (75,801,696 samples, 0.02%)</title><rect x="960.6" y="597" width="0.2" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="963.60" y="607.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__strip_reference_wrapper&lt;std::decay&lt;operation&amp;&gt;::type&gt;::__type, std::__strip_reference_wrapper&lt;std::decay&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;&amp;&gt;::type&gt;::__type&gt; std::make_pair&lt;operation&amp;, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;&amp;&gt; (185,606,194 samples, 0.05%)</title><rect x="1094.5" y="757" width="0.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1097.48" y="767.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (129,445,096 samples, 0.03%)</title><rect x="929.9" y="661" width="0.4" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="932.86" y="671.5" ></text>
</g>
<g >
<title>heap_for_ptr (45,572,499 samples, 0.01%)</title><rect x="1077.7" y="757" width="0.1" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1080.70" y="767.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash (50,407,855 samples, 0.01%)</title><rect x="1000.8" y="741" width="0.1" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1003.77" y="751.5" ></text>
</g>
<g >
<title>malloc_consolidate (121,159,207 samples, 0.03%)</title><rect x="910.4" y="629" width="0.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="913.35" y="639.5" ></text>
</g>
<g >
<title>malloc_consolidate (85,602,269 samples, 0.02%)</title><rect x="1156.8" y="757" width="0.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1159.79" y="767.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::~unordered_map (1,709,718,701 samples, 0.44%)</title><rect x="1004.2" y="789" width="5.2" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1007.16" y="799.5" ></text>
</g>
<g >
<title>__GI___libc_free (163,354,584 samples, 0.04%)</title><rect x="814.3" y="645" width="0.5" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="817.28" y="655.5" ></text>
</g>
<g >
<title>___pthread_mutex_lock (191,867,336 samples, 0.05%)</title><rect x="537.9" y="725" width="0.6" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="540.95" y="735.5" ></text>
</g>
<g >
<title>__GI___pthread_mutex_unlock_usercnt (173,189,355 samples, 0.04%)</title><rect x="976.1" y="725" width="0.5" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="979.07" y="735.5" ></text>
</g>
<g >
<title>std::unique_lock&lt;std::mutex&gt;::unlock (92,292,008 samples, 0.02%)</title><rect x="1093.3" y="741" width="0.3" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1096.31" y="751.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;char*&gt;::iterator_category std::__iterator_category&lt;char*&gt; (423,520,815 samples, 0.11%)</title><rect x="36.1" y="933" width="1.3" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="39.08" y="943.5" ></text>
</g>
<g >
<title>wake_up_q (36,923,557 samples, 0.01%)</title><rect x="1063.2" y="709" width="0.1" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="1066.20" y="719.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt; &gt;::destroy&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (129,751,072 samples, 0.03%)</title><rect x="884.9" y="677" width="0.4" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="887.93" y="687.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (124,447,296 samples, 0.03%)</title><rect x="1161.2" y="709" width="0.4" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1164.20" y="719.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (337,185,538 samples, 0.09%)</title><rect x="801.7" y="709" width="1.1" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="804.74" y="719.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (267,856,935 samples, 0.07%)</title><rect x="853.0" y="757" width="0.8" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="856.01" y="767.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;int, std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::operator[] (369,235,938 samples, 0.10%)</title><rect x="956.5" y="773" width="1.1" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="959.49" y="783.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_capacity (131,614,385 samples, 0.03%)</title><rect x="759.1" y="693" width="0.4" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="762.13" y="703.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;queue&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;,  (4,988,106,950 samples, 1.29%)</title><rect x="169.9" y="933" width="15.2" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="172.89" y="943.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_S_relocate (82,560,140 samples, 0.02%)</title><rect x="1178.1" y="837" width="0.3" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1181.10" y="847.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::allocate (90,105,903 samples, 0.02%)</title><rect x="933.5" y="725" width="0.3" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="936.48" y="735.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (44,876,278 samples, 0.01%)</title><rect x="911.7" y="677" width="0.1" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="914.68" y="687.5" ></text>
</g>
<g >
<title>std::__allocated_ptr&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;,  (113,775,508 samples, 0.03%)</title><rect x="818.0" y="485" width="0.3" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="820.97" y="495.5" ></text>
</g>
<g >
<title>tcp_sendmsg (571,288,817 samples, 0.15%)</title><rect x="1084.5" y="709" width="1.8" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="1087.53" y="719.5" ></text>
</g>
<g >
<title>schedule (200,421,266 samples, 0.05%)</title><rect x="1087.8" y="645" width="0.7" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1090.84" y="655.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::unique_ptr&lt;std::__future_base::_Result&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__future_base::_Result_base::_Deleter, void&gt; (168,117,167 samples, 0.04%)</title><rect x="819.1" y="437" width="0.5" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="822.10" y="447.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (152,311,514 samples, 0.04%)</title><rect x="436.9" y="661" width="0.5" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="439.90" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_valptr (36,724,721 samples, 0.01%)</title><rect x="891.6" y="709" width="0.1" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="894.56" y="719.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator+= (75,660,858 samples, 0.02%)</title><rect x="160.3" y="933" width="0.2" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="163.27" y="943.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (201,992,432 samples, 0.05%)</title><rect x="978.3" y="741" width="0.6" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="981.32" y="751.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (62,456,503 samples, 0.02%)</title><rect x="847.7" y="741" width="0.2" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="850.68" y="751.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::vector (126,368,542 samples, 0.03%)</title><rect x="902.1" y="693" width="0.4" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="905.13" y="703.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned_erms (129,413,183 samples, 0.03%)</title><rect x="868.2" y="709" width="0.4" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="871.16" y="719.5" ></text>
</g>
<g >
<title>std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::~pair (1,194,461,773 samples, 0.31%)</title><rect x="460.9" y="789" width="3.6" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="463.89" y="799.5" ></text>
</g>
<g >
<title>apache::thrift::server::TNonblockingServer::TConnection::setFlags (59,471,304 samples, 0.02%)</title><rect x="202.7" y="677" width="0.2" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="205.74" y="687.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt;::difference_type std::distance&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt; (32,831,347 samples, 0.01%)</title><rect x="518.2" y="741" width="0.1" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="521.18" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;* std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt;::operator (540,366,670 samples, 0.14%)</title><rect x="1013.7" y="741" width="1.7" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="1016.72" y="751.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (723,159,423 samples, 0.19%)</title><rect x="534.0" y="741" width="2.2" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="536.96" y="751.5" ></text>
</g>
<g >
<title>do_user_addr_fault (87,142,555 samples, 0.02%)</title><rect x="1155.8" y="741" width="0.2" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1158.77" y="751.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::max_size (69,268,505 samples, 0.02%)</title><rect x="834.1" y="725" width="0.2" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="837.06" y="735.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (225,043,462 samples, 0.06%)</title><rect x="530.7" y="709" width="0.7" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="533.72" y="719.5" ></text>
</g>
<g >
<title>__GI___libc_free (92,252,821 samples, 0.02%)</title><rect x="505.9" y="645" width="0.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="508.95" y="655.5" ></text>
</g>
<g >
<title>unlink_chunk (145,637,787 samples, 0.04%)</title><rect x="486.8" y="645" width="0.5" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="489.84" y="655.5" ></text>
</g>
<g >
<title>_int_free (220,013,756 samples, 0.06%)</title><rect x="1005.9" y="645" width="0.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1008.85" y="655.5" ></text>
</g>
<g >
<title>std::call_once&lt;void  (543,479,618 samples, 0.14%)</title><rect x="1078.2" y="741" width="1.6" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1081.17" y="751.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (351,397,735 samples, 0.09%)</title><rect x="829.4" y="757" width="1.1" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="832.41" y="767.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (352,748,045 samples, 0.09%)</title><rect x="762.4" y="693" width="1.0" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="765.36" y="703.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (34,673,565 samples, 0.01%)</title><rect x="203.6" y="613" width="0.1" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="206.62" y="623.5" ></text>
</g>
<g >
<title>std::__future_base::_Result_base*&amp; std::__get_helper&lt;0ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt; (34,316,796 samples, 0.01%)</title><rect x="811.1" y="533" width="0.1" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="814.11" y="543.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator= (145,039,968 samples, 0.04%)</title><rect x="1093.7" y="757" width="0.4" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="1096.69" y="767.5" ></text>
</g>
<g >
<title>operator new (192,351,196 samples, 0.05%)</title><rect x="613.3" y="677" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="616.27" y="687.5" ></text>
</g>
<g >
<title>void std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_realloc_insert&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (193,814,999 samples, 0.05%)</title><rect x="1164.8" y="821" width="0.6" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="1167.77" y="831.5" ></text>
</g>
<g >
<title>wake_up_q (96,013,801 samples, 0.02%)</title><rect x="460.1" y="565" width="0.3" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="463.10" y="575.5" ></text>
</g>
<g >
<title>_int_malloc (85,602,269 samples, 0.02%)</title><rect x="1156.8" y="773" width="0.3" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1159.79" y="783.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (96,669,259 samples, 0.03%)</title><rect x="437.7" y="645" width="0.3" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="440.69" y="655.5" ></text>
</g>
<g >
<title>_int_free (35,236,627 samples, 0.01%)</title><rect x="852.8" y="725" width="0.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="855.75" y="735.5" ></text>
</g>
<g >
<title>std::pair&lt;int const, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::~pair (317,899,685 samples, 0.08%)</title><rect x="920.7" y="661" width="1.0" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="923.74" y="671.5" ></text>
</g>
<g >
<title>___pthread_mutex_lock (36,495,227 samples, 0.01%)</title><rect x="422.0" y="725" width="0.1" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="425.04" y="735.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (153,932,239 samples, 0.04%)</title><rect x="1106.9" y="533" width="0.5" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="1109.92" y="543.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::operator++ (37,033,015 samples, 0.01%)</title><rect x="120.3" y="933" width="0.1" height="15.0" fill="rgb(211,27,6)" rx="2" ry="2" />
<text  x="123.27" y="943.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (360,180,136 samples, 0.09%)</title><rect x="1158.4" y="741" width="1.1" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="1161.41" y="751.5" ></text>
</g>
<g >
<title>_int_malloc (191,389,576 samples, 0.05%)</title><rect x="216.5" y="741" width="0.6" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="219.51" y="751.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (369,119,189 samples, 0.10%)</title><rect x="1027.4" y="677" width="1.1" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1030.42" y="687.5" ></text>
</g>
<g >
<title>operator new (151,804,281 samples, 0.04%)</title><rect x="1106.3" y="613" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1109.27" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (44,239,032 samples, 0.01%)</title><rect x="830.6" y="741" width="0.2" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="833.63" y="751.5" ></text>
</g>
<g >
<title>std::enable_if&lt;std::__and_&lt;std::__not_&lt;std::is_void&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt; &gt; &gt;, std::is_convertible&lt;std::__invoke_result&lt;std::__future_base::_State_baseV2::_Setter&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;&amp;&gt;::type, std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt; &gt; &gt;::value, std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt; &gt;::type std::__invoke_r&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;, std::__future_base::_State_baseV2::_Setter&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;&amp;&gt; (533,166,693 samples, 0.14%)</title><rect x="809.2" y="565" width="1.7" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="812.25" y="575.5" ></text>
</g>
<g >
<title>ip_output (121,704,757 samples, 0.03%)</title><rect x="1085.3" y="565" width="0.4" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1088.32" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_node (568,925,334 samples, 0.15%)</title><rect x="1015.5" y="725" width="1.8" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1018.53" y="735.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::deallocate (172,958,599 samples, 0.04%)</title><rect x="816.2" y="597" width="0.5" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="819.16" y="607.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;operation&gt;::allocate (2,703,956,718 samples, 0.70%)</title><rect x="479.0" y="725" width="8.3" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="482.04" y="735.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (40,816,860 samples, 0.01%)</title><rect x="26.5" y="917" width="0.1" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="29.49" y="927.5" ></text>
</g>
<g >
<title>std::mutex::unlock (77,162,008 samples, 0.02%)</title><rect x="1117.1" y="837" width="0.3" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1120.15" y="847.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (40,045,203 samples, 0.01%)</title><rect x="424.9" y="693" width="0.1" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="427.86" y="703.5" ></text>
</g>
<g >
<title>do_futex (68,679,989 samples, 0.02%)</title><rect x="1093.1" y="565" width="0.2" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1096.10" y="575.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::pop_back (364,070,043 samples, 0.09%)</title><rect x="503.0" y="773" width="1.1" height="15.0" fill="rgb(250,209,49)" rx="2" ry="2" />
<text  x="505.97" y="783.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::operator!=&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; (33,163,671 samples, 0.01%)</title><rect x="900.4" y="645" width="0.1" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="903.36" y="655.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned_erms (49,606,638 samples, 0.01%)</title><rect x="906.4" y="629" width="0.1" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="909.39" y="639.5" ></text>
</g>
<g >
<title>EVP_MD_CTX_reset (83,236,291 samples, 0.02%)</title><rect x="860.4" y="709" width="0.3" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="863.42" y="719.5" ></text>
</g>
<g >
<title>std::mutex::lock (319,241,321 samples, 0.08%)</title><rect x="458.3" y="741" width="1.0" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="461.33" y="751.5" ></text>
</g>
<g >
<title>put_prev_task_fair (49,166,358 samples, 0.01%)</title><rect x="1093.1" y="469" width="0.2" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="1096.15" y="479.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (672,873,407 samples, 0.17%)</title><rect x="923.2" y="677" width="2.1" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="926.20" y="687.5" ></text>
</g>
<g >
<title>__pthread_once_slow (1,750,742,678 samples, 0.45%)</title><rect x="806.3" y="709" width="5.3" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="809.26" y="719.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (740,844,642 samples, 0.19%)</title><rect x="939.6" y="661" width="2.3" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="942.60" y="671.5" ></text>
</g>
<g >
<title>ip_output (35,952,852 samples, 0.01%)</title><rect x="1085.9" y="581" width="0.1" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1088.89" y="591.5" ></text>
</g>
<g >
<title>futex_wait_queue (145,365,182 samples, 0.04%)</title><rect x="1086.5" y="709" width="0.4" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="1089.46" y="719.5" ></text>
</g>
<g >
<title>exit_to_user_mode_prepare (116,637,551 samples, 0.03%)</title><rect x="1088.5" y="693" width="0.4" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1091.50" y="703.5" ></text>
</g>
<g >
<title>perf_event_mmap (35,718,104 samples, 0.01%)</title><rect x="1097.0" y="309" width="0.1" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="1100.03" y="319.5" ></text>
</g>
<g >
<title>__x64_sys_futex (178,652,059 samples, 0.05%)</title><rect x="1086.4" y="757" width="0.5" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1089.40" y="767.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::deallocate (149,598,468 samples, 0.04%)</title><rect x="816.2" y="581" width="0.5" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="819.23" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::push_back (1,286,539,137 samples, 0.33%)</title><rect x="446.1" y="773" width="3.9" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="449.09" y="783.5" ></text>
</g>
<g >
<title>std::mutex::lock (131,210,319 samples, 0.03%)</title><rect x="882.1" y="757" width="0.4" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="885.14" y="767.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (745,042,896 samples, 0.19%)</title><rect x="428.6" y="725" width="2.3" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="431.58" y="735.5" ></text>
</g>
<g >
<title>process_backlog (71,753,371 samples, 0.02%)</title><rect x="1085.4" y="389" width="0.2" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="1088.36" y="399.5" ></text>
</g>
<g >
<title>std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::promise (627,668,958 samples, 0.16%)</title><rect x="1106.3" y="629" width="1.9" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="1109.27" y="639.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::~lock_guard (220,599,692 samples, 0.06%)</title><rect x="538.5" y="773" width="0.7" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="541.55" y="783.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (44,277,047 samples, 0.01%)</title><rect x="902.4" y="661" width="0.1" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="905.38" y="671.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (857,548,420 samples, 0.22%)</title><rect x="997.5" y="661" width="2.7" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1000.55" y="671.5" ></text>
</g>
<g >
<title>freqCmp (48,604,674 samples, 0.01%)</title><rect x="581.0" y="741" width="0.1" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="584.00" y="751.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (36,940,309 samples, 0.01%)</title><rect x="523.3" y="725" width="0.1" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="526.31" y="735.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Vector_base (1,529,530,198 samples, 0.40%)</title><rect x="895.6" y="693" width="4.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="898.59" y="703.5" ></text>
</g>
<g >
<title>freqCmp (61,974,539 samples, 0.02%)</title><rect x="788.4" y="725" width="0.2" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="791.36" y="735.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (56,262,187 samples, 0.01%)</title><rect x="863.7" y="709" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="866.68" y="719.5" ></text>
</g>
<g >
<title>queue&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::pop (2,429,078,861 samples, 0.63%)</title><rect x="453.0" y="789" width="7.4" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="456.03" y="799.5" ></text>
</g>
<g >
<title>_int_malloc (67,013,108 samples, 0.02%)</title><rect x="1098.3" y="661" width="0.2" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1101.32" y="671.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (49,966,537 samples, 0.01%)</title><rect x="1161.4" y="661" width="0.1" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1164.39" y="671.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (142,897,723 samples, 0.04%)</title><rect x="531.5" y="709" width="0.4" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="534.47" y="719.5" ></text>
</g>
<g >
<title>tacopie::tcp_client::process_read (529,407,471 samples, 0.14%)</title><rect x="1082.4" y="853" width="1.6" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1085.37" y="863.5" ></text>
</g>
<g >
<title>pipe_write (78,486,760 samples, 0.02%)</title><rect x="1082.8" y="709" width="0.2" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1085.77" y="719.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_create_storage (1,529,530,198 samples, 0.40%)</title><rect x="895.6" y="677" width="4.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="898.59" y="687.5" ></text>
</g>
<g >
<title>operator new (54,898,821 samples, 0.01%)</title><rect x="1163.5" y="805" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1166.47" y="815.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__future_base::_Result_base::_Deleter&gt;::~unique_ptr (57,848,580 samples, 0.01%)</title><rect x="463.5" y="645" width="0.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="466.49" y="655.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__relocate_a_1&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (535,828,045 samples, 0.14%)</title><rect x="946.8" y="661" width="1.7" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="949.83" y="671.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (752,899,410 samples, 0.19%)</title><rect x="681.9" y="693" width="2.3" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="684.87" y="703.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;char*&gt;::difference_type std::distance&lt;char*&gt; (49,176,806 samples, 0.01%)</title><rect x="914.7" y="661" width="0.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="917.66" y="671.5" ></text>
</g>
<g >
<title>operator new (356,533,147 samples, 0.09%)</title><rect x="931.2" y="757" width="1.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="934.18" y="767.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp; std::forward&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt; (47,925,156 samples, 0.01%)</title><rect x="79.3" y="933" width="0.1" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="82.28" y="943.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (617,949,750 samples, 0.16%)</title><rect x="824.6" y="693" width="1.9" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="827.62" y="703.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cpp_redis::reply, std::allocator&lt;cpp_redis::reply&gt; &gt;::_Vector_impl::_Vector_impl (39,990,848 samples, 0.01%)</title><rect x="1064.9" y="725" width="0.1" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="1067.88" y="735.5" ></text>
</g>
<g >
<title>cpp_redis::client::mget (3,524,801,837 samples, 0.91%)</title><rect x="904.1" y="773" width="10.7" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="907.06" y="783.5" ></text>
</g>
<g >
<title>operation* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;operation const*, operation*&gt; (773,434,018 samples, 0.20%)</title><rect x="476.7" y="709" width="2.3" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="479.68" y="719.5" ></text>
</g>
<g >
<title>operator new (321,586,365 samples, 0.08%)</title><rect x="1161.6" y="837" width="1.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1164.65" y="847.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (67,615,692 samples, 0.02%)</title><rect x="1165.8" y="837" width="0.2" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1168.84" y="847.5" ></text>
</g>
<g >
<title>__GI___lll_lock_wait (181,314,213 samples, 0.05%)</title><rect x="458.7" y="677" width="0.6" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="461.74" y="687.5" ></text>
</g>
<g >
<title>_int_malloc (95,507,095 samples, 0.02%)</title><rect x="447.2" y="661" width="0.3" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="450.19" y="671.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__future_base::_Result_base::_Deleter&gt;::release (47,751,627 samples, 0.01%)</title><rect x="819.5" y="405" width="0.1" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="822.47" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (195,264,687 samples, 0.05%)</title><rect x="1145.7" y="789" width="0.6" height="15.0" fill="rgb(220,71,16)" rx="2" ry="2" />
<text  x="1148.66" y="799.5" ></text>
</g>
<g >
<title>freqCmp (487,844,364 samples, 0.13%)</title><rect x="1121.0" y="805" width="1.5" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1124.04" y="815.5" ></text>
</g>
<g >
<title>unsigned char* std::find&lt;unsigned char*, char&gt; (409,061,676 samples, 0.11%)</title><rect x="845.6" y="757" width="1.2" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="848.60" y="767.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, true&gt; &gt;::allocate (268,896,190 samples, 0.07%)</title><rect x="831.4" y="693" width="0.9" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="834.44" y="703.5" ></text>
</g>
<g >
<title>ip_finish_output (35,952,852 samples, 0.01%)</title><rect x="1085.9" y="565" width="0.1" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1088.89" y="575.5" ></text>
</g>
<g >
<title>__gthread_active_p (38,495,308 samples, 0.01%)</title><rect x="537.7" y="741" width="0.1" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="540.70" y="751.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::_M_deleter (51,205,258 samples, 0.01%)</title><rect x="810.9" y="565" width="0.2" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="813.92" y="575.5" ></text>
</g>
<g >
<title>_int_malloc (39,108,902 samples, 0.01%)</title><rect x="1012.7" y="597" width="0.1" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1015.72" y="607.5" ></text>
</g>
<g >
<title>_int_free (2,046,087,274 samples, 0.53%)</title><rect x="776.4" y="693" width="6.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="779.43" y="703.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (126,584,822 samples, 0.03%)</title><rect x="894.0" y="725" width="0.3" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="896.95" y="735.5" ></text>
</g>
<g >
<title>do_syscall_64 (41,420,592 samples, 0.01%)</title><rect x="1093.5" y="613" width="0.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1096.47" y="623.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;std::__future_base::_State_baseV2&gt; std::allocate_shared&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;&gt; (385,169,983 samples, 0.10%)</title><rect x="1106.8" y="597" width="1.2" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1109.83" y="607.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (36,507,847 samples, 0.01%)</title><rect x="426.4" y="709" width="0.1" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="429.41" y="719.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;int, std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::~unordered_map (158,696,342 samples, 0.04%)</title><rect x="1164.1" y="853" width="0.5" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1167.12" y="863.5" ></text>
</g>
<g >
<title>std::enable_if&lt;!std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (36,736,625 samples, 0.01%)</title><rect x="93.9" y="933" width="0.1" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="96.88" y="943.5" ></text>
</g>
<g >
<title>_int_free (790,442,333 samples, 0.20%)</title><rect x="1178.5" y="773" width="2.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1181.45" y="783.5" ></text>
</g>
<g >
<title>__wake_up_sync_key (81,629,633 samples, 0.02%)</title><rect x="1112.0" y="693" width="0.2" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="1114.95" y="703.5" ></text>
</g>
<g >
<title>encryption_engine::encryptNonDeterministic (882,549,250 samples, 0.23%)</title><rect x="1150.2" y="869" width="2.7" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1153.22" y="879.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, false, true&gt;::operator* (52,911,203 samples, 0.01%)</title><rect x="974.5" y="789" width="0.1" height="15.0" fill="rgb(211,27,6)" rx="2" ry="2" />
<text  x="977.48" y="799.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;int, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;::operator[] (373,114,482 samples, 0.10%)</title><rect x="919.6" y="773" width="1.1" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="922.58" y="783.5" ></text>
</g>
<g >
<title>ip_local_out (34,007,746 samples, 0.01%)</title><rect x="204.0" y="405" width="0.1" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="207.04" y="415.5" ></text>
</g>
<g >
<title>operator new (1,024,584,687 samples, 0.27%)</title><rect x="878.4" y="741" width="3.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="881.36" y="751.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (186,388,872 samples, 0.05%)</title><rect x="1117.8" y="821" width="0.6" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1120.80" y="831.5" ></text>
</g>
<g >
<title>__GI___poll (52,817,863 samples, 0.01%)</title><rect x="1111.3" y="821" width="0.1" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="1114.25" y="831.5" ></text>
</g>
<g >
<title>tcache_get (562,450,415 samples, 0.15%)</title><rect x="757.1" y="661" width="1.7" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="760.10" y="671.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, int, true&gt; (258,011,256 samples, 0.07%)</title><rect x="1119.2" y="853" width="0.8" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="1122.19" y="863.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::insert (1,976,762,380 samples, 0.51%)</title><rect x="1009.4" y="789" width="6.0" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1012.40" y="799.5" ></text>
</g>
<g >
<title>get_page_from_freelist (62,056,735 samples, 0.02%)</title><rect x="1084.7" y="613" width="0.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1087.67" y="623.5" ></text>
</g>
<g >
<title>do_softirq.part.0 (110,074,073 samples, 0.03%)</title><rect x="1085.4" y="453" width="0.3" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1088.36" y="463.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy_chars&lt;unsigned char*&gt; (401,222,560 samples, 0.10%)</title><rect x="844.3" y="693" width="1.3" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="847.34" y="703.5" ></text>
</g>
<g >
<title>__x64_sys_futex (243,891,916 samples, 0.06%)</title><rect x="1087.8" y="709" width="0.7" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1090.76" y="719.5" ></text>
</g>
<g >
<title>__gthread_mutex_unlock (189,937,501 samples, 0.05%)</title><rect x="538.6" y="741" width="0.6" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="541.64" y="751.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (239,926,614 samples, 0.06%)</title><rect x="1119.2" y="837" width="0.8" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1122.25" y="847.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (75,007,540 samples, 0.02%)</title><rect x="1092.3" y="629" width="0.3" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1095.33" y="639.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::__uniq_ptr_impl&lt;std::__future_base::_Result_base::_Deleter&gt; (100,038,596 samples, 0.03%)</title><rect x="810.2" y="517" width="0.3" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="813.21" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (2,133,459,315 samples, 0.55%)</title><rect x="494.1" y="741" width="6.5" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="497.10" y="751.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (33,029,743 samples, 0.01%)</title><rect x="1024.4" y="725" width="0.1" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1027.44" y="735.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;*&gt; (1,009,081,935 samples, 0.26%)</title><rect x="816.8" y="613" width="3.1" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="819.79" y="623.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (498,667,511 samples, 0.13%)</title><rect x="788.7" y="725" width="1.5" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="791.72" y="735.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::deallocate (189,764,787 samples, 0.05%)</title><rect x="219.0" y="757" width="0.6" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="221.99" y="767.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (555,882,635 samples, 0.14%)</title><rect x="436.3" y="741" width="1.7" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="439.34" y="751.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::size (39,335,160 samples, 0.01%)</title><rect x="800.5" y="661" width="0.2" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="803.53" y="671.5" ></text>
</g>
<g >
<title>___pthread_mutex_unlock (81,688,677 samples, 0.02%)</title><rect x="882.6" y="725" width="0.3" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="885.65" y="735.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (586,673,474 samples, 0.15%)</title><rect x="136.7" y="885" width="1.8" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="139.70" y="895.5" ></text>
</g>
<g >
<title>freqCmp (1,570,296,663 samples, 0.41%)</title><rect x="586.3" y="725" width="4.8" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="589.33" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, false&gt; &gt; &gt;::_M_deallocate_node (240,150,848 samples, 0.06%)</title><rect x="214.3" y="725" width="0.7" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="217.26" y="735.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt;::_M_ptr (80,594,126 samples, 0.02%)</title><rect x="58.1" y="933" width="0.3" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="61.14" y="943.5" ></text>
</g>
<g >
<title>_int_free (239,335,656 samples, 0.06%)</title><rect x="957.6" y="549" width="0.8" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="960.63" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (36,492,529 samples, 0.01%)</title><rect x="919.8" y="741" width="0.1" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="922.80" y="751.5" ></text>
</g>
<g >
<title>__netif_receive_skb_one_core (68,399,409 samples, 0.02%)</title><rect x="1085.4" y="357" width="0.2" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1088.36" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp; std::forward&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (63,777,980 samples, 0.02%)</title><rect x="79.0" y="933" width="0.2" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="82.04" y="943.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;,  (836,332,778 samples, 0.22%)</title><rect x="462.0" y="709" width="2.5" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="464.96" y="719.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__future_base::_Result_base::_Deleter&gt;::unique_ptr (83,141,160 samples, 0.02%)</title><rect x="470.5" y="533" width="0.3" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="473.52" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (49,684,720 samples, 0.01%)</title><rect x="1167.4" y="821" width="0.2" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1170.40" y="831.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (65,303,621 samples, 0.02%)</title><rect x="440.2" y="709" width="0.2" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="443.22" y="719.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt;::_Rb_tree_iterator (51,587,644 samples, 0.01%)</title><rect x="76.4" y="933" width="0.1" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="79.36" y="943.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (43,184,771 samples, 0.01%)</title><rect x="823.5" y="709" width="0.1" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="826.50" y="719.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (74,131,231 samples, 0.02%)</title><rect x="1041.0" y="709" width="0.2" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1043.98" y="719.5" ></text>
</g>
<g >
<title>encryption_engine::decryptNonDeterministic (3,203,893,379 samples, 0.83%)</title><rect x="838.2" y="789" width="9.8" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="841.18" y="799.5" ></text>
</g>
<g >
<title>arena_for_chunk (43,911,472 samples, 0.01%)</title><rect x="1040.7" y="693" width="0.1" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1043.69" y="703.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (80,025,537 samples, 0.02%)</title><rect x="967.3" y="773" width="0.3" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="970.35" y="783.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (392,574,268 samples, 0.10%)</title><rect x="876.4" y="741" width="1.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="879.37" y="751.5" ></text>
</g>
<g >
<title>randomize_map (1,294,631,629 samples, 0.33%)</title><rect x="136.5" y="933" width="4.0" height="15.0" fill="rgb(235,142,34)" rx="2" ry="2" />
<text  x="139.54" y="943.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (34,228,432 samples, 0.01%)</title><rect x="999.8" y="645" width="0.1" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="1002.75" y="655.5" ></text>
</g>
<g >
<title>cpp_redis::reply::reply (563,828,172 samples, 0.15%)</title><rect x="914.8" y="773" width="1.7" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="917.82" y="783.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (378,863,190 samples, 0.10%)</title><rect x="1121.4" y="773" width="1.1" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1124.37" y="783.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (258,870,761 samples, 0.07%)</title><rect x="961.8" y="741" width="0.8" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="964.84" y="751.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (169,121,251 samples, 0.04%)</title><rect x="1096.6" y="517" width="0.5" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="1099.62" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (157,349,347 samples, 0.04%)</title><rect x="425.8" y="725" width="0.4" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="428.76" y="735.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt; &gt; &gt;::allocate (1,206,136,868 samples, 0.31%)</title><rect x="992.2" y="725" width="3.7" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="995.21" y="735.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (664,855,019 samples, 0.17%)</title><rect x="1095.6" y="693" width="2.0" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1098.59" y="703.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator= (88,161,469 samples, 0.02%)</title><rect x="887.9" y="773" width="0.3" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="890.93" y="783.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::max_size (36,430,926 samples, 0.01%)</title><rect x="448.1" y="693" width="0.1" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="451.06" y="703.5" ></text>
</g>
<g >
<title>__GI___libc_free (90,485,685 samples, 0.02%)</title><rect x="457.4" y="677" width="0.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="460.38" y="687.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;operation, std::allocator&lt;operation&gt; &gt;::_M_allocate (2,703,956,718 samples, 0.70%)</title><rect x="479.0" y="757" width="8.3" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="482.04" y="767.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (33,035,557 samples, 0.01%)</title><rect x="1100.8" y="725" width="0.1" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="1103.76" y="735.5" ></text>
</g>
<g >
<title>all (386,595,219,767 samples, 100%)</title><rect x="10.0" y="981" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="991.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (40,819,922 samples, 0.01%)</title><rect x="434.1" y="725" width="0.1" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="437.07" y="735.5" ></text>
</g>
<g >
<title>EVP_CipherInit_ex (113,451,253 samples, 0.03%)</title><rect x="39.2" y="933" width="0.4" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="42.25" y="943.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;waffle_thriftIf,  (46,301,298 samples, 0.01%)</title><rect x="1089.8" y="757" width="0.2" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1092.84" y="767.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (72,335,081 samples, 0.02%)</title><rect x="1117.6" y="821" width="0.2" height="15.0" fill="rgb(220,71,16)" rx="2" ry="2" />
<text  x="1120.58" y="831.5" ></text>
</g>
<g >
<title>tcache_get (413,019,195 samples, 0.11%)</title><rect x="679.4" y="661" width="1.3" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="682.43" y="671.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;waffle_thriftIf,  (59,889,762 samples, 0.02%)</title><rect x="1089.8" y="805" width="0.2" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1092.80" y="815.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (75,824,709 samples, 0.02%)</title><rect x="430.9" y="725" width="0.2" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="433.91" y="735.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__future_base::_Result_base::_Deleter&gt; std::__invoke_impl&lt;std::unique_ptr&lt;std::__future_base::_Result&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__future_base::_Result_base::_Deleter&gt;, std::__future_base::_State_baseV2::_Setter&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt;&amp;&gt; (244,933,503 samples, 0.06%)</title><rect x="470.0" y="565" width="0.8" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="473.02" y="575.5" ></text>
</g>
<g >
<title>do_futex (43,087,133 samples, 0.01%)</title><rect x="1103.8" y="565" width="0.1" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1106.75" y="575.5" ></text>
</g>
<g >
<title>_int_malloc (125,127,164 samples, 0.03%)</title><rect x="1081.7" y="757" width="0.4" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1084.71" y="767.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (1,008,341,948 samples, 0.26%)</title><rect x="1046.7" y="757" width="3.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1049.74" y="767.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__future_base::_Result_base::_Deleter&gt;::unique_ptr&lt;std::__future_base::_Result_base::_Deleter, void&gt; (60,177,464 samples, 0.02%)</title><rect x="1108.0" y="613" width="0.2" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1111.00" y="623.5" ></text>
</g>
<g >
<title>_int_free (169,842,475 samples, 0.04%)</title><rect x="904.1" y="741" width="0.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="907.13" y="751.5" ></text>
</g>
<g >
<title>operator new (414,105,746 samples, 0.11%)</title><rect x="876.4" y="757" width="1.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="879.36" y="767.5" ></text>
</g>
<g >
<title>_int_free (78,980,067 samples, 0.02%)</title><rect x="615.1" y="677" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="618.10" y="687.5" ></text>
</g>
<g >
<title>apache::thrift::TDispatchProcessor::process (7,218,312,049 samples, 1.87%)</title><rect x="1089.2" y="853" width="22.0" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="1092.16" y="863.5" >a..</text>
</g>
<g >
<title>__GI___libc_malloc (39,617,360 samples, 0.01%)</title><rect x="217.8" y="709" width="0.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="220.81" y="719.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_erase (3,530,480,036 samples, 0.91%)</title><rect x="504.2" y="741" width="10.8" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="507.20" y="751.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;cpp_redis::reply const*, std::vector&lt;cpp_redis::reply, std::allocator&lt;cpp_redis::reply&gt; &gt; &gt;::base (53,380,786 samples, 0.01%)</title><rect x="58.6" y="933" width="0.2" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="61.60" y="943.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::vector (1,204,878,717 samples, 0.31%)</title><rect x="911.1" y="757" width="3.7" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="914.15" y="767.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::__future_base::_State_baseV2&gt;::construct&lt;std::__future_base::_State_baseV2&gt; (50,122,862 samples, 0.01%)</title><rect x="1107.2" y="501" width="0.2" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="1110.24" y="511.5" ></text>
</g>
<g >
<title>ep_poll (149,151,302 samples, 0.04%)</title><rect x="201.9" y="645" width="0.5" height="15.0" fill="rgb(238,151,36)" rx="2" ry="2" />
<text  x="204.93" y="655.5" ></text>
</g>
<g >
<title>waffle_proxy::responder_thread (3,171,917,502 samples, 0.82%)</title><rect x="1052.4" y="821" width="9.7" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="1055.44" y="831.5" ></text>
</g>
<g >
<title>tcp_sendmsg_locked (571,288,817 samples, 0.15%)</title><rect x="1084.5" y="693" width="1.8" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1087.53" y="703.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::construct&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;&gt; (454,584,088 samples, 0.12%)</title><rect x="1095.9" y="645" width="1.4" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="1098.91" y="655.5" ></text>
</g>
<g >
<title>operator new (40,785,910 samples, 0.01%)</title><rect x="456.1" y="725" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="459.13" y="735.5" ></text>
</g>
<g >
<title>___pthread_cond_wait (372,759,748 samples, 0.10%)</title><rect x="1087.7" y="821" width="1.2" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1090.73" y="831.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (34,416,868 samples, 0.01%)</title><rect x="818.7" y="421" width="0.1" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="821.72" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (1,438,464,497 samples, 0.37%)</title><rect x="986.1" y="757" width="4.4" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="989.12" y="767.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__is_null_pointer&lt;char&gt; (134,097,964 samples, 0.03%)</title><rect x="66.8" y="933" width="0.4" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="69.81" y="943.5" ></text>
</g>
<g >
<title>HMAC_Init_ex (120,709,585 samples, 0.03%)</title><rect x="114.3" y="933" width="0.4" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="117.31" y="943.5" ></text>
</g>
<g >
<title>operator new (126,503,978 samples, 0.03%)</title><rect x="941.4" y="629" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="944.42" y="639.5" ></text>
</g>
<g >
<title>operator new (89,895,759 samples, 0.02%)</title><rect x="966.5" y="741" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="969.46" y="751.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (11,759,676,460 samples, 3.04%)</title><rect x="540.4" y="741" width="35.9" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="543.40" y="751.5" >std..</text>
</g>
<g >
<title>exc_page_fault (72,060,781 samples, 0.02%)</title><rect x="1159.1" y="677" width="0.2" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1162.08" y="687.5" ></text>
</g>
<g >
<title>__gnu_cxx::__enable_if&lt;std::__is_char&lt;char&gt;::__value, bool&gt;::__type std::operator==&lt;char&gt; (104,645,630 samples, 0.03%)</title><rect x="820.8" y="677" width="0.4" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="823.84" y="687.5" ></text>
</g>
<g >
<title>tcp_v4_do_rcv (65,358,414 samples, 0.02%)</title><rect x="1060.2" y="69" width="0.2" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="1063.23" y="79.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (289,290,352 samples, 0.07%)</title><rect x="576.6" y="725" width="0.8" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="579.56" y="735.5" ></text>
</g>
<g >
<title>__x64_sys_futex (132,475,330 samples, 0.03%)</title><rect x="465.0" y="709" width="0.4" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="468.05" y="719.5" ></text>
</g>
<g >
<title>evictedItems::insert (2,248,586,382 samples, 0.58%)</title><rect x="887.9" y="789" width="6.8" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="890.86" y="799.5" ></text>
</g>
<g >
<title>rand (77,240,433 samples, 0.02%)</title><rect x="1152.3" y="853" width="0.3" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="1155.33" y="863.5" ></text>
</g>
<g >
<title>__GI___libc_free (101,745,497 samples, 0.03%)</title><rect x="926.2" y="693" width="0.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="929.20" y="703.5" ></text>
</g>
<g >
<title>_int_malloc (40,754,625 samples, 0.01%)</title><rect x="24.3" y="933" width="0.2" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="27.35" y="943.5" ></text>
</g>
<g >
<title>ThreadSafeUnorderedMap&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::clearPromises (8,432,593,777 samples, 2.18%)</title><rect x="803.2" y="789" width="25.8" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="806.22" y="799.5" >T..</text>
</g>
<g >
<title>std::__future_base::_State_baseV2::wait (49,416,662 samples, 0.01%)</title><rect x="918.9" y="741" width="0.1" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="921.90" y="751.5" ></text>
</g>
<g >
<title>dequeue_entity (44,111,085 samples, 0.01%)</title><rect x="1086.7" y="629" width="0.1" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1089.66" y="639.5" ></text>
</g>
<g >
<title>SHA256_Init (33,694,131 samples, 0.01%)</title><rect x="874.0" y="725" width="0.1" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="877.00" y="735.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (36,387,567 samples, 0.01%)</title><rect x="1100.1" y="725" width="0.1" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1103.13" y="735.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (139,161,618 samples, 0.04%)</title><rect x="1098.2" y="709" width="0.4" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1101.20" y="719.5" ></text>
</g>
<g >
<title>arena_for_chunk (42,843,664 samples, 0.01%)</title><rect x="863.1" y="709" width="0.1" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="866.11" y="719.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_allocate (90,105,903 samples, 0.02%)</title><rect x="933.5" y="741" width="0.3" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="936.48" y="751.5" ></text>
</g>
<g >
<title>tcp_write_xmit (53,985,323 samples, 0.01%)</title><rect x="1085.9" y="661" width="0.1" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1088.87" y="671.5" ></text>
</g>
<g >
<title>_int_free (144,666,662 samples, 0.04%)</title><rect x="1016.0" y="645" width="0.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1018.96" y="655.5" ></text>
</g>
<g >
<title>___pthread_mutex_lock (60,082,069 samples, 0.02%)</title><rect x="527.4" y="725" width="0.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="530.40" y="735.5" ></text>
</g>
<g >
<title>void std::__cxx11::list&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_insert&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (366,179,644 samples, 0.09%)</title><rect x="432.0" y="757" width="1.1" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="434.98" y="767.5" ></text>
</g>
<g >
<title>_int_malloc (67,965,719 samples, 0.02%)</title><rect x="1090.5" y="645" width="0.2" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1093.49" y="655.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (758,927,583 samples, 0.20%)</title><rect x="817.5" y="517" width="2.4" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="820.53" y="527.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned_erms (6,193,933,772 samples, 1.60%)</title><rect x="654.9" y="693" width="19.0" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="657.95" y="703.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::_List_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::destroy&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (44,534,467 samples, 0.01%)</title><rect x="431.7" y="725" width="0.2" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="434.75" y="735.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (98,001,728 samples, 0.03%)</title><rect x="523.0" y="741" width="0.3" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="526.00" y="751.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::~vector (514,870,230 samples, 0.13%)</title><rect x="219.0" y="805" width="1.6" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="221.99" y="815.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::__future_base::_State_baseV2&gt;::destroy&lt;std::__future_base::_State_baseV2&gt; (288,186,475 samples, 0.07%)</title><rect x="1056.5" y="677" width="0.9" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="1059.53" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt;::_M_next (118,856,418 samples, 0.03%)</title><rect x="1172.7" y="789" width="0.4" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="1175.74" y="799.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;operation&gt;::deallocate (72,032,981 samples, 0.02%)</title><rect x="404.9" y="741" width="0.2" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="407.88" y="751.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::substr (118,828,297 samples, 0.03%)</title><rect x="1114.6" y="869" width="0.3" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="1117.57" y="879.5" ></text>
</g>
<g >
<title>_int_free (289,468,734 samples, 0.07%)</title><rect x="937.2" y="709" width="0.9" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="940.19" y="719.5" ></text>
</g>
<g >
<title>__gnu_cxx::__enable_if&lt;std::__is_char&lt;char&gt;::__value, bool&gt;::__type std::operator==&lt;char&gt; (37,554,633 samples, 0.01%)</title><rect x="533.4" y="677" width="0.1" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="536.39" y="687.5" ></text>
</g>
<g >
<title>__gthread_mutex_unlock (146,285,889 samples, 0.04%)</title><rect x="492.8" y="741" width="0.4" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="495.79" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (116,421,652 samples, 0.03%)</title><rect x="889.8" y="693" width="0.3" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="892.77" y="703.5" ></text>
</g>
<g >
<title>_int_free (1,161,287,051 samples, 0.30%)</title><rect x="62.0" y="933" width="3.5" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="64.96" y="943.5" ></text>
</g>
<g >
<title>__memchr_avx2 (56,658,533 samples, 0.01%)</title><rect x="1067.5" y="693" width="0.2" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="1070.53" y="703.5" ></text>
</g>
<g >
<title>__gnu_cxx::__enable_if&lt;std::__is_char&lt;char&gt;::__value, bool&gt;::__type std::operator==&lt;char&gt; (363,998,099 samples, 0.09%)</title><rect x="799.9" y="677" width="1.1" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="802.93" y="687.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (94,086,243 samples, 0.02%)</title><rect x="523.0" y="725" width="0.3" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="526.01" y="735.5" ></text>
</g>
<g >
<title>operator new (63,288,693 samples, 0.02%)</title><rect x="517.6" y="661" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="520.58" y="671.5" ></text>
</g>
<g >
<title>__gthread_active_p (2,173,970,237 samples, 0.56%)</title><rect x="194.3" y="917" width="6.7" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="197.35" y="927.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned_erms (243,888,778 samples, 0.06%)</title><rect x="1068.6" y="709" width="0.8" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1071.64" y="719.5" ></text>
</g>
<g >
<title>__GI___libc_free (51,585,020 samples, 0.01%)</title><rect x="940.9" y="629" width="0.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="943.91" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;::_M_v (146,053,336 samples, 0.04%)</title><rect x="798.9" y="693" width="0.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="801.90" y="703.5" ></text>
</g>
<g >
<title>__gthread_mutex_lock (139,130,675 samples, 0.04%)</title><rect x="492.3" y="741" width="0.4" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="495.31" y="751.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::operator[] (2,135,147,543 samples, 0.55%)</title><rect x="888.2" y="773" width="6.5" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="891.20" y="783.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (36,245,339 samples, 0.01%)</title><rect x="1174.2" y="821" width="0.1" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1177.21" y="831.5" ></text>
</g>
<g >
<title>__GI___lll_lock_wake (55,149,743 samples, 0.01%)</title><rect x="1103.9" y="645" width="0.2" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1106.93" y="655.5" ></text>
</g>
<g >
<title>cpp_redis::reply* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;cpp_redis::reply const*, std::vector&lt;cpp_redis::reply, std::allocator&lt;cpp_redis::reply&gt; &gt; &gt;, cpp_redis::reply*&gt; (50,148,557 samples, 0.01%)</title><rect x="915.3" y="709" width="0.1" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="918.28" y="719.5" ></text>
</g>
<g >
<title>__tcp_push_pending_frames (253,502,106 samples, 0.07%)</title><rect x="1060.1" y="469" width="0.7" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1063.06" y="479.5" ></text>
</g>
<g >
<title>HMAC_CTX_new (1,135,850,974 samples, 0.29%)</title><rect x="863.3" y="741" width="3.5" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="866.33" y="751.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (1,066,494,018 samples, 0.28%)</title><rect x="996.9" y="693" width="3.3" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="999.92" y="703.5" ></text>
</g>
<g >
<title>Cache::Cache (37,356,940 samples, 0.01%)</title><rect x="1116.9" y="869" width="0.1" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="1119.85" y="879.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; &gt;::type&amp; std::get&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (73,004,361 samples, 0.02%)</title><rect x="997.3" y="661" width="0.2" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1000.32" y="671.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (524,690,737 samples, 0.14%)</title><rect x="927.7" y="741" width="1.6" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="930.74" y="751.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (52,249,237 samples, 0.01%)</title><rect x="1058.7" y="677" width="0.1" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1061.67" y="687.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned_erms (44,104,858 samples, 0.01%)</title><rect x="208.6" y="613" width="0.1" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="211.56" y="623.5" ></text>
</g>
<g >
<title>unlink_chunk (64,420,866 samples, 0.02%)</title><rect x="193.7" y="933" width="0.2" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="196.75" y="943.5" ></text>
</g>
<g >
<title>malloc_consolidate (62,702,895 samples, 0.02%)</title><rect x="1162.8" y="789" width="0.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1165.78" y="799.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_List_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::deallocate (109,002,664 samples, 0.03%)</title><rect x="503.4" y="725" width="0.3" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="506.36" y="735.5" ></text>
</g>
<g >
<title>__GI___mprotect (35,718,104 samples, 0.01%)</title><rect x="1097.0" y="405" width="0.1" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="1100.03" y="415.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt;::_M_valptr (541,453,057 samples, 0.14%)</title><rect x="725.3" y="709" width="1.6" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="728.28" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (52,369,336 samples, 0.01%)</title><rect x="493.9" y="709" width="0.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="496.88" y="719.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, true&gt; &gt;::allocate (597,807,798 samples, 0.15%)</title><rect x="442.3" y="693" width="1.9" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="445.33" y="703.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__relocate_a&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (168,413,275 samples, 0.04%)</title><rect x="218.5" y="725" width="0.5" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="221.47" y="735.5" ></text>
</g>
<g >
<title>freqCmp (1,411,132,751 samples, 0.37%)</title><rect x="717.7" y="725" width="4.3" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="720.68" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_S_equals (99,745,906 samples, 0.03%)</title><rect x="885.9" y="693" width="0.3" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="888.88" y="703.5" ></text>
</g>
<g >
<title>unlink_chunk (315,317,915 samples, 0.08%)</title><rect x="1179.9" y="741" width="1.0" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="1182.90" y="751.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::allocate (98,661,490 samples, 0.03%)</title><rect x="1164.8" y="789" width="0.3" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="1167.77" y="799.5" ></text>
</g>
<g >
<title>thrift_response_client::async_response (829,578,081 samples, 0.21%)</title><rect x="1059.6" y="757" width="2.5" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1062.59" y="767.5" ></text>
</g>
<g >
<title>std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::~pair (85,007,497 samples, 0.02%)</title><rect x="1094.2" y="757" width="0.3" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="1097.22" y="767.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (84,856,978 samples, 0.02%)</title><rect x="1087.3" y="869" width="0.2" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1090.28" y="879.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt;::_M_next (35,480,957 samples, 0.01%)</title><rect x="883.9" y="709" width="0.2" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="886.94" y="719.5" ></text>
</g>
<g >
<title>__memcpy (35,718,104 samples, 0.01%)</title><rect x="1097.0" y="213" width="0.1" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1100.03" y="223.5" ></text>
</g>
<g >
<title>cpp_redis::client::commit (130,760,990 samples, 0.03%)</title><rect x="1156.7" y="853" width="0.4" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="1159.66" y="863.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (677,291,619 samples, 0.18%)</title><rect x="1055.4" y="725" width="2.0" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1058.36" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_valptr (54,977,226 samples, 0.01%)</title><rect x="1003.3" y="741" width="0.1" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="1006.25" y="751.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::operator!=&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; (33,077,321 samples, 0.01%)</title><rect x="204.9" y="789" width="0.1" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="207.87" y="799.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (148,617,567 samples, 0.04%)</title><rect x="213.6" y="741" width="0.4" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="216.59" y="751.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (1,709,718,701 samples, 0.44%)</title><rect x="1004.2" y="773" width="5.2" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="1007.16" y="783.5" ></text>
</g>
<g >
<title>cpp_redis::reply::reply (513,457,903 samples, 0.13%)</title><rect x="1064.3" y="773" width="1.6" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="1067.31" y="783.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_equals (92,291,561 samples, 0.02%)</title><rect x="1011.3" y="709" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1014.26" y="719.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (659,922,929 samples, 0.17%)</title><rect x="943.2" y="613" width="2.1" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="946.25" y="623.5" ></text>
</g>
<g >
<title>do_syscall_64 (35,265,253 samples, 0.01%)</title><rect x="805.7" y="709" width="0.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="808.68" y="719.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::lock_guard (56,902,205 samples, 0.01%)</title><rect x="433.1" y="773" width="0.2" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="436.10" y="783.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::allocate (151,200,242 samples, 0.04%)</title><rect x="218.0" y="741" width="0.5" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="221.01" y="751.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::erase (3,534,452,854 samples, 0.91%)</title><rect x="504.2" y="757" width="10.8" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="507.19" y="767.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned_erms (469,481,912 samples, 0.12%)</title><rect x="1176.1" y="805" width="1.4" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1179.12" y="815.5" ></text>
</g>
<g >
<title>operation::operation (120,264,977 samples, 0.03%)</title><rect x="1092.2" y="645" width="0.4" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="1095.19" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (633,437,371 samples, 0.16%)</title><rect x="498.6" y="709" width="2.0" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="501.65" y="719.5" ></text>
</g>
<g >
<title>unsigned int std::uniform_int_distribution&lt;unsigned long&gt;::_S_nd&lt;unsigned long, std::mersenne_twister_engine&lt;unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul&gt;, unsigned int&gt; (35,839,409 samples, 0.01%)</title><rect x="139.7" y="885" width="0.1" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="142.73" y="895.5" ></text>
</g>
<g >
<title>_int_malloc (229,582,869 samples, 0.06%)</title><rect x="831.5" y="645" width="0.7" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="834.54" y="655.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_Setter&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;::operator (206,177,698 samples, 0.05%)</title><rect x="809.4" y="533" width="0.6" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="812.38" y="543.5" ></text>
</g>
<g >
<title>malloc_consolidate (188,223,466 samples, 0.05%)</title><rect x="1004.2" y="645" width="0.6" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1007.18" y="655.5" ></text>
</g>
<g >
<title>void std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_realloc_insert&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (91,847,604 samples, 0.02%)</title><rect x="1178.1" y="853" width="0.3" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="1181.07" y="863.5" ></text>
</g>
<g >
<title>operator new (301,200,966 samples, 0.08%)</title><rect x="907.9" y="597" width="0.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="910.85" y="607.5" ></text>
</g>
<g >
<title>unsigned char* std::__find_if&lt;unsigned char*, __gnu_cxx::__ops::_Iter_equals_val&lt;char const&gt; &gt; (367,036,643 samples, 0.09%)</title><rect x="845.7" y="741" width="1.1" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="848.73" y="751.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (60,008,177 samples, 0.02%)</title><rect x="579.7" y="725" width="0.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="582.72" y="735.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (453,479,219 samples, 0.12%)</title><rect x="1171.7" y="821" width="1.4" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1174.72" y="831.5" ></text>
</g>
<g >
<title>HMAC_CTX_free (131,502,044 samples, 0.03%)</title><rect x="1153.0" y="821" width="0.4" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="1156.02" y="831.5" ></text>
</g>
<g >
<title>alloc_pages (62,056,735 samples, 0.02%)</title><rect x="1084.7" y="645" width="0.2" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="1087.67" y="655.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (285,300,912 samples, 0.07%)</title><rect x="1180.9" y="821" width="0.8" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="1183.86" y="831.5" ></text>
</g>
<g >
<title>unsigned int apache::thrift::protocol::TBinaryProtocolT&lt;apache::thrift::transport::TTransport, apache::thrift::protocol::TNetworkBigEndian&gt;::readStringBody&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (201,364,775 samples, 0.05%)</title><rect x="1098.0" y="741" width="0.6" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1101.01" y="751.5" ></text>
</g>
<g >
<title>_int_free (86,960,337 samples, 0.02%)</title><rect x="792.6" y="693" width="0.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="795.62" y="703.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::~lock_guard (74,333,918 samples, 0.02%)</title><rect x="439.0" y="773" width="0.2" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="441.98" y="783.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (48,585,414 samples, 0.01%)</title><rect x="1014.4" y="661" width="0.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1017.44" y="671.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_allocate_node (41,163,775 samples, 0.01%)</title><rect x="1092.6" y="677" width="0.1" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1095.57" y="687.5" ></text>
</g>
<g >
<title>exc_page_fault (91,284,750 samples, 0.02%)</title><rect x="1142.6" y="661" width="0.3" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1145.64" y="671.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (126,386,577 samples, 0.03%)</title><rect x="433.6" y="741" width="0.4" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="436.58" y="751.5" ></text>
</g>
<g >
<title>rseq_ip_fixup (55,216,278 samples, 0.01%)</title><rect x="1088.6" y="645" width="0.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1091.57" y="655.5" ></text>
</g>
<g >
<title>operator new (142,141,689 samples, 0.04%)</title><rect x="1104.2" y="725" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1107.20" y="735.5" ></text>
</g>
<g >
<title>_int_free (147,951,530 samples, 0.04%)</title><rect x="918.0" y="645" width="0.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="920.95" y="655.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (48,750,449 samples, 0.01%)</title><rect x="425.5" y="741" width="0.2" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="428.55" y="751.5" ></text>
</g>
<g >
<title>syscall (275,771,626 samples, 0.07%)</title><rect x="1054.0" y="709" width="0.9" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="1057.04" y="719.5" ></text>
</g>
<g >
<title>apache::thrift::transport::TTransport::borrow (42,381,294 samples, 0.01%)</title><rect x="1098.0" y="725" width="0.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1101.03" y="735.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (55,798,866 samples, 0.01%)</title><rect x="445.8" y="709" width="0.1" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="448.76" y="719.5" ></text>
</g>
<g >
<title>malloc_consolidate (50,092,462 samples, 0.01%)</title><rect x="1064.1" y="789" width="0.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1067.15" y="799.5" ></text>
</g>
<g >
<title>std::__atomic_base&lt;int&gt;::operator++ (68,985,719 samples, 0.02%)</title><rect x="1091.7" y="741" width="0.2" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1094.69" y="751.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (90,921,179 samples, 0.02%)</title><rect x="959.4" y="741" width="0.3" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="962.43" y="751.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (44,326,865 samples, 0.01%)</title><rect x="431.0" y="693" width="0.1" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="433.99" y="703.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy_chars (70,313,504 samples, 0.02%)</title><rect x="521.3" y="757" width="0.2" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="524.29" y="767.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (155,113,766 samples, 0.04%)</title><rect x="423.8" y="693" width="0.4" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="426.77" y="703.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, 0ul&gt; (403,831,738 samples, 0.10%)</title><rect x="534.9" y="661" width="1.2" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="537.86" y="671.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, true&gt; &gt; &gt;::allocate (168,683,592 samples, 0.04%)</title><rect x="436.9" y="709" width="0.5" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="439.85" y="719.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::begin (32,961,861 samples, 0.01%)</title><rect x="448.9" y="741" width="0.1" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="451.87" y="751.5" ></text>
</g>
<g >
<title>unlink_chunk (44,213,060 samples, 0.01%)</title><rect x="924.8" y="613" width="0.2" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="927.83" y="623.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;char*&gt;::iterator_category std::__iterator_category&lt;char*&gt; (274,494,810 samples, 0.07%)</title><rect x="772.0" y="677" width="0.8" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="774.99" y="687.5" ></text>
</g>
<g >
<title>operator new (593,522,566 samples, 0.15%)</title><rect x="442.3" y="677" width="1.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="445.35" y="687.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::get_allocator (34,364,636 samples, 0.01%)</title><rect x="1018.8" y="757" width="0.1" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1021.80" y="767.5" ></text>
</g>
<g >
<title>checked_request2size (38,294,953 samples, 0.01%)</title><rect x="1049.4" y="741" width="0.1" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1052.39" y="751.5" ></text>
</g>
<g >
<title>std::vector&lt;operation, std::allocator&lt;operation&gt; &gt;::~vector (273,426,649 samples, 0.07%)</title><rect x="404.9" y="805" width="0.8" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="407.88" y="815.5" ></text>
</g>
<g >
<title>operator delete (38,516,674 samples, 0.01%)</title><rect x="876.2" y="757" width="0.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="879.19" y="767.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (39,586,692 samples, 0.01%)</title><rect x="930.3" y="645" width="0.2" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="933.34" y="655.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_bucket_index (65,759,761 samples, 0.02%)</title><rect x="1012.3" y="709" width="0.2" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="1015.33" y="719.5" ></text>
</g>
<g >
<title>ThreadSafeUnorderedMap&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::insertIfNotPresent (3,773,413,918 samples, 0.98%)</title><rect x="438.5" y="789" width="11.5" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="441.50" y="799.5" ></text>
</g>
<g >
<title>___pthread_once (106,453,550 samples, 0.03%)</title><rect x="805.9" y="709" width="0.4" height="15.0" fill="rgb(233,128,30)" rx="2" ry="2" />
<text  x="808.94" y="719.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::allocate (405,301,599 samples, 0.10%)</title><rect x="1025.0" y="741" width="1.2" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="1027.98" y="751.5" ></text>
</g>
<g >
<title>futex_wake (804,267,837 samples, 0.21%)</title><rect x="806.5" y="693" width="2.4" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="809.46" y="703.5" ></text>
</g>
<g >
<title>_int_free (131,274,077 samples, 0.03%)</title><rect x="884.4" y="629" width="0.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="887.40" y="639.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::begin (33,021,565 samples, 0.01%)</title><rect x="524.9" y="757" width="0.1" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="527.94" y="767.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;::~pair (456,121,683 samples, 0.12%)</title><rect x="103.6" y="933" width="1.4" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="106.58" y="943.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_v (34,783,725 samples, 0.01%)</title><rect x="957.5" y="741" width="0.1" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="960.45" y="751.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (412,525,750 samples, 0.11%)</title><rect x="534.8" y="677" width="1.3" height="15.0" fill="rgb(252,217,52)" rx="2" ry="2" />
<text  x="537.84" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (2,362,606,488 samples, 0.61%)</title><rect x="1167.2" y="853" width="7.3" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1170.25" y="863.5" ></text>
</g>
<g >
<title>void std::call_once&lt;void  (1,949,573,825 samples, 0.50%)</title><rect x="805.8" y="741" width="5.9" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="808.79" y="751.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt;::_M_valptr (48,171,559 samples, 0.01%)</title><rect x="725.1" y="693" width="0.1" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="728.09" y="703.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;* std::__niter_base&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;*&gt; (41,360,845 samples, 0.01%)</title><rect x="106.1" y="933" width="0.1" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="109.12" y="943.5" ></text>
</g>
<g >
<title>__GI___pthread_mutex_unlock_usercnt (39,761,606 samples, 0.01%)</title><rect x="829.2" y="709" width="0.1" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="832.18" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt;* std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (254,987,082 samples, 0.07%)</title><rect x="1173.3" y="821" width="0.8" height="15.0" fill="rgb(235,142,34)" rx="2" ry="2" />
<text  x="1176.35" y="831.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (471,685,114 samples, 0.12%)</title><rect x="29.9" y="933" width="1.4" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="32.86" y="943.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (360,529,467 samples, 0.09%)</title><rect x="1087.8" y="741" width="1.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1090.76" y="751.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_allocate (82,091,495 samples, 0.02%)</title><rect x="902.1" y="645" width="0.3" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="905.13" y="655.5" ></text>
</g>
<g >
<title>__x64_sys_futex (592,873,344 samples, 0.15%)</title><rect x="806.9" y="645" width="1.8" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="809.90" y="655.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::~pair (756,625,028 samples, 0.20%)</title><rect x="1007.0" y="677" width="2.3" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="1009.99" y="687.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;::tuple&lt;true, true&gt; (43,517,358 samples, 0.01%)</title><rect x="106.8" y="933" width="0.2" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="109.82" y="943.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (680,811,449 samples, 0.18%)</title><rect x="826.5" y="741" width="2.1" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="829.51" y="751.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (202,403,857 samples, 0.05%)</title><rect x="960.2" y="645" width="0.6" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="963.21" y="655.5" ></text>
</g>
<g >
<title>__local_bh_enable_ip (171,017,566 samples, 0.04%)</title><rect x="1060.1" y="277" width="0.5" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1063.07" y="287.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (528,397,554 samples, 0.14%)</title><rect x="516.5" y="709" width="1.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="519.54" y="719.5" ></text>
</g>
<g >
<title>std::mutex::unlock (35,422,338 samples, 0.01%)</title><rect x="451.1" y="757" width="0.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="454.06" y="767.5" ></text>
</g>
<g >
<title>cpp_redis::network::redis_connection::send (758,644,120 samples, 0.20%)</title><rect x="905.0" y="693" width="2.3" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="907.99" y="703.5" ></text>
</g>
<g >
<title>operator new (81,533,007 samples, 0.02%)</title><rect x="579.7" y="741" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="582.68" y="751.5" ></text>
</g>
<g >
<title>void std::vector&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_realloc_insert&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (256,298,196 samples, 0.07%)</title><rect x="1090.5" y="741" width="0.8" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="1093.49" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_v (43,613,457 samples, 0.01%)</title><rect x="974.5" y="773" width="0.1" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="977.51" y="783.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;char*&gt;::difference_type std::distance&lt;char*&gt; (147,008,531 samples, 0.04%)</title><rect x="1189.4" y="949" width="0.4" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1192.36" y="959.5" ></text>
</g>
<g >
<title>__ip_queue_xmit (132,349,110 samples, 0.03%)</title><rect x="1085.3" y="597" width="0.4" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1088.32" y="607.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (225,784,796 samples, 0.06%)</title><rect x="209.6" y="725" width="0.7" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="212.62" y="735.5" ></text>
</g>
<g >
<title>void std::thread::_Invoker&lt;std::tuple&lt;void  (281,054,969,830 samples, 72.70%)</title><rect x="204.3" y="869" width="857.8" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="207.26" y="879.5" >void std::thread::_Invoker&lt;std::tuple&lt;void </text>
</g>
<g >
<title>operation::operation (165,632,721 samples, 0.04%)</title><rect x="1102.9" y="645" width="0.5" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="1105.88" y="655.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (49,684,720 samples, 0.01%)</title><rect x="1167.4" y="837" width="0.2" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="1170.40" y="847.5" ></text>
</g>
<g >
<title>__dev_queue_xmit (34,007,746 samples, 0.01%)</title><rect x="204.0" y="309" width="0.1" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="207.04" y="319.5" ></text>
</g>
<g >
<title>__GI___libc_free (116,472,032 samples, 0.03%)</title><rect x="1162.6" y="821" width="0.4" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1165.63" y="831.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (142,141,689 samples, 0.04%)</title><rect x="1104.2" y="709" width="0.4" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1107.20" y="719.5" ></text>
</g>
<g >
<title>std::once_flag::_Prepare_execution::_Prepare_execution&lt;std::call_once&lt;void  (1,190,057,766 samples, 0.31%)</title><rect x="469.1" y="709" width="3.6" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="472.11" y="719.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt; &gt;::type&amp; std::get&lt;0ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt; (34,567,308 samples, 0.01%)</title><rect x="819.7" y="405" width="0.1" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="822.69" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::count (601,402,243 samples, 0.16%)</title><rect x="530.2" y="757" width="1.8" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="533.18" y="767.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr (47,111,945 samples, 0.01%)</title><rect x="811.1" y="565" width="0.1" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="814.07" y="575.5" ></text>
</g>
<g >
<title>std::pair&lt;int, std::pair&lt;sequence_id const&amp;, std::vector&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;::~pair (59,645,727 samples, 0.02%)</title><rect x="1057.8" y="805" width="0.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1060.78" y="815.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (510,872,793 samples, 0.13%)</title><rect x="907.4" y="677" width="1.5" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="910.36" y="687.5" ></text>
</g>
<g >
<title>heap_for_ptr (352,923,123 samples, 0.09%)</title><rect x="704.6" y="661" width="1.0" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="707.55" y="671.5" ></text>
</g>
<g >
<title>__libc_send (268,877,032 samples, 0.07%)</title><rect x="1111.4" y="821" width="0.8" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="1114.41" y="831.5" ></text>
</g>
<g >
<title>futex_wait (163,372,339 samples, 0.04%)</title><rect x="1086.4" y="725" width="0.5" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1089.44" y="735.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (39,600,191 samples, 0.01%)</title><rect x="594.8" y="661" width="0.2" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="597.83" y="671.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (63,247,455 samples, 0.02%)</title><rect x="934.1" y="645" width="0.2" height="15.0" fill="rgb(214,41,9)" rx="2" ry="2" />
<text  x="937.11" y="655.5" ></text>
</g>
<g >
<title>_int_free (80,684,231 samples, 0.02%)</title><rect x="966.1" y="725" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="969.08" y="735.5" ></text>
</g>
<g >
<title>__gthread_mutex_lock (36,495,227 samples, 0.01%)</title><rect x="422.0" y="741" width="0.1" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="425.04" y="751.5" ></text>
</g>
<g >
<title>memcpy@plt (231,338,405 samples, 0.06%)</title><rect x="752.0" y="693" width="0.7" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="754.97" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (38,788,241 samples, 0.01%)</title><rect x="532.4" y="709" width="0.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="535.38" y="719.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_erase (252,053,037 samples, 0.07%)</title><rect x="524.1" y="757" width="0.8" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="527.10" y="767.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (146,089,993 samples, 0.04%)</title><rect x="1098.2" y="725" width="0.4" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1101.18" y="735.5" ></text>
</g>
<g >
<title>operator new (961,180,700 samples, 0.25%)</title><rect x="69.4" y="933" width="2.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="72.37" y="943.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;::pair (14,901,837,327 samples, 3.85%)</title><rect x="727.4" y="725" width="45.4" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="730.36" y="735.5" >std:..</text>
</g>
<g >
<title>_start (22,473,549,962 samples, 5.81%)</title><rect x="1113.8" y="949" width="68.6" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="1116.76" y="959.5" >_start</text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (700,049,273 samples, 0.18%)</title><rect x="487.9" y="789" width="2.1" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="490.86" y="799.5" ></text>
</g>
<g >
<title>tacopie::io_service::poll (441,916,128 samples, 0.11%)</title><rect x="1062.1" y="901" width="1.4" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1065.12" y="911.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::~pair (250,088,943 samples, 0.06%)</title><rect x="958.4" y="565" width="0.8" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="961.43" y="575.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (158,696,342 samples, 0.04%)</title><rect x="1164.1" y="821" width="0.5" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="1167.12" y="831.5" ></text>
</g>
<g >
<title>HMAC_CTX_reset (68,696,570 samples, 0.02%)</title><rect x="48.7" y="933" width="0.2" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="51.68" y="943.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (226,371,588 samples, 0.06%)</title><rect x="449.3" y="661" width="0.7" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="452.33" y="671.5" ></text>
</g>
<g >
<title>std::__future_base::_Result_base*&amp; std::__get_helper&lt;0ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt; (34,834,249 samples, 0.01%)</title><rect x="472.1" y="549" width="0.1" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="475.12" y="559.5" ></text>
</g>
<g >
<title>checked_request2size (345,350,882 samples, 0.09%)</title><rect x="756.0" y="661" width="1.1" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="759.04" y="671.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (96,005,380 samples, 0.02%)</title><rect x="888.5" y="741" width="0.3" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="891.52" y="751.5" ></text>
</g>
<g >
<title>apache::thrift::transport::TTransport::consume (53,193,556 samples, 0.01%)</title><rect x="1108.8" y="725" width="0.2" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1111.79" y="735.5" ></text>
</g>
<g >
<title>free@plt (188,764,508 samples, 0.05%)</title><rect x="705.7" y="709" width="0.5" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="708.65" y="719.5" ></text>
</g>
<g >
<title>unlink_chunk (59,828,263 samples, 0.02%)</title><rect x="1077.5" y="757" width="0.2" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="1080.52" y="767.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::allocate (98,661,490 samples, 0.03%)</title><rect x="1164.8" y="773" width="0.3" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="1167.77" y="783.5" ></text>
</g>
<g >
<title>unsigned int apache::thrift::protocol::TBinaryProtocolT&lt;apache::thrift::transport::TTransport, apache::thrift::protocol::TNetworkBigEndian&gt;::writeString&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (203,513,784 samples, 0.05%)</title><rect x="1061.3" y="661" width="0.6" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1064.30" y="671.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (127,341,858 samples, 0.03%)</title><rect x="434.2" y="725" width="0.4" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="437.19" y="735.5" ></text>
</g>
<g >
<title>___pthread_cond_wait (272,172,016 samples, 0.07%)</title><rect x="1086.3" y="869" width="0.8" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1089.31" y="879.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;::operator[] (353,519,617 samples, 0.09%)</title><rect x="426.6" y="773" width="1.1" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="429.58" y="783.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate (192,112,434 samples, 0.05%)</title><rect x="1004.2" y="693" width="0.6" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1007.17" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (182,549,266 samples, 0.05%)</title><rect x="539.8" y="725" width="0.6" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="542.84" y="735.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (51,200,066 samples, 0.01%)</title><rect x="523.1" y="693" width="0.2" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="526.14" y="703.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (94,213,797 samples, 0.02%)</title><rect x="1175.5" y="837" width="0.2" height="15.0" fill="rgb(206,9,2)" rx="2" ry="2" />
<text  x="1178.45" y="847.5" ></text>
</g>
<g >
<title>__GI___libc_free (112,240,865 samples, 0.03%)</title><rect x="902.7" y="773" width="0.4" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="905.75" y="783.5" ></text>
</g>
<g >
<title>std::__future_base::_Result_base::_Deleter&amp;&amp; std::forward&lt;std::__future_base::_Result_base::_Deleter&gt; (37,343,421 samples, 0.01%)</title><rect x="91.5" y="933" width="0.1" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="94.47" y="943.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (103,968,842 samples, 0.03%)</title><rect x="987.4" y="725" width="0.4" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="990.43" y="735.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::~_Vector_base (281,043,581 samples, 0.07%)</title><rect x="815.9" y="629" width="0.8" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="818.89" y="639.5" ></text>
</g>
<g >
<title>heap_max_size (153,961,939 samples, 0.04%)</title><rect x="705.2" y="645" width="0.4" height="15.0" fill="rgb(244,179,43)" rx="2" ry="2" />
<text  x="708.16" y="655.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (177,837,546 samples, 0.05%)</title><rect x="214.4" y="645" width="0.6" height="15.0" fill="rgb(206,9,2)" rx="2" ry="2" />
<text  x="217.45" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (445,048,769 samples, 0.12%)</title><rect x="497.3" y="693" width="1.3" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="500.28" y="703.5" ></text>
</g>
<g >
<title>_int_free (439,767,099 samples, 0.11%)</title><rect x="1007.7" y="645" width="1.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1010.70" y="655.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_State_baseV2 (47,854,996 samples, 0.01%)</title><rect x="1107.2" y="485" width="0.2" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1110.24" y="495.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (85,389,812 samples, 0.02%)</title><rect x="967.1" y="773" width="0.2" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="970.09" y="783.5" ></text>
</g>
<g >
<title>cpp_redis::reply::reply (1,065,264,871 samples, 0.28%)</title><rect x="922.0" y="693" width="3.3" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="925.01" y="703.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (926,489,951 samples, 0.24%)</title><rect x="759.5" y="693" width="2.9" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="762.54" y="703.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::~_Vector_base (99,490,149 samples, 0.03%)</title><rect x="920.7" y="629" width="0.3" height="15.0" fill="rgb(252,217,51)" rx="2" ry="2" />
<text  x="923.74" y="639.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::end (48,693,115 samples, 0.01%)</title><rect x="502.8" y="757" width="0.2" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="505.81" y="767.5" ></text>
</g>
<g >
<title>_int_malloc (63,115,653 samples, 0.02%)</title><rect x="1177.7" y="773" width="0.2" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1180.72" y="783.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (847,005,030 samples, 0.22%)</title><rect x="942.7" y="645" width="2.6" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="945.68" y="655.5" ></text>
</g>
<g >
<title>operator new (183,260,004 samples, 0.05%)</title><rect x="1065.2" y="741" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1068.16" y="751.5" ></text>
</g>
<g >
<title>waffle_proxy::execute_batch (184,268,960,127 samples, 47.66%)</title><rect x="490.0" y="805" width="562.4" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="493.00" y="815.5" >waffle_proxy::execute_batch</text>
</g>
<g >
<title>std::shared_ptr&lt;std::__future_base::_State_baseV2&gt;::shared_ptr&lt;std::allocator&lt;std::__future_base::_State_baseV2&gt;&gt; (385,169,983 samples, 0.10%)</title><rect x="1106.8" y="581" width="1.2" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1109.83" y="591.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (699,746,522 samples, 0.18%)</title><rect x="1055.3" y="741" width="2.1" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1058.29" y="751.5" ></text>
</g>
<g >
<title>std::operator&amp; (1,490,664,712 samples, 0.39%)</title><rect x="96.8" y="933" width="4.6" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="99.85" y="943.5" ></text>
</g>
<g >
<title>start_thread (298,349,771,750 samples, 77.17%)</title><rect x="201.9" y="933" width="910.6" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="204.90" y="943.5" >start_thread</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::data (64,716,054 samples, 0.02%)</title><rect x="574.4" y="661" width="0.2" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="577.41" y="671.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cpp_redis::reply, std::allocator&lt;cpp_redis::reply&gt; &gt;::_Vector_base (40,972,650 samples, 0.01%)</title><rect x="1080.8" y="789" width="0.1" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1083.79" y="799.5" ></text>
</g>
<g >
<title>cpp_redis::client::unprotected_send (1,287,382,617 samples, 0.33%)</title><rect x="905.0" y="709" width="3.9" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="907.99" y="719.5" ></text>
</g>
<g >
<title>operator new (43,579,596 samples, 0.01%)</title><rect x="1012.7" y="629" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1015.72" y="639.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (83,496,460 samples, 0.02%)</title><rect x="1098.3" y="677" width="0.3" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1101.31" y="687.5" ></text>
</g>
<g >
<title>__refill_stock (35,594,671 samples, 0.01%)</title><rect x="1083.3" y="597" width="0.1" height="15.0" fill="rgb(211,27,6)" rx="2" ry="2" />
<text  x="1086.26" y="607.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt;::_M_ptr (108,686,061 samples, 0.03%)</title><rect x="1123.2" y="773" width="0.3" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1126.16" y="783.5" ></text>
</g>
<g >
<title>SHA256_Final (183,456,549 samples, 0.05%)</title><rect x="867.1" y="709" width="0.6" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="870.13" y="719.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (115,121,972 samples, 0.03%)</title><rect x="1083.6" y="805" width="0.4" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1086.63" y="815.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::lock_guard (121,556,038 samples, 0.03%)</title><rect x="527.2" y="773" width="0.4" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="530.23" y="783.5" ></text>
</g>
<g >
<title>_int_free (85,580,292 samples, 0.02%)</title><rect x="902.8" y="757" width="0.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="905.81" y="767.5" ></text>
</g>
<g >
<title>__GI___libc_write (36,850,247 samples, 0.01%)</title><rect x="1063.5" y="853" width="0.2" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1066.54" y="863.5" ></text>
</g>
<g >
<title>cpp_redis::client::exec_cmd (1,841,066,333 samples, 0.48%)</title><rect x="904.7" y="757" width="5.6" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="907.70" y="767.5" ></text>
</g>
<g >
<title>malloc_consolidate (54,007,247 samples, 0.01%)</title><rect x="933.6" y="645" width="0.1" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="936.56" y="655.5" ></text>
</g>
<g >
<title>_int_free (80,727,838 samples, 0.02%)</title><rect x="904.7" y="709" width="0.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="907.72" y="719.5" ></text>
</g>
<g >
<title>__gthread_mutex_lock (294,431,906 samples, 0.08%)</title><rect x="458.4" y="725" width="0.9" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="461.41" y="735.5" ></text>
</g>
<g >
<title>operator new (1,102,501,903 samples, 0.29%)</title><rect x="992.5" y="693" width="3.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="995.52" y="703.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (336,043,386 samples, 0.09%)</title><rect x="211.7" y="693" width="1.0" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="214.68" y="703.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (136,331,344 samples, 0.04%)</title><rect x="1143.2" y="789" width="0.4" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1146.22" y="799.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (104,005,507 samples, 0.03%)</title><rect x="445.6" y="741" width="0.3" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="448.61" y="751.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, 0ul&gt; (362,271,942 samples, 0.09%)</title><rect x="892.6" y="661" width="1.1" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="895.55" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_S_do_relocate (229,710,399 samples, 0.06%)</title><rect x="933.8" y="725" width="0.7" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="936.77" y="735.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__strip_reference_wrapper&lt;std::decay&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt;::type&gt;::__type, std::__strip_reference_wrapper&lt;std::decay&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt;::type&gt;::__type&gt; std::make_pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt; (162,988,009 samples, 0.04%)</title><rect x="433.5" y="773" width="0.5" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="436.48" y="783.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::erase (3,027,686,167 samples, 0.78%)</title><rect x="812.6" y="773" width="9.2" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="815.55" y="783.5" ></text>
</g>
<g >
<title>apache::thrift::protocol::TVirtualProtocol&lt;apache::thrift::protocol::TBinaryProtocolT&lt;apache::thrift::transport::TTransport, apache::thrift::protocol::TNetworkBigEndian&gt;, apache::thrift::protocol::TProtocolDefaults&gt;::readString_virt (211,681,708 samples, 0.05%)</title><rect x="1108.5" y="773" width="0.7" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1111.55" y="783.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, std::pair&lt;int const, std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (43,057,306 samples, 0.01%)</title><rect x="957.3" y="741" width="0.2" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="960.32" y="751.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::deallocate (239,335,656 samples, 0.06%)</title><rect x="957.6" y="597" width="0.8" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="960.63" y="607.5" ></text>
</g>
<g >
<title>_int_free (62,313,302 samples, 0.02%)</title><rect x="214.3" y="565" width="0.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="217.26" y="575.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (37,566,924 samples, 0.01%)</title><rect x="979.0" y="757" width="0.1" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="981.95" y="767.5" ></text>
</g>
<g >
<title>std::_Rb_tree_rebalance_for_erase (1,264,964,184 samples, 0.33%)</title><rect x="599.8" y="709" width="3.9" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="602.82" y="719.5" ></text>
</g>
<g >
<title>__GI___libc_free (91,308,073 samples, 0.02%)</title><rect x="1084.2" y="837" width="0.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1087.17" y="847.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; std::make_shared&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;&gt; (796,370,511 samples, 0.21%)</title><rect x="1105.9" y="757" width="2.4" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="1108.92" y="767.5" ></text>
</g>
<g >
<title>tcp_push (212,328,039 samples, 0.05%)</title><rect x="1085.2" y="677" width="0.7" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1088.22" y="687.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (109,320,694 samples, 0.03%)</title><rect x="941.5" y="613" width="0.3" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="944.45" y="623.5" ></text>
</g>
<g >
<title> (59,889,762 samples, 0.02%)</title><rect x="1089.8" y="789" width="0.2" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="1092.80" y="799.5" ></text>
</g>
<g >
<title>EVP_CIPHER_CTX_free (68,103,147 samples, 0.02%)</title><rect x="1150.6" y="821" width="0.3" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="1153.65" y="831.5" ></text>
</g>
<g >
<title>waffle_proxy::get_future (2,097,919,836 samples, 0.54%)</title><rect x="1091.3" y="773" width="6.4" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="1094.29" y="783.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::lock_guard (101,757,701 samples, 0.03%)</title><rect x="578.1" y="773" width="0.3" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="581.06" y="783.5" ></text>
</g>
<g >
<title>aesni_init_key (445,335,475 samples, 0.12%)</title><rect x="850.0" y="725" width="1.4" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="853.03" y="735.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__is_null_pointer&lt;char&gt; (201,670,920 samples, 0.05%)</title><rect x="673.9" y="693" width="0.6" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="676.87" y="703.5" ></text>
</g>
<g >
<title>_int_free (45,190,556 samples, 0.01%)</title><rect x="1157.7" y="789" width="0.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1160.68" y="799.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_State_baseV2 (61,259,600 samples, 0.02%)</title><rect x="1096.4" y="485" width="0.2" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1099.38" y="495.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (847,005,030 samples, 0.22%)</title><rect x="942.7" y="677" width="2.6" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="945.68" y="687.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (140,124,399 samples, 0.04%)</title><rect x="500.7" y="725" width="0.4" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="503.68" y="735.5" ></text>
</g>
<g >
<title>cpp_redis::builders::bulk_string_builder::operator&lt;&lt; (971,497,715 samples, 0.25%)</title><rect x="1066.4" y="757" width="3.0" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="1069.42" y="767.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__is_null_pointer&lt;char&gt; (187,579,427 samples, 0.05%)</title><rect x="1183.3" y="949" width="0.6" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="1186.31" y="959.5" ></text>
</g>
<g >
<title>arena_for_chunk (49,162,536 samples, 0.01%)</title><rect x="1094.3" y="693" width="0.1" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1097.28" y="703.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (43,989,723 samples, 0.01%)</title><rect x="208.1" y="677" width="0.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="211.13" y="687.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, 0ul&gt; (150,321,052 samples, 0.04%)</title><rect x="832.5" y="661" width="0.4" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="835.45" y="671.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;cpp_redis::client&amp;  (358,371,569 samples, 0.09%)</title><rect x="951.9" y="757" width="1.1" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="954.94" y="767.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;char*&gt;::iterator_category std::__iterator_category&lt;char*&gt; (34,802,908 samples, 0.01%)</title><rect x="1052.2" y="757" width="0.1" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1055.22" y="767.5" ></text>
</g>
<g >
<title>tacopie::tcp_client::on_read_available (6,657,021,314 samples, 1.72%)</title><rect x="1063.7" y="869" width="20.3" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1066.67" y="879.5" ></text>
</g>
<g >
<title>operator delete (368,455,984 samples, 0.10%)</title><rect x="784.1" y="709" width="1.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="787.09" y="719.5" ></text>
</g>
<g >
<title>void std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::emplace_back&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (366,178,762 samples, 0.09%)</title><rect x="1058.1" y="789" width="1.1" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="1061.06" y="799.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin (45,134,993 samples, 0.01%)</title><rect x="1147.4" y="805" width="0.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1150.43" y="815.5" ></text>
</g>
<g >
<title>dequeue_task_fair (47,511,970 samples, 0.01%)</title><rect x="1086.7" y="645" width="0.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1089.66" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_S_equals (146,340,807 samples, 0.04%)</title><rect x="33.1" y="933" width="0.5" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="36.11" y="943.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::unique_ptr&lt;std::__future_base::_Result&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__future_base::_Result_base::_Deleter, void&gt; (262,449,934 samples, 0.07%)</title><rect x="471.0" y="565" width="0.8" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="473.96" y="575.5" ></text>
</g>
<g >
<title>__GI___libc_free (161,689,314 samples, 0.04%)</title><rect x="884.3" y="645" width="0.5" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="887.33" y="655.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;::pair (4,987,687,485 samples, 1.29%)</title><rect x="1123.7" y="805" width="15.2" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="1126.72" y="815.5" ></text>
</g>
<g >
<title>do_mprotect_pkey (35,718,104 samples, 0.01%)</title><rect x="1097.0" y="341" width="0.1" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1100.03" y="351.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (416,142,467 samples, 0.11%)</title><rect x="967.7" y="773" width="1.3" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="970.71" y="783.5" ></text>
</g>
<g >
<title>operator new (82,091,495 samples, 0.02%)</title><rect x="902.1" y="597" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="905.13" y="607.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (82,453,102 samples, 0.02%)</title><rect x="160.0" y="933" width="0.2" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="162.99" y="943.5" ></text>
</g>
<g >
<title>operator new (483,810,801 samples, 0.13%)</title><rect x="970.5" y="757" width="1.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="973.53" y="767.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;unsigned char*&gt; (738,298,094 samples, 0.19%)</title><rect x="843.3" y="741" width="2.3" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="846.31" y="751.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (12,838,491,257 samples, 3.32%)</title><rect x="733.7" y="709" width="39.1" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="736.66" y="719.5" >voi..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__relocate_a&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (283,658,468 samples, 0.07%)</title><rect x="138.5" y="853" width="0.9" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="141.53" y="863.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (45,052,576 samples, 0.01%)</title><rect x="1175.3" y="821" width="0.2" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="1178.32" y="831.5" ></text>
</g>
<g >
<title>try_to_wake_up (36,923,557 samples, 0.01%)</title><rect x="1063.2" y="693" width="0.1" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1066.20" y="703.5" ></text>
</g>
<g >
<title>try_to_wake_up (96,013,801 samples, 0.02%)</title><rect x="460.1" y="549" width="0.3" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="463.10" y="559.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (57,117,092 samples, 0.01%)</title><rect x="82.8" y="933" width="0.2" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="85.81" y="943.5" ></text>
</g>
<g >
<title>unlink_chunk (50,446,774 samples, 0.01%)</title><rect x="535.8" y="581" width="0.2" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="538.82" y="591.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (241,484,040 samples, 0.06%)</title><rect x="1155.4" y="837" width="0.8" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="1158.44" y="847.5" ></text>
</g>
<g >
<title>operator new (1,529,530,198 samples, 0.40%)</title><rect x="895.6" y="613" width="4.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="898.59" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::resize (582,611,378 samples, 0.15%)</title><rect x="1109.3" y="789" width="1.7" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="1112.26" y="799.5" ></text>
</g>
<g >
<title>decltype  (53,246,096 samples, 0.01%)</title><rect x="68.3" y="933" width="0.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="71.33" y="943.5" ></text>
</g>
<g >
<title>__GI___libc_free (169,860,285 samples, 0.04%)</title><rect x="1015.9" y="661" width="0.5" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1018.91" y="671.5" ></text>
</g>
<g >
<title>__gthread_mutex_unlock (58,810,853 samples, 0.02%)</title><rect x="1119.0" y="821" width="0.2" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="1122.01" y="831.5" ></text>
</g>
<g >
<title>operation* std::__uninitialized_copy_a&lt;operation const*, operation*, operation&gt; (773,434,018 samples, 0.20%)</title><rect x="476.7" y="741" width="2.3" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="479.68" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;1, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt;::_M_cget (56,454,875 samples, 0.01%)</title><rect x="89.2" y="933" width="0.2" height="15.0" fill="rgb(214,41,9)" rx="2" ry="2" />
<text  x="92.22" y="943.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;,  (56,987,618 samples, 0.01%)</title><rect x="462.0" y="693" width="0.2" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="465.02" y="703.5" ></text>
</g>
<g >
<title>tcp_push (253,502,106 samples, 0.07%)</title><rect x="1060.1" y="485" width="0.7" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1063.06" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (204,429,039 samples, 0.05%)</title><rect x="890.5" y="741" width="0.6" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="893.48" y="751.5" ></text>
</g>
<g >
<title>std::deque&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;::pop_front (328,670,866 samples, 0.09%)</title><rect x="457.2" y="757" width="1.0" height="15.0" fill="rgb(208,16,4)" rx="2" ry="2" />
<text  x="460.17" y="767.5" ></text>
</g>
<g >
<title>__GI___libc_free (76,277,876 samples, 0.02%)</title><rect x="1175.5" y="773" width="0.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1178.49" y="783.5" ></text>
</g>
<g >
<title>operator new (53,748,394 samples, 0.01%)</title><rect x="916.2" y="741" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="919.20" y="751.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::~shared_ptr (1,048,619,170 samples, 0.27%)</title><rect x="461.3" y="773" width="3.2" height="15.0" fill="rgb(248,197,47)" rx="2" ry="2" />
<text  x="464.34" y="783.5" ></text>
</g>
<g >
<title>_int_malloc (82,091,495 samples, 0.02%)</title><rect x="902.1" y="565" width="0.3" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="905.13" y="575.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt;::tuple&lt;std::__future_base::_Result_base*&amp;, std::__future_base::_Result_base::_Deleter, true&gt; (46,663,794 samples, 0.01%)</title><rect x="819.2" y="389" width="0.2" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="822.25" y="399.5" ></text>
</g>
<g >
<title>exc_page_fault (57,781,780 samples, 0.01%)</title><rect x="1162.4" y="773" width="0.1" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1165.36" y="783.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt;::_M_addr (48,968,645 samples, 0.01%)</title><rect x="119.2" y="933" width="0.2" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="122.23" y="943.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_erase_at_end (94,213,797 samples, 0.02%)</title><rect x="1175.5" y="853" width="0.2" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="1178.45" y="863.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;, std::_Identity&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt;, bool  (6,903,139,605 samples, 1.79%)</title><rect x="1120.3" y="821" width="21.0" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1123.26" y="831.5" ></text>
</g>
<g >
<title>new_heap (33,539,657 samples, 0.01%)</title><rect x="1087.3" y="741" width="0.1" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="1090.34" y="751.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1,513,401,879 samples, 0.39%)</title><rect x="1004.8" y="757" width="4.6" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1007.76" y="767.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (99,995,056 samples, 0.03%)</title><rect x="540.1" y="709" width="0.3" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="543.09" y="719.5" ></text>
</g>
<g >
<title>__libc_start_main_impl (22,473,549,962 samples, 5.81%)</title><rect x="1113.8" y="933" width="68.6" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1116.76" y="943.5" >__libc_..</text>
</g>
<g >
<title>tcp_recvmsg_locked (60,182,095 samples, 0.02%)</title><rect x="204.0" y="533" width="0.1" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="206.96" y="543.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;cpp_redis::reply&gt; &gt;::allocate (300,997,279 samples, 0.08%)</title><rect x="925.3" y="709" width="0.9" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="928.29" y="719.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (371,874,489 samples, 0.10%)</title><rect x="208.4" y="677" width="1.1" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="211.36" y="687.5" ></text>
</g>
<g >
<title>__x64_sys_futex (37,186,228 samples, 0.01%)</title><rect x="1093.5" y="597" width="0.1" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1096.48" y="607.5" ></text>
</g>
<g >
<title>std::unique_lock&lt;std::mutex&gt;::lock (330,967,166 samples, 0.09%)</title><rect x="458.3" y="757" width="1.0" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="461.29" y="767.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::~unique_ptr (38,796,239 samples, 0.01%)</title><rect x="811.5" y="597" width="0.1" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="814.47" y="607.5" ></text>
</g>
<g >
<title>std::mutex::unlock (68,639,392 samples, 0.02%)</title><rect x="1103.9" y="725" width="0.2" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1106.88" y="735.5" ></text>
</g>
<g >
<title>operator new (537,419,975 samples, 0.14%)</title><rect x="474.8" y="709" width="1.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="477.77" y="719.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::construct&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (101,811,417 samples, 0.03%)</title><rect x="1101.6" y="645" width="0.4" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="1104.64" y="655.5" ></text>
</g>
<g >
<title>__GI___libc_free (189,764,787 samples, 0.05%)</title><rect x="219.0" y="725" width="0.6" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="221.99" y="735.5" ></text>
</g>
<g >
<title>std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;* std::__relocate_a&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;*, std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;*, std::allocator&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; (186,064,483 samples, 0.05%)</title><rect x="1101.5" y="693" width="0.5" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="1104.45" y="703.5" ></text>
</g>
<g >
<title>__x64_sys_mprotect (35,718,104 samples, 0.01%)</title><rect x="1097.0" y="357" width="0.1" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="1100.03" y="367.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;cpp_redis::reply*, cpp_redis::reply&gt; (51,150,634 samples, 0.01%)</title><rect x="1074.5" y="757" width="0.2" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="1077.52" y="767.5" ></text>
</g>
<g >
<title>EVP_DigestInit_ex (42,862,983 samples, 0.01%)</title><rect x="112.6" y="933" width="0.2" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="115.64" y="943.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (126,844,432 samples, 0.03%)</title><rect x="1153.7" y="773" width="0.3" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1156.66" y="783.5" ></text>
</g>
<g >
<title>std::_Rb_tree_const_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt;::operator++ (70,368,888 samples, 0.02%)</title><rect x="615.7" y="725" width="0.2" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="618.73" y="735.5" ></text>
</g>
<g >
<title>EVP_EncryptFinal_ex (54,496,129 samples, 0.01%)</title><rect x="1151.1" y="821" width="0.2" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="1154.11" y="831.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (70,360,577 samples, 0.02%)</title><rect x="81.9" y="933" width="0.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="84.90" y="943.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__future_base::_Result_base::_Deleter&gt;::release (61,551,286 samples, 0.02%)</title><rect x="471.6" y="549" width="0.2" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="474.58" y="559.5" ></text>
</g>
<g >
<title>_int_free (99,490,149 samples, 0.03%)</title><rect x="920.7" y="549" width="0.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="923.74" y="559.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (380,526,911 samples, 0.10%)</title><rect x="1106.8" y="565" width="1.2" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="1109.84" y="575.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (36,387,567 samples, 0.01%)</title><rect x="1100.1" y="773" width="0.1" height="15.0" fill="rgb(206,9,2)" rx="2" ry="2" />
<text  x="1103.13" y="783.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;::_M_valptr (75,227,835 samples, 0.02%)</title><rect x="564.7" y="677" width="0.2" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="567.65" y="687.5" ></text>
</g>
<g >
<title>std::_Rb_tree_const_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt;::_Rb_tree_const_iterator (53,036,938 samples, 0.01%)</title><rect x="710.1" y="741" width="0.2" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="713.14" y="751.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (395,688,564 samples, 0.10%)</title><rect x="211.5" y="757" width="1.2" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="214.50" y="767.5" ></text>
</g>
<g >
<title>___pthread_mutex_unlock (155,511,760 samples, 0.04%)</title><rect x="538.7" y="725" width="0.5" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="541.72" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (183,990,234 samples, 0.05%)</title><rect x="536.2" y="741" width="0.6" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="539.23" y="751.5" ></text>
</g>
<g >
<title>_int_free (788,135,419 samples, 0.20%)</title><rect x="835.4" y="773" width="2.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="838.36" y="783.5" ></text>
</g>
<g >
<title>apache::thrift::server::TNonblockingServer::TConnection::setRead (59,471,304 samples, 0.02%)</title><rect x="202.7" y="693" width="0.2" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="205.74" y="703.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (64,127,107 samples, 0.02%)</title><rect x="1013.5" y="693" width="0.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1016.49" y="703.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_move_assign (687,316,641 samples, 0.18%)</title><rect x="1017.5" y="773" width="2.1" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1020.53" y="783.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_S_relocate (150,296,978 samples, 0.04%)</title><rect x="1116.0" y="837" width="0.5" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1119.02" y="847.5" ></text>
</g>
<g >
<title>___pthread_mutex_unlock (47,876,971 samples, 0.01%)</title><rect x="578.6" y="725" width="0.1" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="581.57" y="735.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::deallocate (99,490,149 samples, 0.03%)</title><rect x="920.7" y="581" width="0.3" height="15.0" fill="rgb(214,41,10)" rx="2" ry="2" />
<text  x="923.74" y="591.5" ></text>
</g>
<g >
<title>heap_for_ptr (172,035,209 samples, 0.04%)</title><rect x="783.0" y="661" width="0.5" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="786.01" y="671.5" ></text>
</g>
<g >
<title>std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::~pair (107,811,403 samples, 0.03%)</title><rect x="457.8" y="709" width="0.4" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="460.84" y="719.5" ></text>
</g>
<g >
<title>void std::__relocate_object_a&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (61,161,592 samples, 0.02%)</title><rect x="1058.9" y="709" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1061.93" y="719.5" ></text>
</g>
<g >
<title>void std::__future_base::_State_baseV2::_S_check&lt;std::__future_base::_State_baseV2&gt; (49,134,727 samples, 0.01%)</title><rect x="1105.8" y="709" width="0.1" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1108.77" y="719.5" ></text>
</g>
<g >
<title>aesni_cbc_cipher (50,834,822 samples, 0.01%)</title><rect x="852.5" y="725" width="0.1" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="855.46" y="735.5" ></text>
</g>
<g >
<title>cpp_redis::reply* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;cpp_redis::reply const*, std::vector&lt;cpp_redis::reply, std::allocator&lt;cpp_redis::reply&gt; &gt; &gt;, cpp_redis::reply*, cpp_redis::reply&gt; (90,143,759 samples, 0.02%)</title><rect x="915.2" y="741" width="0.2" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="918.16" y="751.5" ></text>
</g>
<g >
<title>std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::~future (33,035,557 samples, 0.01%)</title><rect x="1100.8" y="773" width="0.1" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1103.76" y="783.5" ></text>
</g>
<g >
<title>_int_free (293,430,004 samples, 0.08%)</title><rect x="952.0" y="725" width="0.9" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="954.99" y="735.5" ></text>
</g>
<g >
<title>sock_recvmsg (119,226,672 samples, 0.03%)</title><rect x="1083.1" y="725" width="0.3" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="1086.08" y="735.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (275,294,869 samples, 0.07%)</title><rect x="441.0" y="741" width="0.9" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="444.01" y="751.5" ></text>
</g>
<g >
<title>apache::thrift::server::TNonblockingServer::TConnection::workSocket (288,094,696 samples, 0.07%)</title><rect x="203.0" y="693" width="0.8" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="205.97" y="703.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; std::allocate_shared&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;&gt; (791,511,371 samples, 0.20%)</title><rect x="1105.9" y="741" width="2.4" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="1108.93" y="751.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (387,679,206 samples, 0.10%)</title><rect x="909.1" y="677" width="1.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="912.07" y="687.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::deallocate (63,039,362 samples, 0.02%)</title><rect x="1164.1" y="661" width="0.2" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="1167.12" y="671.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::construct&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;&gt; (2,142,752,043 samples, 0.55%)</title><rect x="895.6" y="725" width="6.5" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="898.59" y="735.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Vector_impl::_Vector_impl (37,208,285 samples, 0.01%)</title><rect x="515.1" y="741" width="0.2" height="15.0" fill="rgb(236,147,35)" rx="2" ry="2" />
<text  x="518.14" y="751.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, true&gt; (154,894,369 samples, 0.04%)</title><rect x="433.5" y="757" width="0.5" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="436.50" y="767.5" ></text>
</g>
<g >
<title>_int_malloc (425,080,058 samples, 0.11%)</title><rect x="1098.8" y="677" width="1.3" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1101.76" y="687.5" ></text>
</g>
<g >
<title>malloc_consolidate (147,773,628 samples, 0.04%)</title><rect x="952.4" y="709" width="0.5" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="955.44" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Insert_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::insert (1,976,762,380 samples, 0.51%)</title><rect x="1009.4" y="773" width="6.0" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="1012.40" y="783.5" ></text>
</g>
<g >
<title>event_add_nolock_ (50,908,151 samples, 0.01%)</title><rect x="202.7" y="645" width="0.2" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="205.74" y="655.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_allocate (1,529,530,198 samples, 0.40%)</title><rect x="895.6" y="661" width="4.7" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="898.59" y="671.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::swap (219,540,090 samples, 0.06%)</title><rect x="471.8" y="597" width="0.6" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="474.78" y="607.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (90,501,530 samples, 0.02%)</title><rect x="1119.7" y="773" width="0.2" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1122.66" y="783.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (637,181,049 samples, 0.16%)</title><rect x="707.4" y="709" width="1.9" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="710.40" y="719.5" ></text>
</g>
<g >
<title>_int_malloc (116,523,040 samples, 0.03%)</title><rect x="1096.8" y="453" width="0.3" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1099.78" y="463.5" ></text>
</g>
<g >
<title>handle_pte_fault (68,814,349 samples, 0.02%)</title><rect x="1155.8" y="693" width="0.2" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1158.80" y="703.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_find_node (72,681,603 samples, 0.02%)</title><rect x="1174.5" y="837" width="0.3" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="1177.54" y="847.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::deallocate (2,314,796,200 samples, 0.60%)</title><rect x="1030.3" y="725" width="7.1" height="15.0" fill="rgb(214,41,10)" rx="2" ry="2" />
<text  x="1033.34" y="735.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;char*&gt;::iterator_category std::__iterator_category&lt;char*&gt; (36,423,302 samples, 0.01%)</title><rect x="1138.8" y="757" width="0.1" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1141.83" y="767.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (471,860,234 samples, 0.12%)</title><rect x="927.9" y="725" width="1.4" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="930.90" y="735.5" ></text>
</g>
<g >
<title>void std::__relocate_object_a&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (787,252,779 samples, 0.20%)</title><rect x="1026.6" y="693" width="2.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1029.63" y="703.5" ></text>
</g>
<g >
<title>void std::thread::_Invoker&lt;std::tuple&lt;main::{lambda (773,925,518 samples, 0.20%)</title><rect x="201.9" y="869" width="2.4" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="204.90" y="879.5" ></text>
</g>
<g >
<title>futex_wait_queue (80,014,995 samples, 0.02%)</title><rect x="458.9" y="565" width="0.3" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="461.93" y="575.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::erase (1,615,046,618 samples, 0.42%)</title><rect x="882.9" y="757" width="5.0" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="885.93" y="767.5" ></text>
</g>
<g >
<title>__gthread_mutex_lock (71,983,784 samples, 0.02%)</title><rect x="527.4" y="741" width="0.2" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="530.38" y="751.5" ></text>
</g>
<g >
<title>__do_softirq (171,017,566 samples, 0.04%)</title><rect x="1060.1" y="245" width="0.5" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1063.07" y="255.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;unsigned char*&gt; (648,546,810 samples, 0.17%)</title><rect x="843.6" y="709" width="2.0" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="846.58" y="719.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__future_base::_Result_base::_Deleter&gt;::release (47,600,211 samples, 0.01%)</title><rect x="810.7" y="517" width="0.2" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="813.73" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::operator= (762,697,835 samples, 0.20%)</title><rect x="1017.4" y="789" width="2.3" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="1020.39" y="799.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (45,132,230 samples, 0.01%)</title><rect x="1146.8" y="805" width="0.2" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1149.85" y="815.5" ></text>
</g>
<g >
<title>arena_get2 (33,539,657 samples, 0.01%)</title><rect x="1087.3" y="789" width="0.1" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1090.34" y="799.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (315,286,501 samples, 0.08%)</title><rect x="509.9" y="709" width="0.9" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="512.87" y="719.5" ></text>
</g>
<g >
<title>perf_output_copy (35,718,104 samples, 0.01%)</title><rect x="1097.0" y="229" width="0.1" height="15.0" fill="rgb(252,217,52)" rx="2" ry="2" />
<text  x="1100.03" y="239.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (63,441,817 samples, 0.02%)</title><rect x="1109.0" y="725" width="0.1" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1111.95" y="735.5" ></text>
</g>
<g >
<title>cpp_redis::client::exec_cmd (1,351,803,067 samples, 0.35%)</title><rect x="1157.5" y="837" width="4.1" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="1160.49" y="847.5" ></text>
</g>
<g >
<title>tcache_get (34,603,262 samples, 0.01%)</title><rect x="863.6" y="693" width="0.1" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="866.57" y="703.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (1,083,993,649 samples, 0.28%)</title><rect x="911.5" y="693" width="3.3" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="914.50" y="703.5" ></text>
</g>
<g >
<title>ip_finish_output (34,007,746 samples, 0.01%)</title><rect x="204.0" y="373" width="0.1" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="207.04" y="383.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_ptr (33,552,127 samples, 0.01%)</title><rect x="992.0" y="709" width="0.1" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="994.96" y="719.5" ></text>
</g>
<g >
<title>_int_free (43,934,544 samples, 0.01%)</title><rect x="461.0" y="741" width="0.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="464.00" y="751.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_S_do_relocate (979,835,015 samples, 0.25%)</title><rect x="1026.3" y="741" width="2.9" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1029.25" y="751.5" ></text>
</g>
<g >
<title>arena_for_chunk (43,911,472 samples, 0.01%)</title><rect x="1040.7" y="677" width="0.1" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1043.69" y="687.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (998,229,241 samples, 0.26%)</title><rect x="878.4" y="725" width="3.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="881.41" y="735.5" ></text>
</g>
<g >
<title>__schedule (64,290,560 samples, 0.02%)</title><rect x="1093.1" y="501" width="0.2" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="1096.10" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin (46,064,918 samples, 0.01%)</title><rect x="533.7" y="725" width="0.2" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="536.72" y="735.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node_base*&gt;::allocate (43,579,596 samples, 0.01%)</title><rect x="1012.7" y="645" width="0.2" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="1015.72" y="655.5" ></text>
</g>
<g >
<title>__x64_sys_futex (47,227,817 samples, 0.01%)</title><rect x="1103.7" y="581" width="0.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1106.74" y="591.5" ></text>
</g>
<g >
<title>__GI___libc_free (117,004,886 samples, 0.03%)</title><rect x="910.8" y="661" width="0.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="913.76" y="671.5" ></text>
</g>
<g >
<title>std::_Function_base::_Function_base (35,110,545 samples, 0.01%)</title><rect x="473.0" y="757" width="0.1" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="475.96" y="767.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;, std::_Identity&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt;, bool  (42,957,707,176 samples, 11.11%)</title><rect x="580.8" y="757" width="131.1" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="583.77" y="767.5" >std::_Rb_tree&lt;st..</text>
</g>
<g >
<title>grow_heap (48,084,647 samples, 0.01%)</title><rect x="1104.4" y="661" width="0.2" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="1107.41" y="671.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (67,355,974 samples, 0.02%)</title><rect x="930.0" y="645" width="0.3" height="15.0" fill="rgb(214,41,9)" rx="2" ry="2" />
<text  x="933.05" y="655.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::find (33,669,400 samples, 0.01%)</title><rect x="43.7" y="933" width="0.1" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="46.72" y="943.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::~lock_guard (41,266,474 samples, 0.01%)</title><rect x="428.1" y="773" width="0.1" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="431.12" y="783.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (405,383,353 samples, 0.10%)</title><rect x="513.2" y="693" width="1.2" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="516.16" y="703.5" ></text>
</g>
<g >
<title>apache::thrift::protocol::TProtocol::readFieldBegin (35,364,959 samples, 0.01%)</title><rect x="1097.7" y="789" width="0.1" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="1100.70" y="799.5" ></text>
</g>
<g >
<title>_int_free (68,025,513 samples, 0.02%)</title><rect x="405.4" y="693" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="408.40" y="703.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (67,835,409 samples, 0.02%)</title><rect x="948.2" y="613" width="0.2" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="951.23" y="623.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (81,638,243 samples, 0.02%)</title><rect x="1141.0" y="789" width="0.2" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1143.98" y="799.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;::_M_ptr (50,095,288 samples, 0.01%)</title><rect x="564.7" y="661" width="0.2" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="567.73" y="671.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;std::__future_base::_State_baseV2&gt;::shared_ptr (52,635,729 samples, 0.01%)</title><rect x="1095.3" y="709" width="0.1" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="1098.28" y="719.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_find_before_node (72,681,603 samples, 0.02%)</title><rect x="1174.5" y="821" width="0.3" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="1177.54" y="831.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (1,204,878,717 samples, 0.31%)</title><rect x="911.1" y="725" width="3.7" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="914.15" y="735.5" ></text>
</g>
<g >
<title>std::unique_lock&lt;std::mutex&gt;::unique_lock (88,414,719 samples, 0.02%)</title><rect x="1103.6" y="741" width="0.3" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="1106.61" y="751.5" ></text>
</g>
<g >
<title>std::__atomic_futex_unsigned_base::_M_futex_wait_until (44,934,140 samples, 0.01%)</title><rect x="918.9" y="693" width="0.1" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="921.90" y="703.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;queue&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;,  (10,021,799,456 samples, 2.59%)</title><rect x="374.2" y="773" width="30.6" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="377.21" y="783.5" >st..</text>
</g>
<g >
<title>__GI___libc_malloc (585,119,177 samples, 0.15%)</title><rect x="442.4" y="661" width="1.7" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="445.36" y="671.5" ></text>
</g>
<g >
<title>void std::deque&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_push_back_aux&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; (65,055,355 samples, 0.02%)</title><rect x="1103.4" y="693" width="0.2" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="1106.42" y="703.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;char*&gt;::iterator_category std::__iterator_category&lt;char*&gt; (268,252,536 samples, 0.07%)</title><rect x="692.5" y="677" width="0.8" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="695.52" y="687.5" ></text>
</g>
<g >
<title>do_select (209,353,027 samples, 0.05%)</title><rect x="1062.3" y="789" width="0.6" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1065.31" y="799.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare (286,690,588 samples, 0.07%)</title><rect x="513.5" y="661" width="0.9" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="516.51" y="671.5" ></text>
</g>
<g >
<title>apache::thrift::transport::TTransport::write (407,960,148 samples, 0.11%)</title><rect x="1059.8" y="693" width="1.2" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="1062.78" y="703.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::~_Vector_base (239,335,656 samples, 0.06%)</title><rect x="957.6" y="629" width="0.8" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="960.63" y="639.5" ></text>
</g>
<g >
<title>inet6_recvmsg (60,182,095 samples, 0.02%)</title><rect x="204.0" y="565" width="0.1" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="206.96" y="575.5" ></text>
</g>
<g >
<title>aesni_set_encrypt_key (431,978,559 samples, 0.11%)</title><rect x="850.1" y="709" width="1.3" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="853.07" y="719.5" ></text>
</g>
<g >
<title>arena_for_chunk (108,734,367 samples, 0.03%)</title><rect x="837.8" y="773" width="0.3" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="840.76" y="783.5" ></text>
</g>
<g >
<title>___pthread_mutex_unlock (33,142,599 samples, 0.01%)</title><rect x="57.3" y="933" width="0.1" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="60.33" y="943.5" ></text>
</g>
<g >
<title>handle_pte_fault (86,007,505 samples, 0.02%)</title><rect x="1119.7" y="693" width="0.2" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1122.66" y="703.5" ></text>
</g>
<g >
<title>__GI___libc_write (36,850,247 samples, 0.01%)</title><rect x="1063.5" y="869" width="0.2" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1066.54" y="879.5" ></text>
</g>
<g >
<title>ENGINE_finish (123,510,613 samples, 0.03%)</title><rect x="45.9" y="933" width="0.4" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="48.93" y="943.5" ></text>
</g>
<g >
<title>malloc_consolidate (66,369,557 samples, 0.02%)</title><rect x="1074.2" y="741" width="0.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1077.20" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;int const, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::_M_v (36,129,544 samples, 0.01%)</title><rect x="920.3" y="693" width="0.1" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="923.32" y="703.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::destroy&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (48,751,205 samples, 0.01%)</title><rect x="112.0" y="933" width="0.1" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="114.96" y="943.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_capacity (160,030,780 samples, 0.04%)</title><rect x="1187.4" y="949" width="0.5" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="1190.41" y="959.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, true&gt; &gt; &gt;::deallocate (117,304,730 samples, 0.03%)</title><rect x="505.9" y="677" width="0.3" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="508.89" y="687.5" ></text>
</g>
<g >
<title>__schedule (86,342,853 samples, 0.02%)</title><rect x="202.1" y="581" width="0.2" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="205.06" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (303,186,846 samples, 0.08%)</title><rect x="532.6" y="725" width="0.9" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="535.58" y="735.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_do_set (1,072,451,955 samples, 0.28%)</title><rect x="469.4" y="629" width="3.3" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="472.42" y="639.5" ></text>
</g>
<g >
<title>encryption_engine::gen_random[abi:cxx11] (280,137,586 samples, 0.07%)</title><rect x="1151.5" y="853" width="0.8" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1154.47" y="863.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cpp_redis::reply, std::allocator&lt;cpp_redis::reply&gt; &gt;::_M_deallocate (101,745,497 samples, 0.03%)</title><rect x="926.2" y="741" width="0.3" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="929.20" y="751.5" ></text>
</g>
<g >
<title>cpp_redis::client::unprotected_send (2,290,782,174 samples, 0.59%)</title><rect x="938.3" y="709" width="7.0" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="941.27" y="719.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt;::allocate (118,261,143 samples, 0.03%)</title><rect x="1014.2" y="709" width="0.4" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="1017.22" y="719.5" ></text>
</g>
<g >
<title>arena_for_chunk (48,771,011 samples, 0.01%)</title><rect x="450.4" y="773" width="0.2" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="453.44" y="783.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;*&gt; (56,730,796 samples, 0.01%)</title><rect x="1057.8" y="741" width="0.2" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="1060.79" y="751.5" ></text>
</g>
<g >
<title>syscall (132,475,330 samples, 0.03%)</title><rect x="465.0" y="757" width="0.4" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="468.05" y="767.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_set_result (2,032,403,775 samples, 0.53%)</title><rect x="805.5" y="757" width="6.2" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="808.54" y="767.5" ></text>
</g>
<g >
<title>operator new (467,424,734 samples, 0.12%)</title><rect x="923.6" y="661" width="1.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="926.58" y="671.5" ></text>
</g>
<g >
<title>cpp_redis::builders::bulk_string_builder::build_reply (102,963,789 samples, 0.03%)</title><rect x="1066.4" y="741" width="0.3" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1069.43" y="751.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (91,634,834 samples, 0.02%)</title><rect x="1155.8" y="773" width="0.3" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1158.77" y="783.5" ></text>
</g>
<g >
<title>tcache_init (33,539,657 samples, 0.01%)</title><rect x="1087.3" y="805" width="0.1" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="1090.34" y="815.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__future_base::_Result_base::_Deleter&gt;::~unique_ptr (58,616,707 samples, 0.02%)</title><rect x="470.8" y="565" width="0.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="473.78" y="575.5" ></text>
</g>
<g >
<title>std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::future (81,097,450 samples, 0.02%)</title><rect x="1101.7" y="613" width="0.3" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="1104.70" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_S_equals (41,125,989 samples, 0.01%)</title><rect x="820.6" y="693" width="0.2" height="15.0" fill="rgb(208,16,4)" rx="2" ry="2" />
<text  x="823.65" y="703.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::_S_max_size (51,309,721 samples, 0.01%)</title><rect x="834.1" y="709" width="0.2" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="837.12" y="719.5" ></text>
</g>
<g >
<title>std::pointer_traits&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt;*&gt;::pointer_to (76,747,653 samples, 0.02%)</title><rect x="1006.6" y="693" width="0.2" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1009.56" y="703.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;, std::_Identity&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt;, bool  (114,699,093 samples, 0.03%)</title><rect x="790.4" y="693" width="0.3" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="793.38" y="703.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::~_Hashtable (76,443,784 samples, 0.02%)</title><rect x="1175.2" y="853" width="0.3" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1178.22" y="863.5" ></text>
</g>
<g >
<title>tacopie::io_service::set_rd_callback (122,781,294 samples, 0.03%)</title><rect x="1082.7" y="837" width="0.3" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="1085.67" y="847.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;, std::_Identity&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt;, bool  (8,059,896,063 samples, 2.08%)</title><rect x="591.1" y="725" width="24.6" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="594.12" y="735.5" >s..</text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (41,896,555 samples, 0.01%)</title><rect x="1011.1" y="677" width="0.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1014.10" y="687.5" ></text>
</g>
<g >
<title>lll_mutex_lock_optimized (36,334,705 samples, 0.01%)</title><rect x="1117.0" y="789" width="0.1" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="1120.04" y="799.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (80,973,261 samples, 0.02%)</title><rect x="934.1" y="661" width="0.2" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="937.06" y="671.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::~_Vector_base (121,159,207 samples, 0.03%)</title><rect x="910.4" y="725" width="0.3" height="15.0" fill="rgb(252,217,51)" rx="2" ry="2" />
<text  x="913.35" y="735.5" ></text>
</g>
<g >
<title>apache::thrift::transport::TSocket::write (407,960,148 samples, 0.11%)</title><rect x="1059.8" y="661" width="1.2" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="1062.78" y="671.5" ></text>
</g>
<g >
<title>std::__atomic_base&lt;int&gt;::operator int (2,698,306,452 samples, 0.70%)</title><rect x="149.5" y="933" width="8.3" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="152.54" y="943.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::lock_guard (45,431,987 samples, 0.01%)</title><rect x="1117.0" y="853" width="0.1" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1120.01" y="863.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;char*&gt;::difference_type std::__distance&lt;char*&gt; (206,562,415 samples, 0.05%)</title><rect x="771.4" y="677" width="0.6" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="774.36" y="687.5" ></text>
</g>
<g >
<title>copyin (98,909,028 samples, 0.03%)</title><rect x="1084.9" y="645" width="0.3" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="1087.90" y="655.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;int, std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::~unordered_map (516,223,018 samples, 0.13%)</title><rect x="957.6" y="773" width="1.6" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="960.61" y="783.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (36,387,567 samples, 0.01%)</title><rect x="1100.1" y="757" width="0.1" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="1103.13" y="767.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (58,040,248 samples, 0.02%)</title><rect x="441.6" y="709" width="0.2" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="444.58" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (38,315,129 samples, 0.01%)</title><rect x="86.3" y="933" width="0.2" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="89.34" y="943.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::back (184,984,175 samples, 0.05%)</title><rect x="502.4" y="773" width="0.6" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="505.40" y="783.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (108,257,207 samples, 0.03%)</title><rect x="531.1" y="693" width="0.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="534.08" y="703.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::operator!=&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; (44,606,537 samples, 0.01%)</title><rect x="911.4" y="693" width="0.1" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="914.35" y="703.5" ></text>
</g>
<g >
<title>_int_free (35,031,141 samples, 0.01%)</title><rect x="885.1" y="629" width="0.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="888.08" y="639.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;operation*, operation&gt; (156,383,629 samples, 0.04%)</title><rect x="487.3" y="757" width="0.5" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="490.33" y="767.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::construct&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; (37,781,263 samples, 0.01%)</title><rect x="1092.7" y="661" width="0.1" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="1095.73" y="671.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (853,611,590 samples, 0.22%)</title><rect x="454.0" y="741" width="2.6" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="457.00" y="751.5" ></text>
</g>
<g >
<title>cpp_redis::network::redis_connection::commit (283,175,084 samples, 0.07%)</title><rect x="903.2" y="741" width="0.9" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="906.20" y="751.5" ></text>
</g>
<g >
<title>__netif_receive_skb (68,399,409 samples, 0.02%)</title><rect x="1085.4" y="373" width="0.2" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="1088.36" y="383.5" ></text>
</g>
<g >
<title>ip_output (34,007,746 samples, 0.01%)</title><rect x="204.0" y="389" width="0.1" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="207.04" y="399.5" ></text>
</g>
<g >
<title>_int_free (354,765,156 samples, 0.09%)</title><rect x="935.9" y="741" width="1.0" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="938.87" y="751.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::~_Vector_base (62,313,302 samples, 0.02%)</title><rect x="214.3" y="645" width="0.1" height="15.0" fill="rgb(252,217,51)" rx="2" ry="2" />
<text  x="217.26" y="655.5" ></text>
</g>
<g >
<title>operator new (554,038,550 samples, 0.14%)</title><rect x="1134.9" y="773" width="1.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1137.94" y="783.5" ></text>
</g>
<g >
<title>do_poll.constprop.0 (33,490,733 samples, 0.01%)</title><rect x="1111.3" y="741" width="0.1" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="1114.29" y="751.5" ></text>
</g>
<g >
<title>void std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_range_initialize&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt; (1,042,084,729 samples, 0.27%)</title><rect x="515.5" y="757" width="3.2" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="518.50" y="767.5" ></text>
</g>
<g >
<title>__GI___libc_write (110,776,464 samples, 0.03%)</title><rect x="1082.7" y="821" width="0.3" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1085.68" y="831.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (163,497,154 samples, 0.04%)</title><rect x="1188.7" y="949" width="0.5" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="1191.69" y="959.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (42,625,271 samples, 0.01%)</title><rect x="521.2" y="757" width="0.1" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="524.16" y="767.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_node_allocator (33,157,838 samples, 0.01%)</title><rect x="1005.6" y="693" width="0.1" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="1008.63" y="703.5" ></text>
</g>
<g >
<title>__random (94,018,479 samples, 0.02%)</title><rect x="894.9" y="757" width="0.3" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="897.87" y="767.5" ></text>
</g>
<g >
<title>rand (94,018,479 samples, 0.02%)</title><rect x="894.9" y="773" width="0.3" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="897.87" y="783.5" ></text>
</g>
<g >
<title>operator new (129,844,293 samples, 0.03%)</title><rect x="968.3" y="757" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="971.30" y="767.5" ></text>
</g>
<g >
<title>std::__atomic_base&lt;int&gt;::operator++ (60,842,970 samples, 0.02%)</title><rect x="1102.5" y="741" width="0.2" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1105.52" y="751.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Vector_impl_data::_Vector_impl_data (49,249,053 samples, 0.01%)</title><rect x="1018.6" y="741" width="0.2" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1021.60" y="751.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;::count (605,749,813 samples, 0.16%)</title><rect x="530.2" y="773" width="1.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="533.16" y="783.5" ></text>
</g>
<g >
<title>bool std::operator&lt; &lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (78,875,742 samples, 0.02%)</title><rect x="594.7" y="693" width="0.3" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="597.72" y="703.5" ></text>
</g>
<g >
<title>bool std::operator!=&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (244,184,793 samples, 0.06%)</title><rect x="803.8" y="773" width="0.8" height="15.0" fill="rgb(221,78,18)" rx="2" ry="2" />
<text  x="806.82" y="783.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (77,347,384 samples, 0.02%)</title><rect x="435.6" y="709" width="0.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="438.63" y="719.5" ></text>
</g>
<g >
<title>void std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_realloc_insert&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (328,616,435 samples, 0.09%)</title><rect x="933.5" y="757" width="1.0" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="936.48" y="767.5" ></text>
</g>
<g >
<title>__GI___libc_free (78,004,803 samples, 0.02%)</title><rect x="818.1" y="437" width="0.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="821.08" y="447.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (582,093,686 samples, 0.15%)</title><rect x="1084.5" y="789" width="1.8" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1087.51" y="799.5" ></text>
</g>
<g >
<title>cpp_redis::client::send (897,381,175 samples, 0.23%)</title><rect x="1157.9" y="805" width="2.8" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1160.94" y="815.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (34,139,997 samples, 0.01%)</title><rect x="1027.3" y="677" width="0.1" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="1030.31" y="687.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (49,532,520 samples, 0.01%)</title><rect x="207.8" y="629" width="0.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="210.81" y="639.5" ></text>
</g>
<g >
<title>__GI___libc_write (48,319,336 samples, 0.01%)</title><rect x="1080.0" y="757" width="0.2" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1083.03" y="767.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (847,005,030 samples, 0.22%)</title><rect x="942.7" y="661" width="2.6" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="945.68" y="671.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (530,435,094 samples, 0.14%)</title><rect x="888.9" y="725" width="1.6" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="891.86" y="735.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_deallocate (63,039,362 samples, 0.02%)</title><rect x="1164.1" y="693" width="0.2" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="1167.12" y="703.5" ></text>
</g>
<g >
<title>__fget_light (36,644,172 samples, 0.01%)</title><rect x="1062.4" y="757" width="0.1" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1065.41" y="767.5" ></text>
</g>
<g >
<title>void std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::emplace_back&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (481,575,258 samples, 0.12%)</title><rect x="217.5" y="789" width="1.5" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="220.52" y="799.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::construct&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;&gt; (44,732,851 samples, 0.01%)</title><rect x="834.6" y="741" width="0.2" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="837.62" y="751.5" ></text>
</g>
<g >
<title>_int_free (299,983,309 samples, 0.08%)</title><rect x="23.4" y="933" width="0.9" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="26.43" y="943.5" ></text>
</g>
<g >
<title>arena_for_chunk (49,162,536 samples, 0.01%)</title><rect x="1094.3" y="709" width="0.1" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1097.28" y="719.5" ></text>
</g>
<g >
<title>_int_malloc (40,637,908 samples, 0.01%)</title><rect x="833.8" y="661" width="0.1" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="836.79" y="671.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cpp_redis::reply, std::allocator&lt;cpp_redis::reply&gt; &gt;::_Vector_base (92,110,116 samples, 0.02%)</title><rect x="915.5" y="741" width="0.2" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="918.46" y="751.5" ></text>
</g>
<g >
<title>std::deque&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;::front (65,548,553 samples, 0.02%)</title><rect x="457.0" y="757" width="0.2" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="459.95" y="767.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (94,765,314 samples, 0.02%)</title><rect x="1165.4" y="853" width="0.3" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1168.37" y="863.5" ></text>
</g>
<g >
<title>_int_free (91,825,071 samples, 0.02%)</title><rect x="487.5" y="661" width="0.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="490.52" y="671.5" ></text>
</g>
<g >
<title>void std::swap&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (199,849,067 samples, 0.05%)</title><rect x="139.9" y="885" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="142.88" y="895.5" ></text>
</g>
<g >
<title>handle_mm_fault (41,294,646 samples, 0.01%)</title><rect x="1157.8" y="757" width="0.1" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1160.81" y="767.5" ></text>
</g>
<g >
<title>_int_malloc (136,689,070 samples, 0.04%)</title><rect x="1142.6" y="693" width="0.4" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1145.60" y="703.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;char*&gt;::difference_type std::__distance&lt;char*&gt; (257,880,432 samples, 0.07%)</title><rect x="767.1" y="693" width="0.7" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="770.05" y="703.5" ></text>
</g>
<g >
<title>Cache::insertIntoCache (4,457,852,386 samples, 1.15%)</title><rect x="523.6" y="789" width="13.6" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="526.56" y="799.5" ></text>
</g>
<g >
<title>schedule_hrtimeout_range_clock (105,067,086 samples, 0.03%)</title><rect x="202.0" y="613" width="0.3" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="205.00" y="623.5" ></text>
</g>
<g >
<title>std::tuple&lt;&gt;&amp;&amp; std::forward&lt;std::tuple&lt;&gt; &gt; (56,754,773 samples, 0.01%)</title><rect x="106.4" y="933" width="0.1" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="109.37" y="943.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (818,213,599 samples, 0.21%)</title><rect x="194.3" y="901" width="2.5" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="197.35" y="911.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator= (39,445,095 samples, 0.01%)</title><rect x="1114.4" y="869" width="0.2" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="1117.45" y="879.5" ></text>
</g>
<g >
<title>std::pointer_traits&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, true&gt;*&gt;::pointer_to (46,475,379 samples, 0.01%)</title><rect x="506.2" y="677" width="0.2" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="509.24" y="687.5" ></text>
</g>
<g >
<title>aesni_set_decrypt_key (465,939,013 samples, 0.12%)</title><rect x="840.2" y="709" width="1.4" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="843.18" y="719.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (221,421,551 samples, 0.06%)</title><rect x="85.2" y="933" width="0.7" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="88.19" y="943.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt; &gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (1,412,441,432 samples, 0.37%)</title><rect x="996.0" y="725" width="4.3" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="999.03" y="735.5" ></text>
</g>
<g >
<title>EVP_DecryptFinal_ex (191,141,551 samples, 0.05%)</title><rect x="841.6" y="741" width="0.6" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="844.64" y="751.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::lock_guard (42,165,243 samples, 0.01%)</title><rect x="96.4" y="933" width="0.2" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="99.44" y="943.5" ></text>
</g>
<g >
<title>std::mutex::lock (143,834,053 samples, 0.04%)</title><rect x="1092.9" y="709" width="0.4" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1095.87" y="719.5" ></text>
</g>
<g >
<title>checked_request2size (67,430,142 samples, 0.02%)</title><rect x="865.7" y="677" width="0.2" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="868.74" y="687.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (62,194,274 samples, 0.02%)</title><rect x="516.2" y="677" width="0.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="519.22" y="687.5" ></text>
</g>
<g >
<title>__GI___libc_free (182,107,631 samples, 0.05%)</title><rect x="1071.1" y="725" width="0.6" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1074.10" y="735.5" ></text>
</g>
<g >
<title>futex_wait (237,790,916 samples, 0.06%)</title><rect x="1087.8" y="677" width="0.7" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1090.77" y="687.5" ></text>
</g>
<g >
<title>void std::__relocate_object_a&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (438,286,557 samples, 0.11%)</title><rect x="947.1" y="645" width="1.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="950.10" y="655.5" ></text>
</g>
<g >
<title>lll_mutex_lock_optimized (37,735,391 samples, 0.01%)</title><rect x="438.9" y="709" width="0.1" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="441.85" y="719.5" ></text>
</g>
<g >
<title>unix_stream_recvmsg (56,254,800 samples, 0.01%)</title><rect x="202.6" y="597" width="0.1" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="205.56" y="607.5" ></text>
</g>
<g >
<title>__gthread_mutex_unlock (88,196,928 samples, 0.02%)</title><rect x="1093.3" y="709" width="0.3" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="1096.32" y="719.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (506,700,019 samples, 0.13%)</title><rect x="1001.4" y="709" width="1.5" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1004.40" y="719.5" ></text>
</g>
<g >
<title>__x64_sys_sendto (578,957,274 samples, 0.15%)</title><rect x="1084.5" y="757" width="1.8" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="1087.52" y="767.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::find (107,842,178 samples, 0.03%)</title><rect x="1114.1" y="869" width="0.3" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="1117.12" y="879.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_assign (84,233,687 samples, 0.02%)</title><rect x="28.7" y="933" width="0.3" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="31.70" y="943.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (34,673,565 samples, 0.01%)</title><rect x="203.6" y="581" width="0.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="206.62" y="591.5" ></text>
</g>
<g >
<title>tacopie::utils::thread_pool::operator&lt;&lt; (49,863,924 samples, 0.01%)</title><rect x="1063.2" y="853" width="0.1" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="1066.18" y="863.5" ></text>
</g>
<g >
<title>___pthread_mutex_lock (139,693,369 samples, 0.04%)</title><rect x="1092.9" y="677" width="0.4" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1095.88" y="687.5" ></text>
</g>
<g >
<title>tcp_recvmsg (60,182,095 samples, 0.02%)</title><rect x="204.0" y="549" width="0.1" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="206.96" y="559.5" ></text>
</g>
<g >
<title>_int_malloc (98,661,490 samples, 0.03%)</title><rect x="1164.8" y="725" width="0.3" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1167.77" y="735.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_S_do_relocate (150,296,978 samples, 0.04%)</title><rect x="1116.0" y="821" width="0.5" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1119.02" y="831.5" ></text>
</g>
<g >
<title>rand (54,058,185 samples, 0.01%)</title><rect x="1156.2" y="853" width="0.2" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="1159.20" y="863.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare (43,463,056 samples, 0.01%)</title><rect x="821.0" y="661" width="0.2" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="824.03" y="671.5" ></text>
</g>
<g >
<title>_int_malloc (48,291,854 samples, 0.01%)</title><rect x="488.8" y="741" width="0.1" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="491.80" y="751.5" ></text>
</g>
<g >
<title>malloc@plt (104,610,858 samples, 0.03%)</title><rect x="758.8" y="677" width="0.3" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="761.81" y="687.5" ></text>
</g>
<g >
<title>futex_wait_setup (57,491,446 samples, 0.01%)</title><rect x="1054.7" y="613" width="0.1" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="1057.65" y="623.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string&lt;unsigned char*, void&gt; (784,432,517 samples, 0.20%)</title><rect x="843.2" y="757" width="2.4" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="846.17" y="767.5" ></text>
</g>
<g >
<title>__GI___libc_free (40,190,940 samples, 0.01%)</title><rect x="906.3" y="629" width="0.1" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="909.27" y="639.5" ></text>
</g>
<g >
<title>tcp_v4_rcv (114,137,500 samples, 0.03%)</title><rect x="1060.1" y="85" width="0.3" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="1063.08" y="95.5" ></text>
</g>
<g >
<title>__GI___libc_free (38,476,740 samples, 0.01%)</title><rect x="524.2" y="693" width="0.1" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="527.20" y="703.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::destroy&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (595,848,843 samples, 0.15%)</title><rect x="462.7" y="693" width="1.8" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="465.69" y="703.5" ></text>
</g>
<g >
<title>std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;* std::__relocate_a_1&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;*, std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;*, std::allocator&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; (124,950,978 samples, 0.03%)</title><rect x="1090.9" y="677" width="0.4" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="1093.87" y="687.5" ></text>
</g>
<g >
<title>CRYPTO_malloc (43,755,158 samples, 0.01%)</title><rect x="873.3" y="709" width="0.1" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="876.28" y="719.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (81,469,267 samples, 0.02%)</title><rect x="60.6" y="933" width="0.2" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="63.59" y="943.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__relocate_a_1&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (82,560,140 samples, 0.02%)</title><rect x="1178.1" y="789" width="0.3" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="1181.10" y="799.5" ></text>
</g>
<g >
<title>ip_protocol_deliver_rcu (114,137,500 samples, 0.03%)</title><rect x="1060.1" y="101" width="0.3" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="1063.08" y="111.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (312,458,760 samples, 0.08%)</title><rect x="1096.2" y="549" width="1.0" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1099.22" y="559.5" ></text>
</g>
<g >
<title>__tcp_transmit_skb (34,007,746 samples, 0.01%)</title><rect x="204.0" y="453" width="0.1" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="207.04" y="463.5" ></text>
</g>
<g >
<title>void std::vector&lt;cpp_redis::reply, std::allocator&lt;cpp_redis::reply&gt; &gt;::_M_realloc_insert&lt;cpp_redis::reply const&amp;&gt; (34,458,110 samples, 0.01%)</title><rect x="112.3" y="933" width="0.1" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="115.27" y="943.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;::~pair (4,708,055,847 samples, 1.22%)</title><rect x="772.8" y="725" width="14.4" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="775.84" y="735.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::operator!=&lt;cpp_redis::reply const*, std::vector&lt;cpp_redis::reply, std::allocator&lt;cpp_redis::reply&gt; &gt; &gt; (39,923,827 samples, 0.01%)</title><rect x="921.8" y="709" width="0.1" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="924.78" y="719.5" ></text>
</g>
<g >
<title>__GI___libc_free (36,191,796 samples, 0.01%)</title><rect x="1153.3" y="805" width="0.1" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1156.31" y="815.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (332,016,882 samples, 0.09%)</title><rect x="38.2" y="933" width="1.0" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="41.15" y="943.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt;::_M_addr (128,673,834 samples, 0.03%)</title><rect x="599.4" y="677" width="0.4" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="602.42" y="687.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (34,673,565 samples, 0.01%)</title><rect x="203.6" y="629" width="0.1" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="206.62" y="639.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (54,661,633 samples, 0.01%)</title><rect x="1174.0" y="789" width="0.1" height="15.0" fill="rgb(252,217,52)" rx="2" ry="2" />
<text  x="1176.96" y="799.5" ></text>
</g>
<g >
<title>operation::~operation (127,565,000 samples, 0.03%)</title><rect x="487.4" y="693" width="0.4" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="490.42" y="703.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;operation*, operation&gt; (201,393,668 samples, 0.05%)</title><rect x="405.1" y="789" width="0.6" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="408.10" y="799.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (198,131,688 samples, 0.05%)</title><rect x="576.7" y="709" width="0.7" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="579.75" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::_M_v (100,977,253 samples, 0.03%)</title><rect x="511.5" y="693" width="0.3" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="514.48" y="703.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (107,530,500 samples, 0.03%)</title><rect x="887.5" y="709" width="0.3" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="890.50" y="719.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::destroy&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (112,577,390 samples, 0.03%)</title><rect x="960.8" y="645" width="0.4" height="15.0" fill="rgb(241,170,40)" rx="2" ry="2" />
<text  x="963.83" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt;::_M_addr (130,337,136 samples, 0.03%)</title><rect x="21.0" y="933" width="0.4" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="24.00" y="943.5" ></text>
</g>
<g >
<title>unlink_chunk (90,163,202 samples, 0.02%)</title><rect x="936.7" y="709" width="0.2" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="939.67" y="719.5" ></text>
</g>
<g >
<title>void std::__relocate_object_a&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (68,775,504 samples, 0.02%)</title><rect x="1178.1" y="773" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1181.14" y="783.5" ></text>
</g>
<g >
<title>EVP_MD_CTX_reset (41,855,684 samples, 0.01%)</title><rect x="873.4" y="709" width="0.1" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="876.42" y="719.5" ></text>
</g>
<g >
<title>__gthread_mutex_lock (186,234,282 samples, 0.05%)</title><rect x="975.1" y="757" width="0.6" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="978.10" y="767.5" ></text>
</g>
<g >
<title>event_base_loop (751,820,279 samples, 0.19%)</title><rect x="201.9" y="773" width="2.3" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="204.90" y="783.5" ></text>
</g>
<g >
<title>neigh_hh_output (34,007,746 samples, 0.01%)</title><rect x="204.0" y="325" width="0.1" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="207.04" y="335.5" ></text>
</g>
<g >
<title>CRYPTO_zalloc (382,712,345 samples, 0.10%)</title><rect x="871.6" y="709" width="1.1" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="874.57" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (36,661,485 samples, 0.01%)</title><rect x="161.5" y="933" width="0.1" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="164.50" y="943.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (94,653,042 samples, 0.02%)</title><rect x="1165.8" y="853" width="0.2" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="1168.76" y="863.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, true&gt; &gt;::allocate (46,455,588 samples, 0.01%)</title><rect x="534.4" y="693" width="0.2" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="537.42" y="703.5" ></text>
</g>
<g >
<title>futex_wait (68,679,989 samples, 0.02%)</title><rect x="1093.1" y="629" width="0.2" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1096.10" y="639.5" ></text>
</g>
<g >
<title>FrequencySmoother::insert (10,245,212,128 samples, 2.65%)</title><rect x="1118.7" y="869" width="31.3" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1121.73" y="879.5" >Fr..</text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, false&gt; &gt; &gt;::destroy&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; (511,911,207 samples, 0.13%)</title><rect x="957.6" y="693" width="1.6" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="960.63" y="703.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt;, std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt; &gt;::pair&lt;std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt;, std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt;, true&gt; (46,069,445 samples, 0.01%)</title><rect x="616.1" y="725" width="0.1" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="619.07" y="735.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (44,299,688 samples, 0.01%)</title><rect x="424.8" y="709" width="0.2" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="427.85" y="719.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;::count (289,763,488 samples, 0.07%)</title><rect x="434.0" y="773" width="0.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="436.98" y="783.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;operation&gt; (193,305,943 samples, 0.05%)</title><rect x="405.1" y="741" width="0.6" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="408.13" y="751.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::_M_allocate (113,113,699 samples, 0.03%)</title><rect x="833.6" y="741" width="0.3" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="836.58" y="751.5" ></text>
</g>
<g >
<title>proxy_server (386,595,102,391 samples, 100.00%)</title><rect x="10.0" y="965" width="1180.0" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="13.00" y="975.5" >proxy_server</text>
</g>
<g >
<title>sequence_id::read (37,438,146 samples, 0.01%)</title><rect x="1098.6" y="789" width="0.1" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1101.63" y="799.5" ></text>
</g>
<g >
<title>_int_free (33,703,344 samples, 0.01%)</title><rect x="1113.9" y="853" width="0.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1116.89" y="863.5" ></text>
</g>
<g >
<title>EVP_DigestFinal_ex (65,645,870 samples, 0.02%)</title><rect x="1154.1" y="805" width="0.2" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="1157.13" y="815.5" ></text>
</g>
<g >
<title>epoll_ctl (46,267,426 samples, 0.01%)</title><rect x="202.8" y="581" width="0.1" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="205.75" y="591.5" ></text>
</g>
<g >
<title>default_wake_function (41,924,497 samples, 0.01%)</title><rect x="1112.0" y="565" width="0.1" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1114.96" y="575.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cpp_redis::reply, std::allocator&lt;cpp_redis::reply&gt; &gt;::_Vector_base (90,846,704 samples, 0.02%)</title><rect x="1064.7" y="741" width="0.3" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1067.72" y="751.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (57,781,780 samples, 0.01%)</title><rect x="1162.4" y="789" width="0.1" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1165.36" y="799.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_erase (767,460,405 samples, 0.20%)</title><rect x="504.6" y="725" width="2.3" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="507.56" y="735.5" ></text>
</g>
<g >
<title>_int_free (103,328,434 samples, 0.03%)</title><rect x="815.3" y="629" width="0.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="818.27" y="639.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (101,798,299 samples, 0.03%)</title><rect x="463.2" y="629" width="0.3" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="466.16" y="639.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr (40,717,785 samples, 0.01%)</title><rect x="464.1" y="597" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="467.10" y="607.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;::find (2,518,191,201 samples, 0.65%)</title><rect x="493.6" y="773" width="7.6" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="496.56" y="783.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;cpp_redis::reply&gt;::deallocate (101,745,497 samples, 0.03%)</title><rect x="926.2" y="709" width="0.3" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="929.20" y="719.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (272,009,177 samples, 0.07%)</title><rect x="1169.9" y="805" width="0.9" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="1172.93" y="815.5" ></text>
</g>
<g >
<title>unlink_chunk (87,603,141 samples, 0.02%)</title><rect x="219.3" y="677" width="0.3" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="222.30" y="687.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (90,572,781 samples, 0.02%)</title><rect x="1137.1" y="773" width="0.3" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1140.10" y="783.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (59,308,946 samples, 0.02%)</title><rect x="504.4" y="725" width="0.2" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="507.38" y="735.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__relocate_a_1&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (270,178,006 samples, 0.07%)</title><rect x="138.5" y="837" width="0.9" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="141.53" y="847.5" ></text>
</g>
<g >
<title>std::__future_base::_Result&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::_M_set (48,755,745 samples, 0.01%)</title><rect x="470.2" y="533" width="0.2" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="473.24" y="543.5" ></text>
</g>
<g >
<title>tcache_get (101,503,547 samples, 0.03%)</title><rect x="1049.5" y="741" width="0.3" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="1052.50" y="751.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt;::_Tuple_impl&lt;std::__future_base::_Result_base*&amp;, std::__future_base::_Result_base::_Deleter, void&gt; (47,633,220 samples, 0.01%)</title><rect x="471.2" y="501" width="0.2" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="474.24" y="511.5" ></text>
</g>
<g >
<title>do_syscall_64 (181,999,590 samples, 0.05%)</title><rect x="1083.1" y="773" width="0.5" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1086.06" y="783.5" ></text>
</g>
<g >
<title>ip_finish_output2 (33,368,745 samples, 0.01%)</title><rect x="1085.9" y="533" width="0.1" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1088.89" y="543.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;::~pair (199,014,189 samples, 0.05%)</title><rect x="793.9" y="741" width="0.6" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="796.89" y="751.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (355,633,199 samples, 0.09%)</title><rect x="444.4" y="677" width="1.1" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="447.43" y="687.5" ></text>
</g>
<g >
<title>Cache::insertIntoCache (2,312,528,397 samples, 0.60%)</title><rect x="431.4" y="789" width="7.1" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="434.44" y="799.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (609,034,536 samples, 0.16%)</title><rect x="900.3" y="677" width="1.8" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="903.26" y="687.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (38,049,301 samples, 0.01%)</title><rect x="838.9" y="725" width="0.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="841.95" y="735.5" ></text>
</g>
<g >
<title>_int_malloc (185,627,248 samples, 0.05%)</title><rect x="526.0" y="645" width="0.6" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="528.99" y="655.5" ></text>
</g>
<g >
<title>aesni_init_key (482,999,561 samples, 0.12%)</title><rect x="840.1" y="725" width="1.5" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="843.12" y="735.5" ></text>
</g>
<g >
<title>cpp_redis::client::mget (1,841,066,333 samples, 0.48%)</title><rect x="904.7" y="741" width="5.6" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="907.70" y="751.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (750,984,832 samples, 0.19%)</title><rect x="1055.2" y="757" width="2.3" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="1058.19" y="767.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::deallocate (63,039,362 samples, 0.02%)</title><rect x="1164.1" y="677" width="0.2" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1167.12" y="687.5" ></text>
</g>
<g >
<title>tcp_event_new_data_sent (38,209,743 samples, 0.01%)</title><rect x="1060.7" y="437" width="0.1" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1063.70" y="447.5" ></text>
</g>
<g >
<title> (63,963,593 samples, 0.02%)</title><rect x="536.9" y="725" width="0.2" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="539.87" y="735.5" ></text>
</g>
<g >
<title>__random_r (149,910,631 samples, 0.04%)</title><rect x="855.8" y="725" width="0.5" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="858.80" y="735.5" ></text>
</g>
<g >
<title>HMAC_Init_ex (2,107,894,544 samples, 0.55%)</title><rect x="868.6" y="741" width="6.5" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="871.64" y="751.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;* std::__relocate_a&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;*, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;*, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; (99,529,242 samples, 0.03%)</title><rect x="448.5" y="709" width="0.3" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="451.47" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_S_equals (114,560,367 samples, 0.03%)</title><rect x="424.3" y="693" width="0.4" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="427.33" y="703.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (142,619,332 samples, 0.04%)</title><rect x="466.3" y="693" width="0.4" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="469.27" y="703.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1,020,435,254 samples, 0.26%)</title><rect x="1038.1" y="725" width="3.1" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1041.09" y="735.5" ></text>
</g>
<g >
<title>__pthread_cond_wait_common (372,759,748 samples, 0.10%)</title><rect x="1087.7" y="805" width="1.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1090.73" y="815.5" ></text>
</g>
<g >
<title>waffle_thrift_response_async_response_pargs::write (335,389,255 samples, 0.09%)</title><rect x="1061.1" y="709" width="1.0" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1064.10" y="719.5" ></text>
</g>
<g >
<title>bool std::operator&lt; &lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (817,611,785 samples, 0.21%)</title><rect x="719.5" y="709" width="2.5" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="722.50" y="719.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (2,233,372,750 samples, 0.58%)</title><rect x="979.3" y="741" width="6.8" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="982.25" y="751.5" ></text>
</g>
<g >
<title>__futex_abstimed_wait_common (250,428,156 samples, 0.06%)</title><rect x="1086.3" y="821" width="0.8" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="1089.35" y="831.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_valptr (68,085,941 samples, 0.02%)</title><rect x="1005.3" y="709" width="0.2" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="1008.30" y="719.5" ></text>
</g>
<g >
<title>unlink_chunk (54,279,268 samples, 0.01%)</title><rect x="900.1" y="549" width="0.2" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="903.09" y="559.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (36,338,316 samples, 0.01%)</title><rect x="1150.5" y="805" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1153.54" y="815.5" ></text>
</g>
<g >
<title>__GI___libc_free (128,774,177 samples, 0.03%)</title><rect x="815.2" y="645" width="0.4" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="818.23" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_allocate_buckets (41,896,807 samples, 0.01%)</title><rect x="988.9" y="693" width="0.1" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="991.85" y="703.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, void  (36,095,138 samples, 0.01%)</title><rect x="1089.5" y="805" width="0.1" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1092.49" y="815.5" ></text>
</g>
<g >
<title>_int_malloc (176,289,123 samples, 0.05%)</title><rect x="205.2" y="709" width="0.5" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="208.18" y="719.5" ></text>
</g>
<g >
<title>kmem_cache_alloc_bulk (43,581,502 samples, 0.01%)</title><rect x="1104.4" y="501" width="0.2" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1107.43" y="511.5" ></text>
</g>
<g >
<title>__handle_mm_fault (36,139,354 samples, 0.01%)</title><rect x="1160.4" y="597" width="0.1" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1163.43" y="607.5" ></text>
</g>
<g >
<title>aesni_cbc_encrypt (42,322,774 samples, 0.01%)</title><rect x="852.5" y="709" width="0.1" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="855.48" y="719.5" ></text>
</g>
<g >
<title>___pthread_mutex_unlock (78,182,444 samples, 0.02%)</title><rect x="527.7" y="725" width="0.3" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="530.75" y="735.5" ></text>
</g>
<g >
<title>std::deque&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::push_back (2,269,120,585 samples, 0.59%)</title><rect x="895.6" y="757" width="6.9" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="898.59" y="767.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (375,218,169 samples, 0.10%)</title><rect x="820.0" y="725" width="1.2" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="823.01" y="735.5" ></text>
</g>
<g >
<title>std::enable_if&lt;std::__and_&lt;std::__not_&lt;std::is_void&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt; &gt; &gt;, std::is_convertible&lt;std::__invoke_result&lt;std::__future_base::_State_baseV2::_Setter&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt;&amp;&gt;::type, std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt; &gt; &gt;::value, std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt; &gt;::type std::__invoke_r&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;, std::__future_base::_State_baseV2::_Setter&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt;&amp;&gt; (590,389,155 samples, 0.15%)</title><rect x="470.0" y="581" width="1.8" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="472.96" y="591.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_allocate (162,319,900 samples, 0.04%)</title><rect x="515.9" y="741" width="0.5" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="518.92" y="751.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::find (113,594,270 samples, 0.03%)</title><rect x="1174.5" y="853" width="0.3" height="15.0" fill="rgb(252,217,52)" rx="2" ry="2" />
<text  x="1177.50" y="863.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (495,231,403 samples, 0.13%)</title><rect x="998.2" y="629" width="1.5" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1001.15" y="639.5" ></text>
</g>
<g >
<title>__libc_send (268,877,032 samples, 0.07%)</title><rect x="1111.4" y="805" width="0.8" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="1114.41" y="815.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt; &gt; &gt;::destroy&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (785,242,933 samples, 0.20%)</title><rect x="1006.9" y="709" width="2.4" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="1009.91" y="719.5" ></text>
</g>
<g >
<title>std::operator== (37,346,314 samples, 0.01%)</title><rect x="456.8" y="741" width="0.1" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="459.80" y="751.5" ></text>
</g>
<g >
<title>operator new (1,080,475,471 samples, 0.28%)</title><rect x="1046.6" y="773" width="3.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1049.58" y="783.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::~unique_ptr (284,521,304 samples, 0.07%)</title><rect x="1056.5" y="645" width="0.9" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1059.54" y="655.5" ></text>
</g>
<g >
<title>futex_wake (995,613,770 samples, 0.26%)</title><rect x="466.1" y="709" width="3.0" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="469.07" y="719.5" ></text>
</g>
<g >
<title>std::mutex::lock (70,650,424 samples, 0.02%)</title><rect x="450.8" y="757" width="0.2" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="453.83" y="767.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::lock_guard (33,847,397 samples, 0.01%)</title><rect x="522.0" y="773" width="0.1" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="524.99" y="783.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, false&gt; &gt;::destroy&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; (511,911,207 samples, 0.13%)</title><rect x="957.6" y="677" width="1.6" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="960.63" y="687.5" ></text>
</g>
<g >
<title>void std::__relocate_object_a&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; (109,915,215 samples, 0.03%)</title><rect x="1090.9" y="661" width="0.4" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="1093.92" y="671.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (645,860,317 samples, 0.17%)</title><rect x="826.6" y="725" width="2.0" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="829.61" y="735.5" ></text>
</g>
<g >
<title>__GI___libc_free (163,032,058 samples, 0.04%)</title><rect x="214.4" y="581" width="0.5" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="217.45" y="591.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;main::{lambda (773,925,518 samples, 0.20%)</title><rect x="201.9" y="885" width="2.4" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="204.90" y="895.5" ></text>
</g>
<g >
<title>__libc_send (407,960,148 samples, 0.11%)</title><rect x="1059.8" y="629" width="1.2" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="1062.78" y="639.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;::operator[] (223,859,530 samples, 0.06%)</title><rect x="522.8" y="773" width="0.7" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="525.82" y="783.5" ></text>
</g>
<g >
<title>exc_page_fault (49,966,537 samples, 0.01%)</title><rect x="1161.4" y="645" width="0.1" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1164.39" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (42,283,031 samples, 0.01%)</title><rect x="504.4" y="709" width="0.2" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="507.43" y="719.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (980,777,182 samples, 0.25%)</title><rect x="911.8" y="677" width="3.0" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="914.82" y="687.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (654,686,569 samples, 0.17%)</title><rect x="785.2" y="709" width="2.0" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="788.22" y="719.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_deallocate_buckets (196,316,822 samples, 0.05%)</title><rect x="1004.2" y="741" width="0.6" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1007.16" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_valptr (37,212,543 samples, 0.01%)</title><rect x="894.5" y="709" width="0.1" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="897.47" y="719.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;char*&gt;::difference_type std::distance&lt;char*&gt; (42,121,926 samples, 0.01%)</title><rect x="1115.8" y="805" width="0.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1118.83" y="815.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (741,988,298 samples, 0.19%)</title><rect x="1000.9" y="741" width="2.3" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1003.92" y="751.5" ></text>
</g>
<g >
<title>_int_new_arena (33,539,657 samples, 0.01%)</title><rect x="1087.3" y="757" width="0.1" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1090.34" y="767.5" ></text>
</g>
<g >
<title>heap_for_ptr (39,978,804 samples, 0.01%)</title><rect x="1040.7" y="661" width="0.1" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1043.70" y="671.5" ></text>
</g>
<g >
<title>do_mprotect_pkey (48,084,647 samples, 0.01%)</title><rect x="1104.4" y="581" width="0.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1107.41" y="591.5" ></text>
</g>
<g >
<title>__gthread_mutex_unlock (74,441,431 samples, 0.02%)</title><rect x="578.5" y="741" width="0.2" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="581.50" y="751.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::erase (69,020,866 samples, 0.02%)</title><rect x="431.7" y="773" width="0.2" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="434.67" y="783.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, true&gt; &gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (243,095,756 samples, 0.06%)</title><rect x="832.3" y="709" width="0.7" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="835.27" y="719.5" ></text>
</g>
<g >
<title>_int_free (230,706,212 samples, 0.06%)</title><rect x="862.4" y="709" width="0.7" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="865.41" y="719.5" ></text>
</g>
<g >
<title>operator new (470,605,325 samples, 0.12%)</title><rect x="1071.7" y="725" width="1.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1074.71" y="735.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::swap (190,440,045 samples, 0.05%)</title><rect x="810.9" y="597" width="0.6" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="813.89" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::_S_max_size (84,243,501 samples, 0.02%)</title><rect x="448.0" y="709" width="0.2" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="450.96" y="719.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::end (63,873,524 samples, 0.02%)</title><rect x="446.2" y="757" width="0.2" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="449.22" y="767.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_erase (251,933,517 samples, 0.07%)</title><rect x="1073.3" y="757" width="0.7" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1076.26" y="767.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_S_relocate (229,710,399 samples, 0.06%)</title><rect x="933.8" y="741" width="0.7" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="936.77" y="751.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (395,688,564 samples, 0.10%)</title><rect x="211.5" y="725" width="1.2" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="214.50" y="735.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_rehash_aux (168,992,636 samples, 0.04%)</title><rect x="1012.5" y="709" width="0.6" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="1015.54" y="719.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (112,304,026 samples, 0.03%)</title><rect x="1050.6" y="773" width="0.4" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="1053.62" y="783.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__detail::_Node_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true, true&gt;, bool&gt; std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_insert&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt; &gt; (113,409,548 samples, 0.03%)</title><rect x="1174.9" y="837" width="0.3" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1177.87" y="847.5" ></text>
</g>
<g >
<title>freqCmp (56,634,319 samples, 0.01%)</title><rect x="712.4" y="741" width="0.1" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="715.37" y="751.5" ></text>
</g>
<g >
<title>__GI___libc_free (70,615,660 samples, 0.02%)</title><rect x="934.7" y="773" width="0.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="937.73" y="783.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (133,776,431 samples, 0.03%)</title><rect x="533.6" y="741" width="0.4" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="536.56" y="751.5" ></text>
</g>
<g >
<title>tacopie::tcp_client::async_write (44,693,300 samples, 0.01%)</title><rect x="903.3" y="709" width="0.1" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="906.27" y="719.5" ></text>
</g>
<g >
<title>malloc_consolidate (172,749,007 samples, 0.04%)</title><rect x="1025.7" y="661" width="0.5" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1028.67" y="671.5" ></text>
</g>
<g >
<title>cpp_redis::builders::reply_builder::pop_front (193,815,634 samples, 0.05%)</title><rect x="1074.7" y="821" width="0.6" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="1077.75" y="831.5" ></text>
</g>
<g >
<title>_int_free (151,479,039 samples, 0.04%)</title><rect x="926.7" y="661" width="0.5" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="929.72" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::max_size (143,886,187 samples, 0.04%)</title><rect x="447.8" y="725" width="0.4" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="450.78" y="735.5" ></text>
</g>
<g >
<title>_int_free (657,366,039 samples, 0.17%)</title><rect x="1075.7" y="789" width="2.0" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1078.69" y="799.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (319,616,866 samples, 0.08%)</title><rect x="117.7" y="933" width="1.0" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="120.69" y="943.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (324,336,433 samples, 0.08%)</title><rect x="517.1" y="677" width="1.0" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="520.13" y="687.5" ></text>
</g>
<g >
<title>malloc_consolidate (154,406,569 samples, 0.04%)</title><rect x="219.1" y="693" width="0.5" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="222.10" y="703.5" ></text>
</g>
<g >
<title>apache::thrift::protocol::TNetworkBigEndian::toWire32 (39,100,044 samples, 0.01%)</title><rect x="1061.4" y="629" width="0.2" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="1064.44" y="639.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__future_base::_Result_base::_Deleter&gt; std::__invoke_impl&lt;std::unique_ptr&lt;std::__future_base::_Result&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__future_base::_Result_base::_Deleter&gt;, std::__future_base::_State_baseV2::_Setter&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;&amp;&gt; (210,769,097 samples, 0.05%)</title><rect x="809.4" y="549" width="0.6" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="812.37" y="559.5" ></text>
</g>
<g >
<title>__GI___libc_free (33,035,148 samples, 0.01%)</title><rect x="1082.5" y="805" width="0.1" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1085.54" y="815.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::lock_guard (207,575,512 samples, 0.05%)</title><rect x="492.1" y="773" width="0.6" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="495.10" y="783.5" ></text>
</g>
<g >
<title>unsigned char* std::__find_if&lt;unsigned char*, __gnu_cxx::__ops::_Iter_equals_val&lt;char const&gt; &gt; (320,176,368 samples, 0.08%)</title><rect x="845.9" y="725" width="0.9" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="848.87" y="735.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (90,105,903 samples, 0.02%)</title><rect x="933.5" y="677" width="0.3" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="936.48" y="687.5" ></text>
</g>
<g >
<title>__schedule (123,901,103 samples, 0.03%)</title><rect x="1086.5" y="677" width="0.4" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="1089.52" y="687.5" ></text>
</g>
<g >
<title>operation* std::uninitialized_copy&lt;operation const*, operation*&gt; (773,434,018 samples, 0.20%)</title><rect x="476.7" y="725" width="2.3" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="479.68" y="735.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;cpp_redis::reply*&gt; (295,337,910 samples, 0.08%)</title><rect x="917.8" y="725" width="0.9" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="920.79" y="735.5" ></text>
</g>
<g >
<title>cpp_redis::network::redis_connection::tcp_client_receive_handler (6,095,537,782 samples, 1.58%)</title><rect x="1063.8" y="837" width="18.6" height="15.0" fill="rgb(241,170,40)" rx="2" ry="2" />
<text  x="1066.75" y="847.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_S_relocate (352,146,630 samples, 0.09%)</title><rect x="929.4" y="741" width="1.1" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="932.42" y="751.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_erase (167,625,551 samples, 0.04%)</title><rect x="1066.9" y="709" width="0.5" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1069.89" y="719.5" ></text>
</g>
<g >
<title>operator new (258,870,761 samples, 0.07%)</title><rect x="961.8" y="757" width="0.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="964.84" y="767.5" ></text>
</g>
<g >
<title>apache::thrift::protocol::TProtocol::readMessageBegin (60,038,876 samples, 0.02%)</title><rect x="1089.2" y="837" width="0.1" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="1092.16" y="847.5" ></text>
</g>
<g >
<title>do_anonymous_page (86,007,505 samples, 0.02%)</title><rect x="1119.7" y="677" width="0.2" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1122.66" y="687.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::vector (78,395,549 samples, 0.02%)</title><rect x="1018.9" y="757" width="0.3" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1021.94" y="767.5" ></text>
</g>
<g >
<title>void std::__detail::__to_chars_10_impl&lt;unsigned int&gt; (131,345,186 samples, 0.03%)</title><rect x="973.9" y="773" width="0.4" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="976.92" y="783.5" ></text>
</g>
<g >
<title>unsigned int apache::thrift::protocol::TBinaryProtocolT&lt;apache::thrift::transport::TTransport, apache::thrift::protocol::TNetworkBigEndian&gt;::readStringBody&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (165,308,710 samples, 0.04%)</title><rect x="1108.7" y="741" width="0.5" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1111.69" y="751.5" ></text>
</g>
<g >
<title>std::enable_if&lt;std::__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;std::__future_base::_Result_base*&gt; &gt;, std::is_move_constructible&lt;std::__future_base::_Result_base*&gt;, std::is_move_assignable&lt;std::__future_base::_Result_base*&gt; &gt;::value, void&gt;::type std::swap&lt;std::__future_base::_Result_base*&gt; (39,667,335 samples, 0.01%)</title><rect x="472.2" y="581" width="0.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="475.23" y="591.5" ></text>
</g>
<g >
<title>__GI___pthread_mutex_unlock_usercnt (81,688,677 samples, 0.02%)</title><rect x="882.6" y="709" width="0.3" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="885.65" y="719.5" ></text>
</g>
<g >
<title>__gnu_cxx::__enable_if&lt;std::__is_char&lt;char&gt;::__value, bool&gt;::__type std::operator==&lt;char&gt; (372,352,913 samples, 0.10%)</title><rect x="513.3" y="677" width="1.1" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="516.25" y="687.5" ></text>
</g>
<g >
<title>CRYPTO_zalloc (54,468,435 samples, 0.01%)</title><rect x="1154.7" y="789" width="0.2" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="1157.75" y="799.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::allocate (160,465,262 samples, 0.04%)</title><rect x="447.0" y="725" width="0.5" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="450.01" y="735.5" ></text>
</g>
<g >
<title>do_syscall_64 (48,742,259 samples, 0.01%)</title><rect x="1111.3" y="789" width="0.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1114.26" y="799.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;* std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt;::operator (36,367,885 samples, 0.01%)</title><rect x="1175.1" y="821" width="0.1" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="1178.10" y="831.5" ></text>
</g>
<g >
<title>handle_mm_fault (57,781,780 samples, 0.01%)</title><rect x="1162.4" y="741" width="0.1" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1165.36" y="751.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::~_Vector_base (189,764,787 samples, 0.05%)</title><rect x="219.0" y="789" width="0.6" height="15.0" fill="rgb(252,217,51)" rx="2" ry="2" />
<text  x="221.99" y="799.5" ></text>
</g>
<g >
<title>tcache_init (33,539,657 samples, 0.01%)</title><rect x="1087.3" y="821" width="0.1" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="1090.34" y="831.5" ></text>
</g>
<g >
<title>operator new (36,152,529 samples, 0.01%)</title><rect x="1092.6" y="629" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1095.58" y="639.5" ></text>
</g>
<g >
<title>std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;  (505,935,797 samples, 0.13%)</title><rect x="1078.3" y="677" width="1.5" height="15.0" fill="rgb(241,170,40)" rx="2" ry="2" />
<text  x="1081.29" y="687.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (69,884,294 samples, 0.02%)</title><rect x="594.8" y="677" width="0.2" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="597.75" y="687.5" ></text>
</g>
<g >
<title>net_rx_action (171,017,566 samples, 0.04%)</title><rect x="1060.1" y="229" width="0.5" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1063.07" y="239.5" ></text>
</g>
<g >
<title>[anon] (21,944,338,560 samples, 5.68%)</title><rect x="45.5" y="949" width="67.0" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="48.48" y="959.5" >[anon]</text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (36,912,222 samples, 0.01%)</title><rect x="430.7" y="693" width="0.2" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="433.74" y="703.5" ></text>
</g>
<g >
<title>std::vector&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::~vector (59,645,727 samples, 0.02%)</title><rect x="1057.8" y="773" width="0.2" height="15.0" fill="rgb(221,75,17)" rx="2" ry="2" />
<text  x="1060.78" y="783.5" ></text>
</g>
<g >
<title>cpp_redis::builders::create_builder (68,781,428 samples, 0.02%)</title><rect x="1069.9" y="757" width="0.2" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1072.88" y="767.5" ></text>
</g>
<g >
<title>std::__atomic_base&lt;int&gt;::operator int (14,976,861,734 samples, 3.87%)</title><rect x="297.3" y="789" width="45.7" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="300.27" y="799.5" >std:..</text>
</g>
<g >
<title>std::deque&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;::push_back (292,743,232 samples, 0.08%)</title><rect x="1092.0" y="725" width="0.8" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="1094.96" y="735.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (761,344,702 samples, 0.20%)</title><rect x="1055.2" y="773" width="2.3" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="1058.16" y="783.5" ></text>
</g>
<g >
<title>__GI___libc_free (63,039,362 samples, 0.02%)</title><rect x="1164.1" y="645" width="0.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1167.12" y="655.5" ></text>
</g>
<g >
<title>___pthread_mutex_lock (69,861,762 samples, 0.02%)</title><rect x="882.3" y="725" width="0.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="885.27" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Insert_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::insert (122,431,134 samples, 0.03%)</title><rect x="1174.8" y="853" width="0.4" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="1177.85" y="863.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare (304,310,596 samples, 0.08%)</title><rect x="886.5" y="661" width="0.9" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="889.45" y="671.5" ></text>
</g>
<g >
<title>cpp_redis::builders::bulk_string_builder::fetch_size (320,729,804 samples, 0.08%)</title><rect x="1066.7" y="741" width="1.0" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="1069.74" y="751.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (49,580,856 samples, 0.01%)</title><rect x="1164.6" y="821" width="0.2" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="1167.61" y="831.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (37,908,355 samples, 0.01%)</title><rect x="218.8" y="661" width="0.1" height="15.0" fill="rgb(214,41,9)" rx="2" ry="2" />
<text  x="221.76" y="671.5" ></text>
</g>
<g >
<title>syscall (52,451,026 samples, 0.01%)</title><rect x="953.3" y="677" width="0.1" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="956.27" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt;* std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (3,010,747,452 samples, 0.78%)</title><rect x="991.2" y="741" width="9.1" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="994.16" y="751.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (2,503,684,048 samples, 0.65%)</title><rect x="1131.3" y="789" width="7.6" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1134.30" y="799.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (825,012,534 samples, 0.21%)</title><rect x="817.3" y="533" width="2.6" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="820.35" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_S_relocate (979,835,015 samples, 0.25%)</title><rect x="1026.3" y="757" width="2.9" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1029.25" y="767.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (91,554,280 samples, 0.02%)</title><rect x="942.4" y="661" width="0.3" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="945.38" y="671.5" ></text>
</g>
<g >
<title>_int_malloc (112,861,146 samples, 0.03%)</title><rect x="1106.4" y="581" width="0.3" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1109.35" y="591.5" ></text>
</g>
<g >
<title>std::future&lt;cpp_redis::reply&gt;::get (85,443,835 samples, 0.02%)</title><rect x="918.9" y="773" width="0.2" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="921.88" y="783.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::deallocate (62,313,302 samples, 0.02%)</title><rect x="214.3" y="597" width="0.1" height="15.0" fill="rgb(214,41,10)" rx="2" ry="2" />
<text  x="217.26" y="607.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::construct&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;&gt; (126,368,542 samples, 0.03%)</title><rect x="902.1" y="725" width="0.4" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="905.13" y="735.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt; &gt; &gt;::destroy&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt; (169,528,274 samples, 0.04%)</title><rect x="596.5" y="677" width="0.5" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="599.50" y="687.5" ></text>
</g>
<g >
<title>cpp_redis::client::exec_cmd (1,410,125,081 samples, 0.36%)</title><rect x="206.0" y="773" width="4.3" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="209.02" y="783.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::_List_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (125,325,650 samples, 0.03%)</title><rect x="526.7" y="725" width="0.3" height="15.0" fill="rgb(231,124,29)" rx="2" ry="2" />
<text  x="529.67" y="735.5" ></text>
</g>
<g >
<title>_int_free (41,695,195 samples, 0.01%)</title><rect x="503.5" y="677" width="0.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="506.50" y="687.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (96,844,971 samples, 0.03%)</title><rect x="830.8" y="741" width="0.3" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="833.84" y="751.5" ></text>
</g>
<g >
<title>ep_poll_callback (74,106,321 samples, 0.02%)</title><rect x="1112.0" y="645" width="0.2" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1114.96" y="655.5" ></text>
</g>
<g >
<title>EVP_DigestInit_ex (618,194,330 samples, 0.16%)</title><rect x="871.1" y="725" width="1.9" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="874.11" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (1,160,861,542 samples, 0.30%)</title><rect x="510.9" y="709" width="3.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="513.86" y="719.5" ></text>
</g>
<g >
<title>cpp_redis::network::tcp_client::async_write (58,325,924 samples, 0.02%)</title><rect x="205.0" y="741" width="0.2" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="207.99" y="751.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt;, bool&gt; std::_Rb_tree&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;, std::_Identity&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt;, bool  (26,988,967,277 samples, 6.98%)</title><rect x="712.1" y="757" width="82.4" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="715.12" y="767.5" >std::pair..</text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (432,755,976 samples, 0.11%)</title><rect x="909.0" y="709" width="1.3" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="912.00" y="719.5" ></text>
</g>
<g >
<title>__gthread_active_p (89,282,290 samples, 0.02%)</title><rect x="60.1" y="933" width="0.3" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="63.09" y="943.5" ></text>
</g>
<g >
<title>__GI___libc_free (61,072,539 samples, 0.02%)</title><rect x="596.3" y="645" width="0.1" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="599.25" y="655.5" ></text>
</g>
<g >
<title>operator new (108,454,208 samples, 0.03%)</title><rect x="1160.8" y="805" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1163.76" y="815.5" ></text>
</g>
<g >
<title>aesni_set_encrypt_key (55,780,785 samples, 0.01%)</title><rect x="1150.9" y="789" width="0.2" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="1153.93" y="799.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_allocate_buckets (47,647,154 samples, 0.01%)</title><rect x="1012.7" y="693" width="0.2" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="1015.71" y="703.5" ></text>
</g>
<g >
<title>do_user_addr_fault (34,100,432 samples, 0.01%)</title><rect x="1115.7" y="757" width="0.1" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1118.68" y="767.5" ></text>
</g>
<g >
<title>apache::thrift::server::TNonblockingServer::TConnection::transition (255,388,480 samples, 0.07%)</title><rect x="203.0" y="677" width="0.8" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="205.97" y="687.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;queue&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;queue&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::operator[] (5,078,426,098 samples, 1.31%)</title><rect x="405.9" y="805" width="15.5" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="408.86" y="815.5" ></text>
</g>
<g >
<title>__libc_send (582,093,686 samples, 0.15%)</title><rect x="1084.5" y="805" width="1.8" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="1087.51" y="815.5" ></text>
</g>
<g >
<title>aesni_set_encrypt_key (323,812,661 samples, 0.08%)</title><rect x="840.6" y="693" width="1.0" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="843.61" y="703.5" ></text>
</g>
<g >
<title>cpp_redis::network::redis_connection::build_command (628,478,782 samples, 0.16%)</title><rect x="206.3" y="693" width="2.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="209.35" y="703.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (310,634,292 samples, 0.08%)</title><rect x="80.9" y="933" width="0.9" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="83.86" y="943.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy_chars (62,734,989 samples, 0.02%)</title><rect x="614.2" y="677" width="0.2" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="617.23" y="687.5" ></text>
</g>
<g >
<title>psi_group_change (60,370,187 samples, 0.02%)</title><rect x="1054.4" y="549" width="0.2" height="15.0" fill="rgb(226,101,24)" rx="2" ry="2" />
<text  x="1057.45" y="559.5" ></text>
</g>
<g >
<title>_int_free (43,396,984 samples, 0.01%)</title><rect x="207.0" y="661" width="0.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="210.00" y="671.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (490,650,563 samples, 0.13%)</title><rect x="1135.0" y="757" width="1.5" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1138.04" y="767.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (1,035,929,079 samples, 0.27%)</title><rect x="948.8" y="741" width="3.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="951.76" y="751.5" ></text>
</g>
<g >
<title>unlink_chunk (135,016,663 samples, 0.03%)</title><rect x="999.2" y="597" width="0.4" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="1002.16" y="607.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::unique_ptr&lt;std::__future_base::_Result&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__future_base::_Result_base::_Deleter, void&gt; (34,666,364 samples, 0.01%)</title><rect x="469.9" y="565" width="0.1" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="472.86" y="575.5" ></text>
</g>
<g >
<title>apache::thrift::server::TNonblockingServer::addTask (110,144,489 samples, 0.03%)</title><rect x="203.1" y="661" width="0.4" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="206.14" y="671.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;,  (38,165,243 samples, 0.01%)</title><rect x="92.9" y="933" width="0.1" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="95.91" y="943.5" ></text>
</g>
<g >
<title>CRYPTO_zalloc (65,698,502 samples, 0.02%)</title><rect x="848.8" y="741" width="0.2" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="851.84" y="751.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (36,923,557 samples, 0.01%)</title><rect x="1063.2" y="789" width="0.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1066.20" y="799.5" ></text>
</g>
<g >
<title>_int_free (72,032,981 samples, 0.02%)</title><rect x="404.9" y="709" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="407.88" y="719.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; std::make_shared&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;&gt; (688,704,928 samples, 0.18%)</title><rect x="1095.5" y="757" width="2.1" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="1098.53" y="767.5" ></text>
</g>
<g >
<title>lll_mutex_lock_optimized (58,391,719 samples, 0.02%)</title><rect x="578.1" y="709" width="0.2" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="581.15" y="719.5" ></text>
</g>
<g >
<title>unix_stream_sendmsg (226,499,787 samples, 0.06%)</title><rect x="1111.5" y="725" width="0.7" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1114.51" y="735.5" ></text>
</g>
<g >
<title>__GI___futex_abstimed_wait_cancelable64 (368,397,105 samples, 0.10%)</title><rect x="1087.7" y="789" width="1.2" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1090.73" y="799.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::construct&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; (138,625,259 samples, 0.04%)</title><rect x="1092.1" y="677" width="0.5" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="1095.14" y="687.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__future_base::_Result_base::_Deleter&gt;::__uniq_ptr_impl (56,722,935 samples, 0.01%)</title><rect x="809.8" y="485" width="0.2" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="812.84" y="495.5" ></text>
</g>
<g >
<title>operation::operation (166,790,587 samples, 0.04%)</title><rect x="1104.9" y="725" width="0.5" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="1107.86" y="735.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::~pair (44,534,467 samples, 0.01%)</title><rect x="431.7" y="709" width="0.2" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="434.75" y="719.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__relocate_a&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (150,296,978 samples, 0.04%)</title><rect x="1116.0" y="805" width="0.5" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="1119.02" y="815.5" ></text>
</g>
<g >
<title>tacopie::tcp_client::async_write (58,325,924 samples, 0.02%)</title><rect x="205.0" y="725" width="0.2" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="207.99" y="735.5" ></text>
</g>
<g >
<title>handle_mm_fault (86,007,505 samples, 0.02%)</title><rect x="1119.7" y="725" width="0.2" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1122.66" y="735.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_bucket_index (185,698,763 samples, 0.05%)</title><rect x="1010.7" y="709" width="0.5" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="1013.67" y="719.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::pair&lt;int, std::pair&lt;sequence_id const&amp;, std::vector&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::construct&lt;std::pair&lt;int, std::pair&lt;sequence_id const&amp;, std::vector&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::pair&lt;int, std::pair&lt;sequence_id const&amp;, std::vector&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; (68,481,562 samples, 0.02%)</title><rect x="1100.5" y="709" width="0.2" height="15.0" fill="rgb(234,133,31)" rx="2" ry="2" />
<text  x="1103.51" y="719.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::clear (45,052,576 samples, 0.01%)</title><rect x="1175.3" y="837" width="0.2" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1178.32" y="847.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (528,708,088 samples, 0.14%)</title><rect x="900.5" y="645" width="1.6" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="903.48" y="655.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;::end (89,387,044 samples, 0.02%)</title><rect x="493.3" y="773" width="0.3" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="496.28" y="783.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (256,385,083 samples, 0.07%)</title><rect x="20.1" y="933" width="0.8" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="23.13" y="943.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (35,469,558 samples, 0.01%)</title><rect x="830.7" y="725" width="0.1" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="833.65" y="735.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;,  (33,028,911 samples, 0.01%)</title><rect x="92.3" y="933" width="0.1" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="95.31" y="943.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (108,454,208 samples, 0.03%)</title><rect x="1160.8" y="789" width="0.3" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1163.76" y="799.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;std::__future_base::_State_baseV2&gt; std::make_shared&lt;std::__future_base::_State_baseV2&gt; (339,312,361 samples, 0.09%)</title><rect x="1096.2" y="613" width="1.0" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="1099.17" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (162,561,375 samples, 0.04%)</title><rect x="883.4" y="693" width="0.4" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="886.35" y="703.5" ></text>
</g>
<g >
<title>SHA256_Final (46,988,308 samples, 0.01%)</title><rect x="49.0" y="933" width="0.1" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="51.97" y="943.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (97,649,512 samples, 0.03%)</title><rect x="531.5" y="693" width="0.3" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="534.55" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_S_equals (104,837,154 samples, 0.03%)</title><rect x="890.2" y="693" width="0.3" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="893.16" y="703.5" ></text>
</g>
<g >
<title>operator new (189,100,203 samples, 0.05%)</title><rect x="488.6" y="773" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="491.62" y="783.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (2,046,727,763 samples, 0.53%)</title><rect x="608.6" y="693" width="6.2" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="611.58" y="703.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (206,171,930 samples, 0.05%)</title><rect x="853.2" y="725" width="0.6" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="856.18" y="735.5" ></text>
</g>
<g >
<title>lll_mutex_lock_optimized (87,160,881 samples, 0.02%)</title><rect x="1093.0" y="661" width="0.3" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="1096.04" y="671.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_capacity (185,743,905 samples, 0.05%)</title><rect x="681.3" y="693" width="0.6" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="684.31" y="703.5" ></text>
</g>
<g >
<title>__fdget (36,644,172 samples, 0.01%)</title><rect x="1062.4" y="773" width="0.1" height="15.0" fill="rgb(214,41,10)" rx="2" ry="2" />
<text  x="1065.41" y="783.5" ></text>
</g>
<g >
<title>_int_malloc (58,601,951 samples, 0.02%)</title><rect x="138.2" y="821" width="0.2" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="141.18" y="831.5" ></text>
</g>
<g >
<title>__gnu_cxx::__enable_if&lt;std::__is_char&lt;char&gt;::__value, bool&gt;::__type std::operator==&lt;char&gt; (36,912,222 samples, 0.01%)</title><rect x="430.7" y="677" width="0.2" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="433.74" y="687.5" ></text>
</g>
<g >
<title>_int_free (58,456,316 samples, 0.02%)</title><rect x="1157.2" y="821" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1160.21" y="831.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;, std::_Identity&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt;, bool  (222,664,895 samples, 0.06%)</title><rect x="1142.3" y="773" width="0.7" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1145.35" y="783.5" ></text>
</g>
<g >
<title> (107,190,875 samples, 0.03%)</title><rect x="1003.4" y="741" width="0.4" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="1006.44" y="751.5" ></text>
</g>
<g >
<title>handle_mm_fault (54,058,358 samples, 0.01%)</title><rect x="1159.1" y="645" width="0.2" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1162.12" y="655.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::end (51,737,171 samples, 0.01%)</title><rect x="828.8" y="773" width="0.2" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="831.80" y="783.5" ></text>
</g>
<g >
<title>_int_free (192,112,434 samples, 0.05%)</title><rect x="1004.2" y="661" width="0.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1007.17" y="671.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (68,647,800 samples, 0.02%)</title><rect x="1082.5" y="837" width="0.2" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1085.46" y="847.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (38,819,004 samples, 0.01%)</title><rect x="82.7" y="933" width="0.1" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="85.69" y="943.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (59,077,878 samples, 0.02%)</title><rect x="430.9" y="709" width="0.2" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="433.94" y="719.5" ></text>
</g>
<g >
<title>Cache::getValueWithoutPositionChangeNew (1,201,391,657 samples, 0.31%)</title><rect x="427.8" y="789" width="3.6" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="430.78" y="799.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, true&gt; &gt; &gt;::allocate (59,231,823 samples, 0.02%)</title><rect x="534.4" y="709" width="0.2" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="537.39" y="719.5" ></text>
</g>
<g >
<title>_int_free (121,159,207 samples, 0.03%)</title><rect x="910.4" y="645" width="0.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="913.35" y="655.5" ></text>
</g>
<g >
<title>malloc_consolidate (235,004,331 samples, 0.06%)</title><rect x="957.6" y="533" width="0.8" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="960.64" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_default_append (578,927,039 samples, 0.15%)</title><rect x="1109.3" y="773" width="1.7" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="1112.26" y="783.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (51,279,455 samples, 0.01%)</title><rect x="1094.7" y="677" width="0.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1097.65" y="687.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::_Vector_base (73,381,079 samples, 0.02%)</title><rect x="444.9" y="629" width="0.2" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="447.88" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;cpp_redis::reply, std::allocator&lt;cpp_redis::reply&gt; &gt;::~vector (454,674,152 samples, 0.12%)</title><rect x="926.2" y="773" width="1.4" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="929.20" y="783.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (457,807,483 samples, 0.12%)</title><rect x="497.2" y="709" width="1.4" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="500.24" y="719.5" ></text>
</g>
<g >
<title>evictedItems::checkIfKeyExists (371,151,284 samples, 0.10%)</title><rect x="450.7" y="789" width="1.2" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="453.73" y="799.5" ></text>
</g>
<g >
<title>operator new (405,301,599 samples, 0.10%)</title><rect x="1025.0" y="709" width="1.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1027.98" y="719.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_List_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::deallocate (54,669,502 samples, 0.01%)</title><rect x="524.1" y="725" width="0.2" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="527.15" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt; &gt;, true&gt;::_M_get (50,924,113 samples, 0.01%)</title><rect x="88.8" y="933" width="0.2" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="91.84" y="943.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (72,060,781 samples, 0.02%)</title><rect x="1159.1" y="693" width="0.2" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1162.08" y="703.5" ></text>
</g>
<g >
<title>ip_finish_output2 (34,007,746 samples, 0.01%)</title><rect x="204.0" y="341" width="0.1" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="207.04" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (236,199,755 samples, 0.06%)</title><rect x="429.5" y="709" width="0.7" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="432.53" y="719.5" ></text>
</g>
<g >
<title>std::unique_lock&lt;std::mutex&gt;::unique_lock (147,642,912 samples, 0.04%)</title><rect x="1092.9" y="741" width="0.4" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="1095.86" y="751.5" ></text>
</g>
<g >
<title>evictedItems::checkIfKeyExists (154,427,031 samples, 0.04%)</title><rect x="881.6" y="789" width="0.5" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="884.62" y="799.5" ></text>
</g>
<g >
<title>std::mutex::unlock (104,182,786 samples, 0.03%)</title><rect x="882.6" y="757" width="0.3" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="885.58" y="767.5" ></text>
</g>
<g >
<title>mas_preallocate (43,581,502 samples, 0.01%)</title><rect x="1104.4" y="533" width="0.2" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="1107.43" y="543.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (217,212,147 samples, 0.06%)</title><rect x="211.8" y="661" width="0.7" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="214.81" y="671.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::swap (195,379,409 samples, 0.05%)</title><rect x="139.9" y="869" width="0.6" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="142.89" y="879.5" ></text>
</g>
<g >
<title>_int_malloc (177,423,280 samples, 0.05%)</title><rect x="1155.6" y="789" width="0.5" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1158.59" y="799.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__relocate_a_1&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (343,360,861 samples, 0.09%)</title><rect x="929.4" y="693" width="1.1" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="932.42" y="703.5" ></text>
</g>
<g >
<title>__GI___libc_free (63,220,962 samples, 0.02%)</title><rect x="1157.6" y="805" width="0.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1160.62" y="815.5" ></text>
</g>
<g >
<title>__handle_mm_fault (73,308,217 samples, 0.02%)</title><rect x="1142.6" y="613" width="0.3" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1145.64" y="623.5" ></text>
</g>
<g >
<title>__GI___libc_free (3,383,091,764 samples, 0.88%)</title><rect x="695.3" y="709" width="10.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="698.32" y="719.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (286,145,161 samples, 0.07%)</title><rect x="955.1" y="709" width="0.9" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="958.12" y="719.5" ></text>
</g>
<g >
<title>std::deque&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_pop_front_aux (151,275,396 samples, 0.04%)</title><rect x="457.3" y="741" width="0.5" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="460.31" y="751.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt;::destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (216,713,097 samples, 0.06%)</title><rect x="1016.6" y="693" width="0.7" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1019.61" y="703.5" ></text>
</g>
<g >
<title>aesni_cbc_cipher (176,337,156 samples, 0.05%)</title><rect x="851.6" y="725" width="0.6" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="854.64" y="735.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (52,451,026 samples, 0.01%)</title><rect x="953.3" y="661" width="0.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="956.27" y="671.5" ></text>
</g>
<g >
<title>tcp_write_xmit (253,502,106 samples, 0.07%)</title><rect x="1060.1" y="453" width="0.7" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1063.06" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (156,162,967 samples, 0.04%)</title><rect x="893.9" y="741" width="0.4" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="896.86" y="751.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, false&gt; &gt; &gt;::destroy&lt;std::pair&lt;int const, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; (240,150,848 samples, 0.06%)</title><rect x="214.3" y="709" width="0.7" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="217.26" y="719.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_default_append (438,705,609 samples, 0.11%)</title><rect x="1098.7" y="773" width="1.4" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="1101.74" y="783.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;::pair (245,276,526 samples, 0.06%)</title><rect x="710.4" y="741" width="0.7" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="713.37" y="751.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (391,707,235 samples, 0.10%)</title><rect x="886.2" y="693" width="1.2" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="889.19" y="703.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::_List_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::destroy&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (108,788,224 samples, 0.03%)</title><rect x="503.7" y="741" width="0.4" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="506.74" y="751.5" ></text>
</g>
<g >
<title>malloc_consolidate (57,646,148 samples, 0.01%)</title><rect x="902.2" y="549" width="0.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="905.21" y="559.5" ></text>
</g>
<g >
<title>__GI___libc_write (48,319,336 samples, 0.01%)</title><rect x="1080.0" y="773" width="0.2" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1083.03" y="783.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__relocate_a_1&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (145,605,024 samples, 0.04%)</title><rect x="1116.0" y="789" width="0.5" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="1119.02" y="799.5" ></text>
</g>
<g >
<title>libcuckoo::cuckoohash_map&lt;long, std::shared_ptr&lt;thrift_response_client&gt;, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, std::shared_ptr&lt;thrift_response_client&gt; &gt; &gt;, 4ul&gt;::TwoBuckets libcuckoo::cuckoohash_map&lt;long, std::shared_ptr&lt;thrift_response_client&gt;, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, std::shared_ptr&lt;thrift_response_client&gt; &gt; &gt;, 4ul&gt;::snapshot_and_lock_two&lt;std::integral_constant&lt;bool, false&gt; &gt; (57,585,733 samples, 0.01%)</title><rect x="1059.2" y="773" width="0.2" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1062.25" y="783.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::__future_base::_State_baseV2&gt; &gt;::construct&lt;std::__future_base::_State_baseV2&gt; (61,259,600 samples, 0.02%)</title><rect x="1096.4" y="517" width="0.2" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="1099.38" y="527.5" ></text>
</g>
<g >
<title>bool libcuckoo::cuckoohash_map&lt;long, std::shared_ptr&lt;thrift_response_client&gt;, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, std::shared_ptr&lt;thrift_response_client&gt; &gt; &gt;, 4ul&gt;::update_fn&lt;long, thrift_response_client_map::async_respond_client (946,306,448 samples, 0.24%)</title><rect x="1059.2" y="789" width="2.9" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="1062.23" y="799.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt;::_Tuple_impl&lt;std::__future_base::_Result_base*&amp;, std::__future_base::_Result_base::_Deleter, void&gt; (38,142,002 samples, 0.01%)</title><rect x="819.3" y="373" width="0.1" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="822.27" y="383.5" ></text>
</g>
<g >
<title>unsigned long std::uniform_int_distribution&lt;unsigned long&gt;::operator (71,733,211 samples, 0.02%)</title><rect x="139.6" y="901" width="0.2" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="142.62" y="911.5" ></text>
</g>
<g >
<title>apache::thrift::concurrency::ThreadManager::Worker::run (8,194,860,335 samples, 2.12%)</title><rect x="1087.5" y="901" width="25.0" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1090.54" y="911.5" >a..</text>
</g>
<g >
<title>cpp_redis::reply* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;cpp_redis::reply const*, std::vector&lt;cpp_redis::reply, std::allocator&lt;cpp_redis::reply&gt; &gt; &gt;, cpp_redis::reply*, cpp_redis::reply&gt; (76,804,207 samples, 0.02%)</title><rect x="922.4" y="661" width="0.3" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="925.43" y="671.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (3,263,515,337 samples, 0.84%)</title><rect x="990.5" y="757" width="10.0" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="993.51" y="767.5" ></text>
</g>
<g >
<title>_int_malloc (1,529,530,198 samples, 0.40%)</title><rect x="895.6" y="581" width="4.7" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="898.59" y="591.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__relocate_a&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (561,459,947 samples, 0.15%)</title><rect x="946.8" y="677" width="1.7" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="949.83" y="687.5" ></text>
</g>
<g >
<title>do_syscall_64 (173,731,394 samples, 0.04%)</title><rect x="201.9" y="693" width="0.6" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="204.93" y="703.5" ></text>
</g>
<g >
<title>void std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_realloc_insert&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (387,166,653 samples, 0.10%)</title><rect x="929.4" y="757" width="1.1" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="932.35" y="767.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;char*&gt;::difference_type std::distance&lt;char*&gt; (84,595,310 samples, 0.02%)</title><rect x="489.7" y="773" width="0.3" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="492.74" y="783.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::push_back (397,987,951 samples, 0.10%)</title><rect x="1058.0" y="805" width="1.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1060.96" y="815.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_create_storage (82,091,495 samples, 0.02%)</title><rect x="902.1" y="661" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="905.13" y="671.5" ></text>
</g>
<g >
<title>_int_free (58,562,230 samples, 0.02%)</title><rect x="1164.1" y="629" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1167.13" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt; &gt;::allocate (82,818,338 samples, 0.02%)</title><rect x="790.5" y="661" width="0.2" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="793.48" y="671.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__future_base::_Result_base::_Deleter&gt;::__uniq_ptr_impl (51,310,227 samples, 0.01%)</title><rect x="470.6" y="501" width="0.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="473.59" y="511.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned_erms (38,666,069 samples, 0.01%)</title><rect x="878.2" y="741" width="0.1" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="881.23" y="751.5" ></text>
</g>
<g >
<title>skb_release_data (35,403,121 samples, 0.01%)</title><rect x="1085.6" y="389" width="0.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1088.59" y="399.5" ></text>
</g>
<g >
<title>std::__atomic_base&lt;int&gt;::operator-- (52,540,410 samples, 0.01%)</title><rect x="453.2" y="773" width="0.1" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="456.15" y="783.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (73,051,909 samples, 0.02%)</title><rect x="434.6" y="709" width="0.2" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="437.59" y="719.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__is_null_pointer&lt;char&gt; (66,008,179 samples, 0.02%)</title><rect x="126.8" y="933" width="0.2" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="129.83" y="943.5" ></text>
</g>
<g >
<title>void std::__relocate_object_a&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (171,387,391 samples, 0.04%)</title><rect x="933.9" y="677" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="936.89" y="687.5" ></text>
</g>
<g >
<title>operator new (55,686,904 samples, 0.01%)</title><rect x="858.1" y="725" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="861.14" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (44,338,899 samples, 0.01%)</title><rect x="435.5" y="693" width="0.1" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="438.50" y="703.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (41,420,592 samples, 0.01%)</title><rect x="1093.5" y="629" width="0.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1096.47" y="639.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_assign (175,328,030 samples, 0.05%)</title><rect x="1104.1" y="741" width="0.5" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="1107.09" y="751.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt;::_M_valptr (163,317,020 samples, 0.04%)</title><rect x="1123.0" y="789" width="0.5" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="1126.01" y="799.5" ></text>
</g>
<g >
<title>operation::~operation (45,627,814 samples, 0.01%)</title><rect x="1102.2" y="757" width="0.1" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="1105.17" y="767.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_capacity (63,258,053 samples, 0.02%)</title><rect x="1160.4" y="677" width="0.2" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="1163.39" y="687.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (16,959,678,223 samples, 4.39%)</title><rect x="641.6" y="709" width="51.8" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="644.59" y="719.5" >void ..</text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (321,449,538 samples, 0.08%)</title><rect x="219.6" y="757" width="1.0" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="222.58" y="767.5" ></text>
</g>
<g >
<title>operator new (69,732,454 samples, 0.02%)</title><rect x="1115.5" y="805" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1118.47" y="815.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::~vector (3,781,072,404 samples, 0.98%)</title><rect x="1029.7" y="789" width="11.6" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1032.72" y="799.5" ></text>
</g>
<g >
<title>cpp_redis::builders::array_builder::operator&lt;&lt; (2,669,391,988 samples, 0.69%)</title><rect x="1065.9" y="789" width="8.2" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="1068.90" y="799.5" ></text>
</g>
<g >
<title>__gnu_cxx::__enable_if&lt;std::__is_char&lt;char&gt;::__value, bool&gt;::__type std::operator==&lt;char&gt; (48,925,753 samples, 0.01%)</title><rect x="427.3" y="677" width="0.2" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="430.31" y="687.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;cpp_redis::reply*, cpp_redis::reply&gt; (352,928,655 samples, 0.09%)</title><rect x="926.5" y="757" width="1.1" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="929.52" y="767.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (145,680,197 samples, 0.04%)</title><rect x="218.0" y="693" width="0.5" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="221.03" y="703.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator= (45,464,153 samples, 0.01%)</title><rect x="1166.5" y="869" width="0.1" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="1169.49" y="879.5" ></text>
</g>
<g >
<title>tcache_get (70,648,960 samples, 0.02%)</title><rect x="872.3" y="677" width="0.2" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="875.25" y="687.5" ></text>
</g>
<g >
<title>malloc_consolidate (100,677,081 samples, 0.03%)</title><rect x="917.3" y="645" width="0.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="920.32" y="655.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (673,040,019 samples, 0.17%)</title><rect x="1176.0" y="821" width="2.1" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1179.02" y="831.5" ></text>
</g>
<g >
<title>___pthread_mutex_unlock (173,189,355 samples, 0.04%)</title><rect x="976.1" y="741" width="0.5" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="979.07" y="751.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::count (289,763,488 samples, 0.07%)</title><rect x="434.0" y="757" width="0.9" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="436.98" y="767.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (166,062,073 samples, 0.04%)</title><rect x="424.3" y="709" width="0.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="427.26" y="719.5" ></text>
</g>
<g >
<title>__dev_queue_xmit (200,404,724 samples, 0.05%)</title><rect x="1060.1" y="293" width="0.6" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="1063.06" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (579,686,077 samples, 0.15%)</title><rect x="885.6" y="709" width="1.8" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="888.61" y="719.5" ></text>
</g>
<g >
<title>sockfd_lookup_light (37,025,758 samples, 0.01%)</title><rect x="1083.4" y="725" width="0.2" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="1086.44" y="735.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::construct&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (99,312,434 samples, 0.03%)</title><rect x="1101.6" y="629" width="0.4" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1104.65" y="639.5" ></text>
</g>
<g >
<title>free@plt (43,791,407 samples, 0.01%)</title><rect x="1077.8" y="805" width="0.2" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="1080.84" y="815.5" ></text>
</g>
<g >
<title>__x64_sys_mprotect (48,084,647 samples, 0.01%)</title><rect x="1104.4" y="597" width="0.2" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="1107.41" y="607.5" ></text>
</g>
<g >
<title>apache::thrift::server::TNonblockingServer::TConnection::eventHandler (395,822,016 samples, 0.10%)</title><rect x="202.9" y="725" width="1.3" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="205.95" y="735.5" ></text>
</g>
<g >
<title>void std::deque&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::_M_push_back_aux&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;&gt; (126,368,542 samples, 0.03%)</title><rect x="902.1" y="741" width="0.4" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="905.13" y="751.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (176,869,090 samples, 0.05%)</title><rect x="832.4" y="677" width="0.6" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="835.41" y="687.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (216,308,890 samples, 0.06%)</title><rect x="207.4" y="661" width="0.6" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="210.35" y="671.5" ></text>
</g>
<g >
<title>do_syscall_64 (47,227,817 samples, 0.01%)</title><rect x="1103.7" y="597" width="0.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1106.74" y="607.5" ></text>
</g>
<g >
<title>record_times (41,920,972 samples, 0.01%)</title><rect x="1088.3" y="597" width="0.2" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="1091.33" y="607.5" ></text>
</g>
<g >
<title>sock_def_readable (125,088,406 samples, 0.03%)</title><rect x="1111.8" y="709" width="0.4" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1114.82" y="719.5" ></text>
</g>
<g >
<title>cpp_redis::reply::reply (502,237,477 samples, 0.13%)</title><rect x="1078.3" y="645" width="1.5" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="1081.30" y="655.5" ></text>
</g>
<g >
<title>operator new (2,013,025,951 samples, 0.52%)</title><rect x="675.2" y="693" width="6.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="678.16" y="703.5" ></text>
</g>
<g >
<title>schedule (90,792,507 samples, 0.02%)</title><rect x="202.0" y="597" width="0.3" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="205.05" y="607.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (40,010,738 samples, 0.01%)</title><rect x="833.1" y="725" width="0.1" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="836.08" y="735.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (252,879,747 samples, 0.07%)</title><rect x="214.2" y="773" width="0.8" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="217.22" y="783.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;, std::_Identity&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt;, bool  (322,253,318 samples, 0.08%)</title><rect x="1122.5" y="805" width="1.0" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1125.53" y="815.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;::pair (25,274,111,652 samples, 6.54%)</title><rect x="616.2" y="725" width="77.2" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="619.21" y="735.5" >std::pai..</text>
</g>
<g >
<title>void std::_Destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (218,409,536 samples, 0.06%)</title><rect x="921.0" y="613" width="0.7" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="924.04" y="623.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::pair (38,396,617 samples, 0.01%)</title><rect x="959.6" y="709" width="0.1" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="962.59" y="719.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_ptr (36,428,663 samples, 0.01%)</title><rect x="502.6" y="725" width="0.1" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="505.63" y="735.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (54,279,957 samples, 0.01%)</title><rect x="1166.3" y="869" width="0.2" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1169.32" y="879.5" ></text>
</g>
<g >
<title>std::mutex::lock (173,298,924 samples, 0.04%)</title><rect x="492.2" y="757" width="0.5" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="495.21" y="767.5" ></text>
</g>
<g >
<title>do_softirq.part.0 (171,017,566 samples, 0.04%)</title><rect x="1060.1" y="261" width="0.5" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1063.07" y="271.5" ></text>
</g>
<g >
<title>_int_free (98,536,176 samples, 0.03%)</title><rect x="1162.7" y="805" width="0.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1165.67" y="815.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; (903,234,917 samples, 0.23%)</title><rect x="817.1" y="581" width="2.8" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="820.11" y="591.5" ></text>
</g>
<g >
<title>cpp_redis::builders::bulk_string_builder::fetch_str (545,527,402 samples, 0.14%)</title><rect x="1067.7" y="741" width="1.7" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="1070.72" y="751.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::construct&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;&gt; (320,095,441 samples, 0.08%)</title><rect x="449.0" y="725" width="1.0" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="452.04" y="735.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (125,961,999 samples, 0.03%)</title><rect x="500.2" y="693" width="0.4" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="503.20" y="703.5" ></text>
</g>
<g >
<title>checked_request2size (38,242,112 samples, 0.01%)</title><rect x="872.1" y="677" width="0.2" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="875.14" y="687.5" ></text>
</g>
<g >
<title>operator new (217,115,422 samples, 0.06%)</title><rect x="1079.1" y="613" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1082.08" y="623.5" ></text>
</g>
<g >
<title>unsigned int apache::thrift::protocol::TBinaryProtocolT&lt;apache::thrift::transport::TTransport, apache::thrift::protocol::TNetworkBigEndian&gt;::readString&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (258,152,200 samples, 0.07%)</title><rect x="1097.8" y="757" width="0.8" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1100.84" y="767.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (40,070,802 samples, 0.01%)</title><rect x="902.4" y="629" width="0.1" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="905.39" y="639.5" ></text>
</g>
<g >
<title>schedule (123,901,103 samples, 0.03%)</title><rect x="1086.5" y="693" width="0.4" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1089.52" y="703.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (164,627,933 samples, 0.04%)</title><rect x="1096.6" y="501" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1099.63" y="511.5" ></text>
</g>
<g >
<title>operator new (47,974,732 samples, 0.01%)</title><rect x="1092.4" y="613" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1095.38" y="623.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare (534,743,605 samples, 0.14%)</title><rect x="824.9" y="661" width="1.6" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="827.86" y="671.5" ></text>
</g>
<g >
<title>__GI___libc_free (85,132,414 samples, 0.02%)</title><rect x="904.7" y="725" width="0.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="907.70" y="735.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_bucket_index (54,085,232 samples, 0.01%)</title><rect x="1009.9" y="741" width="0.1" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="1012.88" y="751.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::~pair (97,510,834 samples, 0.03%)</title><rect x="506.5" y="661" width="0.3" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="509.49" y="671.5" ></text>
</g>
<g >
<title>futex_wake (36,923,557 samples, 0.01%)</title><rect x="1063.2" y="805" width="0.1" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1066.20" y="815.5" ></text>
</g>
<g >
<title>aesni_cbc_encrypt (180,284,732 samples, 0.05%)</title><rect x="842.5" y="693" width="0.5" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="845.49" y="703.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::construct&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (74,929,141 samples, 0.02%)</title><rect x="1101.1" y="741" width="0.2" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="1104.06" y="751.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cpp_redis::reply, std::allocator&lt;cpp_redis::reply&gt; &gt;::_Vector_base (94,577,008 samples, 0.02%)</title><rect x="922.7" y="661" width="0.3" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="925.68" y="671.5" ></text>
</g>
<g >
<title>aesni_cbc_encrypt (45,398,610 samples, 0.01%)</title><rect x="1151.1" y="789" width="0.2" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1154.14" y="799.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (286,550,069 samples, 0.07%)</title><rect x="684.2" y="693" width="0.8" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="687.17" y="703.5" ></text>
</g>
<g >
<title>__x64_sys_futex (48,270,130 samples, 0.01%)</title><rect x="953.3" y="629" width="0.1" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="956.27" y="639.5" ></text>
</g>
<g >
<title>std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::get (1,653,806,758 samples, 0.43%)</title><rect x="1052.7" y="805" width="5.1" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="1055.73" y="815.5" ></text>
</g>
<g >
<title>do_syscall_64 (264,879,197 samples, 0.07%)</title><rect x="1111.4" y="773" width="0.8" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1114.41" y="783.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (178,609,648 samples, 0.05%)</title><rect x="956.8" y="725" width="0.5" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="959.77" y="735.5" ></text>
</g>
<g >
<title>_int_malloc (180,378,202 samples, 0.05%)</title><rect x="1072.6" y="693" width="0.5" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1075.57" y="703.5" ></text>
</g>
<g >
<title>handle_pte_fault (34,100,432 samples, 0.01%)</title><rect x="1115.7" y="709" width="0.1" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1118.68" y="719.5" ></text>
</g>
<g >
<title>_int_malloc (139,493,958 samples, 0.04%)</title><rect x="908.3" y="565" width="0.4" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="911.30" y="575.5" ></text>
</g>
<g >
<title>propagate_protected_usage (36,458,640 samples, 0.01%)</title><rect x="1086.1" y="581" width="0.1" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="1089.13" y="591.5" ></text>
</g>
<g >
<title>arena_for_chunk (281,717,368 samples, 0.07%)</title><rect x="782.7" y="693" width="0.8" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="785.67" y="703.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (170,962,698 samples, 0.04%)</title><rect x="439.6" y="741" width="0.5" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="442.59" y="751.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (53,144,197 samples, 0.01%)</title><rect x="440.3" y="693" width="0.1" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="443.26" y="703.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::~lock_guard (90,284,116 samples, 0.02%)</title><rect x="1118.9" y="853" width="0.3" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="1121.92" y="863.5" ></text>
</g>
<g >
<title>apache::thrift::server::TNonblockingIOThread::notifyHandler (135,502,705 samples, 0.04%)</title><rect x="202.5" y="725" width="0.4" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="205.53" y="735.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (404,618,030 samples, 0.10%)</title><rect x="965.9" y="757" width="1.2" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="968.85" y="767.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__detail::_Identity, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (61,626,308 samples, 0.02%)</title><rect x="1012.3" y="693" width="0.2" height="15.0" fill="rgb(214,41,10)" rx="2" ry="2" />
<text  x="1015.34" y="703.5" ></text>
</g>
<g >
<title>__gthread_mutex_unlock (45,474,488 samples, 0.01%)</title><rect x="1117.2" y="821" width="0.2" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="1120.24" y="831.5" ></text>
</g>
<g >
<title>operator new (1,355,756,638 samples, 0.35%)</title><rect x="196.8" y="901" width="4.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="199.85" y="911.5" ></text>
</g>
<g >
<title>void std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_realloc_insert&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (297,168,197 samples, 0.08%)</title><rect x="138.5" y="901" width="0.9" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="141.49" y="911.5" ></text>
</g>
<g >
<title>aesni_cbc_encrypt (162,996,596 samples, 0.04%)</title><rect x="851.7" y="709" width="0.5" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="854.68" y="719.5" ></text>
</g>
<g >
<title>apache::thrift::protocol::TBinaryProtocolT&lt;apache::thrift::transport::TTransport, apache::thrift::protocol::TNetworkBigEndian&gt;::readMessageBegin (48,282,906 samples, 0.01%)</title><rect x="1089.2" y="805" width="0.1" height="15.0" fill="rgb(211,29,6)" rx="2" ry="2" />
<text  x="1092.19" y="815.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;cpp_redis::client&amp;  (125,407,936 samples, 0.03%)</title><rect x="1162.6" y="837" width="0.4" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1165.63" y="847.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::deallocate (189,764,787 samples, 0.05%)</title><rect x="219.0" y="741" width="0.6" height="15.0" fill="rgb(214,41,10)" rx="2" ry="2" />
<text  x="221.99" y="751.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt; &gt; &gt;::deallocate (105,421,294 samples, 0.03%)</title><rect x="596.2" y="677" width="0.3" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="599.17" y="687.5" ></text>
</g>
<g >
<title>apache::thrift::protocol::TProtocol::readString (263,771,503 samples, 0.07%)</title><rect x="1097.8" y="789" width="0.8" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1100.82" y="799.5" ></text>
</g>
<g >
<title>__gthread_once (2,350,011,571 samples, 0.61%)</title><rect x="465.6" y="741" width="7.1" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="468.57" y="751.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (51,932,849 samples, 0.01%)</title><rect x="463.3" y="597" width="0.2" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="466.31" y="607.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Vector_base (91,753,509 samples, 0.02%)</title><rect x="1029.4" y="773" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1032.42" y="783.5" ></text>
</g>
<g >
<title>void std::__relocate_object_a&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (117,040,198 samples, 0.03%)</title><rect x="1058.6" y="693" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1061.56" y="703.5" ></text>
</g>
<g >
<title>__GI___libc_free (149,334,261 samples, 0.04%)</title><rect x="40.0" y="933" width="0.5" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="43.00" y="943.5" ></text>
</g>
<g >
<title>std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::pair&lt;operation&amp;, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;&amp;, true&gt; (181,491,598 samples, 0.05%)</title><rect x="1094.5" y="741" width="0.5" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="1097.48" y="751.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_set_retrieved_flag (50,176,895 samples, 0.01%)</title><rect x="1095.1" y="709" width="0.2" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1098.12" y="719.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (33,945,745 samples, 0.01%)</title><rect x="1057.9" y="709" width="0.1" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1060.86" y="719.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::push_back (901,876,891 samples, 0.23%)</title><rect x="136.6" y="917" width="2.8" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="139.65" y="927.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_S_equals (75,654,346 samples, 0.02%)</title><rect x="1011.3" y="693" width="0.2" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="1014.31" y="703.5" ></text>
</g>
<g >
<title>__x64_sys_futex (68,679,989 samples, 0.02%)</title><rect x="1093.1" y="581" width="0.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1096.10" y="591.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (54,788,027 samples, 0.01%)</title><rect x="892.6" y="645" width="0.2" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="895.63" y="655.5" ></text>
</g>
<g >
<title>__wake_up (46,034,100 samples, 0.01%)</title><rect x="1112.0" y="629" width="0.1" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="1114.96" y="639.5" ></text>
</g>
<g >
<title>aesni_cbc_cipher (49,905,442 samples, 0.01%)</title><rect x="1151.1" y="805" width="0.2" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="1154.13" y="815.5" ></text>
</g>
<g >
<title>__GI___libc_free (186,275,363 samples, 0.05%)</title><rect x="450.0" y="789" width="0.6" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="453.02" y="799.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (239,402,786 samples, 0.06%)</title><rect x="1159.9" y="709" width="0.8" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="1162.95" y="719.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (1,790,109,021 samples, 0.46%)</title><rect x="753.4" y="677" width="5.4" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="756.35" y="687.5" ></text>
</g>
<g >
<title>__wake_up_common_lock (46,034,100 samples, 0.01%)</title><rect x="1112.0" y="613" width="0.1" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1114.96" y="623.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_assign (94,221,857 samples, 0.02%)</title><rect x="1066.5" y="725" width="0.2" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="1069.46" y="735.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (350,138,869 samples, 0.09%)</title><rect x="535.0" y="645" width="1.1" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="538.03" y="655.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (722,613,012 samples, 0.19%)</title><rect x="474.5" y="725" width="2.2" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="477.45" y="735.5" ></text>
</g>
<g >
<title>operator new (227,252,082 samples, 0.06%)</title><rect x="529.1" y="725" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="532.09" y="735.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_S_check_init_len (132,917,218 samples, 0.03%)</title><rect x="518.3" y="741" width="0.4" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="521.28" y="751.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__is_null_pointer&lt;char&gt; (190,750,715 samples, 0.05%)</title><rect x="751.4" y="693" width="0.6" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="754.39" y="703.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::type const&amp; std::get&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; (33,073,081 samples, 0.01%)</title><rect x="511.4" y="677" width="0.1" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="514.38" y="687.5" ></text>
</g>
<g >
<title>dequeue_task_fair (44,095,342 samples, 0.01%)</title><rect x="458.9" y="501" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="461.94" y="511.5" ></text>
</g>
<g >
<title>apache::thrift::protocol::TBinaryProtocolT&lt;apache::thrift::transport::TTransport, apache::thrift::protocol::TNetworkBigEndian&gt;::writeI32 (140,052,815 samples, 0.04%)</title><rect x="1061.4" y="645" width="0.4" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="1064.38" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (4,084,190,435 samples, 1.06%)</title><rect x="563.8" y="709" width="12.4" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="566.77" y="719.5" ></text>
</g>
<g >
<title>std::mutex::lock (229,177,541 samples, 0.06%)</title><rect x="975.0" y="773" width="0.7" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="978.00" y="783.5" ></text>
</g>
<g >
<title>void std::__cxx11::list&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_insert&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (716,487,266 samples, 0.19%)</title><rect x="525.0" y="757" width="2.2" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="528.04" y="767.5" ></text>
</g>
<g >
<title>dequeue_task (50,144,134 samples, 0.01%)</title><rect x="1054.2" y="565" width="0.2" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="1057.22" y="575.5" ></text>
</g>
<g >
<title>do_syscall_64 (400,103,186 samples, 0.10%)</title><rect x="1059.8" y="581" width="1.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1062.80" y="591.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (62,454,905 samples, 0.02%)</title><rect x="1096.0" y="597" width="0.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1098.95" y="607.5" ></text>
</g>
<g >
<title>__wake_up_common (41,924,497 samples, 0.01%)</title><rect x="1112.0" y="597" width="0.1" height="15.0" fill="rgb(248,197,47)" rx="2" ry="2" />
<text  x="1114.96" y="607.5" ></text>
</g>
<g >
<title>dequeue_entity (44,041,199 samples, 0.01%)</title><rect x="1054.2" y="533" width="0.2" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1057.22" y="543.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;* std::__relocate_a_1&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;*, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;*, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; (472,708,681 samples, 0.12%)</title><rect x="959.8" y="677" width="1.4" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="962.77" y="687.5" ></text>
</g>
<g >
<title>ip_local_deliver (65,045,447 samples, 0.02%)</title><rect x="1085.4" y="325" width="0.2" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1088.37" y="335.5" ></text>
</g>
<g >
<title>cpp_redis::network::redis_connection::build_command (713,882,731 samples, 0.18%)</title><rect x="905.0" y="677" width="2.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="908.02" y="687.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (395,688,564 samples, 0.10%)</title><rect x="211.5" y="741" width="1.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="214.50" y="751.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (36,626,031 samples, 0.01%)</title><rect x="1178.2" y="757" width="0.1" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1181.22" y="767.5" ></text>
</g>
<g >
<title>HMAC_CTX_reset (958,068,362 samples, 0.25%)</title><rect x="863.9" y="725" width="2.9" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="866.87" y="735.5" ></text>
</g>
<g >
<title>cpp_redis::network::redis_connection::commit (244,864,896 samples, 0.06%)</title><rect x="205.0" y="757" width="0.7" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="207.97" y="767.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (504,243,852 samples, 0.13%)</title><rect x="857.5" y="773" width="1.5" height="15.0" fill="rgb(218,59,14)" rx="2" ry="2" />
<text  x="860.49" y="783.5" ></text>
</g>
<g >
<title>ip_local_out (200,404,724 samples, 0.05%)</title><rect x="1060.1" y="389" width="0.6" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1063.06" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (142,897,723 samples, 0.04%)</title><rect x="531.5" y="725" width="0.4" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="534.47" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__detail::_Identity, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (33,488,745 samples, 0.01%)</title><rect x="1009.9" y="725" width="0.1" height="15.0" fill="rgb(214,41,10)" rx="2" ry="2" />
<text  x="1012.95" y="735.5" ></text>
</g>
<g >
<title>__sk_mem_schedule (64,226,889 samples, 0.02%)</title><rect x="1086.1" y="661" width="0.2" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1089.08" y="671.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt;, bool&gt;::pair&lt;std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt;, bool, true&gt; (40,935,931 samples, 0.01%)</title><rect x="793.1" y="741" width="0.1" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="796.07" y="751.5" ></text>
</g>
<g >
<title>_int_free (74,067,356 samples, 0.02%)</title><rect x="206.1" y="725" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="209.10" y="735.5" ></text>
</g>
<g >
<title>std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::set_value (3,098,339,732 samples, 0.80%)</title><rect x="464.6" y="789" width="9.4" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="467.56" y="799.5" ></text>
</g>
<g >
<title>void std::iter_swap&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; (213,311,192 samples, 0.06%)</title><rect x="139.8" y="901" width="0.7" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="142.84" y="911.5" ></text>
</g>
<g >
<title>do_anonymous_page (73,308,217 samples, 0.02%)</title><rect x="1142.6" y="581" width="0.3" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1145.64" y="591.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, true&gt; &gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (210,812,275 samples, 0.05%)</title><rect x="437.4" y="709" width="0.6" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="440.37" y="719.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (1,524,160,177 samples, 0.39%)</title><rect x="1020.3" y="773" width="4.6" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="1023.27" y="783.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::~pair (124,982,023 samples, 0.03%)</title><rect x="884.9" y="661" width="0.4" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="887.95" y="671.5" ></text>
</g>
<g >
<title>simple_copy_to_iter (37,973,678 samples, 0.01%)</title><rect x="1083.1" y="629" width="0.1" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="1086.13" y="639.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (487,231,143 samples, 0.13%)</title><rect x="685.0" y="693" width="1.5" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="688.05" y="703.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (194,222,073 samples, 0.05%)</title><rect x="209.7" y="693" width="0.6" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="212.71" y="703.5" ></text>
</g>
<g >
<title>__GI___libc_free (119,013,074 samples, 0.03%)</title><rect x="816.3" y="565" width="0.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="819.27" y="575.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;char*&gt;::difference_type std::distance&lt;char*&gt; (47,359,342 samples, 0.01%)</title><rect x="478.9" y="645" width="0.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="481.87" y="655.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (502,989,805 samples, 0.13%)</title><rect x="720.3" y="677" width="1.5" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="723.28" y="687.5" ></text>
</g>
<g >
<title>do_syscall_64 (36,923,557 samples, 0.01%)</title><rect x="1063.2" y="773" width="0.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1066.20" y="783.5" ></text>
</g>
<g >
<title>__GI___libc_free (147,997,703 samples, 0.04%)</title><rect x="792.5" y="709" width="0.5" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="795.53" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (178,063,999 samples, 0.05%)</title><rect x="989.1" y="709" width="0.5" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="992.05" y="719.5" ></text>
</g>
<g >
<title>skb_page_frag_refill (66,481,230 samples, 0.02%)</title><rect x="1084.7" y="661" width="0.2" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="1087.66" y="671.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (47,974,732 samples, 0.01%)</title><rect x="1092.4" y="597" width="0.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1095.38" y="607.5" ></text>
</g>
<g >
<title>__handle_mm_fault (40,994,143 samples, 0.01%)</title><rect x="1161.4" y="597" width="0.1" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1164.40" y="607.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__relocate_a&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (979,835,015 samples, 0.25%)</title><rect x="1026.3" y="725" width="2.9" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="1029.25" y="735.5" ></text>
</g>
<g >
<title>void std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::emplace_back&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (243,395,855 samples, 0.06%)</title><rect x="1164.6" y="837" width="0.8" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1167.61" y="847.5" ></text>
</g>
<g >
<title>do_syscall_64 (360,529,467 samples, 0.09%)</title><rect x="1087.8" y="725" width="1.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1090.76" y="735.5" ></text>
</g>
<g >
<title>__napi_poll (142,082,924 samples, 0.04%)</title><rect x="1060.1" y="213" width="0.4" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="1063.08" y="223.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (92,110,577 samples, 0.02%)</title><rect x="806.6" y="677" width="0.3" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="809.58" y="687.5" ></text>
</g>
<g >
<title>operator new (63,039,802 samples, 0.02%)</title><rect x="1103.1" y="613" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1106.07" y="623.5" ></text>
</g>
<g >
<title>EVP_MD_CTX_copy_ex (283,942,831 samples, 0.07%)</title><rect x="867.7" y="725" width="0.9" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="870.72" y="735.5" ></text>
</g>
<g >
<title>__GI___libc_free (137,263,900 samples, 0.04%)</title><rect x="1056.0" y="645" width="0.4" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1059.01" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt; &gt;::deallocate (78,659,609 samples, 0.02%)</title><rect x="596.3" y="661" width="0.2" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="599.25" y="671.5" ></text>
</g>
<g >
<title>apache::thrift::server::TNonblockingServer::TConnection::workSocket (392,026,412 samples, 0.10%)</title><rect x="203.0" y="709" width="1.2" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="205.96" y="719.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (111,741,659 samples, 0.03%)</title><rect x="536.4" y="709" width="0.4" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="539.43" y="719.5" ></text>
</g>
<g >
<title>__GI___futex_abstimed_wait_cancelable64 (250,428,156 samples, 0.06%)</title><rect x="1086.3" y="837" width="0.8" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1089.35" y="847.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::data (128,345,861 samples, 0.03%)</title><rect x="84.1" y="933" width="0.3" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="87.05" y="943.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (186,195,783 samples, 0.05%)</title><rect x="1146.3" y="789" width="0.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="1149.25" y="799.5" ></text>
</g>
<g >
<title>__GI___pthread_mutex_unlock_usercnt (116,222,765 samples, 0.03%)</title><rect x="492.8" y="709" width="0.4" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="495.84" y="719.5" ></text>
</g>
<g >
<title>[[heap]] (6,688,014,212 samples, 1.73%)</title><rect x="18.8" y="949" width="20.4" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="21.78" y="959.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::~pair (96,520,897 samples, 0.02%)</title><rect x="503.8" y="709" width="0.3" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="506.78" y="719.5" ></text>
</g>
<g >
<title>do_futex (37,186,228 samples, 0.01%)</title><rect x="1093.5" y="581" width="0.1" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1096.48" y="591.5" ></text>
</g>
<g >
<title>__x64_sys_futex (188,577,906 samples, 0.05%)</title><rect x="459.8" y="613" width="0.6" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="462.82" y="623.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (50,582,738 samples, 0.01%)</title><rect x="91.9" y="933" width="0.1" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="94.87" y="943.5" ></text>
</g>
<g >
<title>waffle_thrift_async_get_batch_args::read (781,778,110 samples, 0.20%)</title><rect x="1097.7" y="805" width="2.4" height="15.0" fill="rgb(216,54,12)" rx="2" ry="2" />
<text  x="1100.69" y="815.5" ></text>
</g>
<g >
<title>handle_pte_fault (90,081,862 samples, 0.02%)</title><rect x="139.0" y="677" width="0.2" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="141.97" y="687.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (116,822,530 samples, 0.03%)</title><rect x="966.7" y="741" width="0.4" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="969.73" y="751.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (263,565,282 samples, 0.07%)</title><rect x="901.1" y="597" width="0.8" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="904.07" y="607.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_get_node (352,791,698 samples, 0.09%)</title><rect x="525.6" y="725" width="1.0" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="528.55" y="735.5" ></text>
</g>
<g >
<title>__libc_recv (63,046,455 samples, 0.02%)</title><rect x="204.0" y="677" width="0.2" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="206.96" y="687.5" ></text>
</g>
<g >
<title>tacopie::tcp_client::async_read (85,106,187 samples, 0.02%)</title><rect x="1080.0" y="805" width="0.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1083.01" y="815.5" ></text>
</g>
<g >
<title>EVP_EncryptUpdate (46,837,618 samples, 0.01%)</title><rect x="39.6" y="933" width="0.2" height="15.0" fill="rgb(248,197,47)" rx="2" ry="2" />
<text  x="42.65" y="943.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (176,783,463 samples, 0.05%)</title><rect x="488.6" y="757" width="0.6" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="491.63" y="767.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::allocate (90,105,903 samples, 0.02%)</title><rect x="933.5" y="709" width="0.3" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="936.48" y="719.5" ></text>
</g>
<g >
<title>unlink_chunk (72,426,815 samples, 0.02%)</title><rect x="865.5" y="661" width="0.2" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="868.50" y="671.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (347,449,694 samples, 0.09%)</title><rect x="931.2" y="741" width="1.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="934.20" y="751.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (7,474,041,481 samples, 1.93%)</title><rect x="1063.5" y="885" width="22.8" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1066.47" y="895.5" >s..</text>
</g>
<g >
<title>ip_queue_xmit (39,855,310 samples, 0.01%)</title><rect x="1085.9" y="629" width="0.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1088.88" y="639.5" ></text>
</g>
<g >
<title>std::queue&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::deque&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::empty (57,839,629 samples, 0.01%)</title><rect x="456.8" y="773" width="0.1" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="459.75" y="783.5" ></text>
</g>
<g >
<title>psi_task_switch (60,370,187 samples, 0.02%)</title><rect x="1054.4" y="565" width="0.2" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1057.45" y="575.5" ></text>
</g>
<g >
<title>__ip_finish_output (33,368,745 samples, 0.01%)</title><rect x="1085.9" y="549" width="0.1" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1088.89" y="559.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (49,894,750 samples, 0.01%)</title><rect x="26.3" y="917" width="0.2" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="29.33" y="927.5" ></text>
</g>
<g >
<title>__GI___libc_free (61,396,553 samples, 0.02%)</title><rect x="885.0" y="645" width="0.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="888.01" y="655.5" ></text>
</g>
<g >
<title>futex_hash (47,749,202 samples, 0.01%)</title><rect x="466.8" y="629" width="0.1" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="469.80" y="639.5" ></text>
</g>
<g >
<title>std::mutex::lock (35,446,884 samples, 0.01%)</title><rect x="425.2" y="757" width="0.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="428.22" y="767.5" ></text>
</g>
<g >
<title>__gthread_mutex_unlock (44,428,881 samples, 0.01%)</title><rect x="829.2" y="741" width="0.1" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="832.18" y="751.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (238,275,447 samples, 0.06%)</title><rect x="1086.4" y="789" width="0.7" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1089.37" y="799.5" ></text>
</g>
<g >
<title>HMAC_CTX_free (1,068,283,669 samples, 0.28%)</title><rect x="860.1" y="741" width="3.2" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="863.07" y="751.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (255,180,654 samples, 0.07%)</title><rect x="449.2" y="677" width="0.8" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="452.24" y="687.5" ></text>
</g>
<g >
<title>__napi_poll (71,753,371 samples, 0.02%)</title><rect x="1085.4" y="405" width="0.2" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="1088.36" y="415.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (44,857,580 samples, 0.01%)</title><rect x="1095.3" y="661" width="0.1" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1098.31" y="671.5" ></text>
</g>
<g >
<title>operator new (62,258,316 samples, 0.02%)</title><rect x="891.8" y="677" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="894.82" y="687.5" ></text>
</g>
<g >
<title>_int_malloc (452,616,831 samples, 0.12%)</title><rect x="475.0" y="677" width="1.4" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="478.03" y="687.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (159,047,490 samples, 0.04%)</title><rect x="1028.5" y="677" width="0.5" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1031.54" y="687.5" ></text>
</g>
<g >
<title>pollwake (37,909,472 samples, 0.01%)</title><rect x="1082.9" y="645" width="0.1" height="15.0" fill="rgb(238,154,37)" rx="2" ry="2" />
<text  x="1085.86" y="655.5" ></text>
</g>
<g >
<title>SHA256_Update (65,060,193 samples, 0.02%)</title><rect x="116.8" y="933" width="0.2" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="119.76" y="943.5" ></text>
</g>
<g >
<title>__handle_mm_fault (41,294,646 samples, 0.01%)</title><rect x="1157.8" y="741" width="0.1" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1160.81" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (43,184,771 samples, 0.01%)</title><rect x="823.5" y="693" width="0.1" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="826.50" y="703.5" ></text>
</g>
<g >
<title>_int_free (157,476,808 samples, 0.04%)</title><rect x="861.5" y="693" width="0.5" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="864.51" y="703.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::__future_base::_State_baseV2&gt; &gt;::destroy&lt;std::__future_base::_State_baseV2&gt; (288,186,475 samples, 0.07%)</title><rect x="1056.5" y="693" width="0.9" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1059.53" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (989,979,251 samples, 0.26%)</title><rect x="983.0" y="725" width="3.1" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="986.03" y="735.5" ></text>
</g>
<g >
<title>operator new (164,627,933 samples, 0.04%)</title><rect x="1096.6" y="485" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1099.63" y="495.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (7,472,455,652 samples, 1.93%)</title><rect x="618.8" y="709" width="22.8" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="621.78" y="719.5" >s..</text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (67,951,189 samples, 0.02%)</title><rect x="874.7" y="725" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="877.69" y="735.5" ></text>
</g>
<g >
<title>___pthread_mutex_lock (274,220,893 samples, 0.07%)</title><rect x="458.5" y="709" width="0.8" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="461.47" y="719.5" ></text>
</g>
<g >
<title> (17,648,603,679 samples, 4.57%)</title><rect x="350.9" y="789" width="53.9" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="353.93" y="799.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::_List_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::allocate (149,619,566 samples, 0.04%)</title><rect x="432.3" y="693" width="0.5" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="435.31" y="703.5" ></text>
</g>
<g >
<title>ip_finish_output2 (114,100,136 samples, 0.03%)</title><rect x="1085.3" y="517" width="0.4" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1088.35" y="527.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;::operator[] (68,465,496 samples, 0.02%)</title><rect x="431.2" y="773" width="0.2" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="434.17" y="783.5" ></text>
</g>
<g >
<title>arena_for_chunk (44,925,137 samples, 0.01%)</title><rect x="220.4" y="709" width="0.2" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="223.41" y="719.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (33,340,793 samples, 0.01%)</title><rect x="1052.3" y="789" width="0.1" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="1055.34" y="799.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; (782,357,572 samples, 0.20%)</title><rect x="954.0" y="757" width="2.4" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="957.03" y="767.5" ></text>
</g>
<g >
<title>cpp_redis::client::del (2,290,745,259 samples, 0.59%)</title><rect x="205.7" y="789" width="7.0" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="208.72" y="799.5" ></text>
</g>
<g >
<title>default_wake_function (37,909,472 samples, 0.01%)</title><rect x="1082.9" y="629" width="0.1" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1085.86" y="639.5" ></text>
</g>
<g >
<title>std::__atomic_futex_unsigned_base::_M_futex_wait_until (56,618,046 samples, 0.01%)</title><rect x="953.3" y="693" width="0.1" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="956.27" y="703.5" ></text>
</g>
<g >
<title>operation::~operation (76,082,597 samples, 0.02%)</title><rect x="457.8" y="693" width="0.3" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="460.84" y="703.5" ></text>
</g>
<g >
<title>arena_for_chunk (352,923,123 samples, 0.09%)</title><rect x="704.6" y="677" width="1.0" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="707.55" y="687.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::~_State_baseV2 (288,186,475 samples, 0.07%)</title><rect x="1056.5" y="661" width="0.9" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="1059.53" y="671.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (47,196,656 samples, 0.01%)</title><rect x="1086.9" y="757" width="0.2" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="1089.94" y="767.5" ></text>
</g>
<g >
<title>__ip_finish_output (121,704,757 samples, 0.03%)</title><rect x="1085.3" y="533" width="0.4" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1088.32" y="543.5" ></text>
</g>
<g >
<title>HMAC_Final (602,663,141 samples, 0.16%)</title><rect x="866.8" y="741" width="1.8" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="869.80" y="751.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (3,616,352,951 samples, 0.94%)</title><rect x="1041.3" y="789" width="11.0" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1044.30" y="799.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare (126,812,479 samples, 0.03%)</title><rect x="800.7" y="661" width="0.3" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="803.65" y="671.5" ></text>
</g>
<g >
<title>unlink_chunk (43,299,491 samples, 0.01%)</title><rect x="952.8" y="693" width="0.1" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="955.75" y="703.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::~vector (511,911,207 samples, 0.13%)</title><rect x="957.6" y="645" width="1.6" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="960.63" y="655.5" ></text>
</g>
<g >
<title>malloc_consolidate (63,949,977 samples, 0.02%)</title><rect x="404.9" y="693" width="0.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="407.91" y="703.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (204,408,127 samples, 0.05%)</title><rect x="915.9" y="757" width="0.6" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="918.92" y="767.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (45,082,651 samples, 0.01%)</title><rect x="1159.6" y="741" width="0.2" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1162.64" y="751.5" ></text>
</g>
<g >
<title>___pthread_mutex_lock (58,391,719 samples, 0.02%)</title><rect x="578.1" y="725" width="0.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="581.15" y="735.5" ></text>
</g>
<g >
<title>operator new (98,128,242 samples, 0.03%)</title><rect x="1098.3" y="693" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1101.27" y="703.5" ></text>
</g>
<g >
<title>std::call_once&lt;void  (881,098,283 samples, 0.23%)</title><rect x="808.9" y="661" width="2.7" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="811.91" y="671.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (140,471,527 samples, 0.04%)</title><rect x="1096.7" y="469" width="0.4" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1099.71" y="479.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (67,117,880 samples, 0.02%)</title><rect x="833.7" y="677" width="0.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="836.72" y="687.5" ></text>
</g>
<g >
<title>kmem_cache_alloc_node (47,231,001 samples, 0.01%)</title><rect x="1111.7" y="661" width="0.1" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="1114.67" y="671.5" ></text>
</g>
<g >
<title>memcmp@plt (44,968,941 samples, 0.01%)</title><rect x="1122.4" y="757" width="0.1" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1125.39" y="767.5" ></text>
</g>
<g >
<title>lll_mutex_unlock_optimized (70,072,834 samples, 0.02%)</title><rect x="527.8" y="693" width="0.2" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="530.77" y="703.5" ></text>
</g>
<g >
<title>__GI___libc_free (309,035,748 samples, 0.08%)</title><rect x="219.6" y="725" width="1.0" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="222.61" y="735.5" ></text>
</g>
<g >
<title>void std::deque&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_push_back_aux&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; (92,470,437 samples, 0.02%)</title><rect x="1092.6" y="693" width="0.2" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="1095.57" y="703.5" ></text>
</g>
<g >
<title>_int_malloc (365,820,608 samples, 0.09%)</title><rect x="970.9" y="725" width="1.1" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="973.85" y="735.5" ></text>
</g>
<g >
<title>EVP_MD_CTX_reset (479,760,930 samples, 0.12%)</title><rect x="860.7" y="725" width="1.4" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="863.68" y="735.5" ></text>
</g>
<g >
<title>tcache_get (46,670,903 samples, 0.01%)</title><rect x="966.6" y="709" width="0.1" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="969.59" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash (35,377,084 samples, 0.01%)</title><rect x="801.4" y="725" width="0.1" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="804.36" y="735.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::deallocate (2,330,854,987 samples, 0.60%)</title><rect x="1030.3" y="741" width="7.1" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1033.29" y="751.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (83,915,741 samples, 0.02%)</title><rect x="217.7" y="741" width="0.3" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="220.72" y="751.5" ></text>
</g>
<g >
<title>__gthread_mutex_lock (71,533,959 samples, 0.02%)</title><rect x="578.1" y="741" width="0.3" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="581.15" y="751.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (529,889,389 samples, 0.14%)</title><rect x="965.5" y="773" width="1.6" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="968.47" y="783.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::pair&lt;int, std::pair&lt;sequence_id const&amp;, std::vector&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::construct&lt;std::pair&lt;int, std::pair&lt;sequence_id const&amp;, std::vector&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::pair&lt;int, std::pair&lt;sequence_id const&amp;, std::vector&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; (68,481,562 samples, 0.02%)</title><rect x="1100.5" y="693" width="0.2" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="1103.51" y="703.5" ></text>
</g>
<g >
<title>__random (195,913,425 samples, 0.05%)</title><rect x="856.9" y="757" width="0.6" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="859.87" y="767.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (48,925,753 samples, 0.01%)</title><rect x="427.3" y="693" width="0.2" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="430.31" y="703.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (358,818,880 samples, 0.09%)</title><rect x="905.8" y="661" width="1.1" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="908.79" y="671.5" ></text>
</g>
<g >
<title> (33,028,911 samples, 0.01%)</title><rect x="92.3" y="917" width="0.1" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="95.31" y="927.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (98,661,490 samples, 0.03%)</title><rect x="1164.8" y="741" width="0.3" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1167.77" y="751.5" ></text>
</g>
<g >
<title>EVP_CIPHER_CTX_free (118,393,809 samples, 0.03%)</title><rect x="849.0" y="741" width="0.4" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="852.04" y="751.5" ></text>
</g>
<g >
<title>HMAC_CTX_free (46,320,896 samples, 0.01%)</title><rect x="48.5" y="933" width="0.2" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="51.54" y="943.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt; &gt;::allocate (1,167,336,024 samples, 0.30%)</title><rect x="992.3" y="709" width="3.6" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="995.33" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_v (42,554,183 samples, 0.01%)</title><rect x="983.5" y="709" width="0.1" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="986.49" y="719.5" ></text>
</g>
<g >
<title>std::mutex::unlock (44,428,881 samples, 0.01%)</title><rect x="829.2" y="757" width="0.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="832.18" y="767.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned_erms (43,253,456 samples, 0.01%)</title><rect x="112.9" y="933" width="0.1" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="115.91" y="943.5" ></text>
</g>
<g >
<title>operator new (217,212,147 samples, 0.06%)</title><rect x="211.8" y="677" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="214.81" y="687.5" ></text>
</g>
<g >
<title>exit_to_user_mode_prepare (47,196,656 samples, 0.01%)</title><rect x="1086.9" y="741" width="0.2" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1089.94" y="751.5" ></text>
</g>
<g >
<title>__GI___libc_free (64,907,129 samples, 0.02%)</title><rect x="939.4" y="661" width="0.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="942.36" y="671.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__is_null_pointer&lt;char&gt; (263,674,298 samples, 0.07%)</title><rect x="24.5" y="933" width="0.8" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="27.54" y="943.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::lock_guard (36,016,087 samples, 0.01%)</title><rect x="1118.8" y="853" width="0.1" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1121.81" y="863.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__future_base::_Result_base::_Deleter&gt;::~unique_ptr (47,610,882 samples, 0.01%)</title><rect x="810.0" y="549" width="0.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="813.04" y="559.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cpp_redis::reply, std::allocator&lt;cpp_redis::reply&gt; &gt;::_Vector_base (93,545,081 samples, 0.02%)</title><rect x="1078.5" y="613" width="0.3" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1081.54" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_valptr (76,456,069 samples, 0.02%)</title><rect x="1003.5" y="725" width="0.3" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="1006.54" y="735.5" ></text>
</g>
<g >
<title>futex_wake (599,977,403 samples, 0.16%)</title><rect x="466.9" y="629" width="1.9" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="469.95" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::vector (847,005,030 samples, 0.22%)</title><rect x="942.7" y="693" width="2.6" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="945.68" y="703.5" ></text>
</g>
<g >
<title>void std::vector&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::emplace_back&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (342,662,668 samples, 0.09%)</title><rect x="1101.0" y="757" width="1.0" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="1103.98" y="767.5" ></text>
</g>
<g >
<title>waffle_proxy::consumer_thread (272,534,266,215 samples, 70.50%)</title><rect x="220.6" y="821" width="831.8" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="223.59" y="831.5" >waffle_proxy::consumer_thread</text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (190,551,705 samples, 0.05%)</title><rect x="1181.8" y="869" width="0.5" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1184.75" y="879.5" ></text>
</g>
<g >
<title>cpp_redis::client::send (1,296,210,126 samples, 0.34%)</title><rect x="905.0" y="725" width="3.9" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="907.96" y="735.5" ></text>
</g>
<g >
<title>EVP_CIPHER_CTX_cipher (33,834,614 samples, 0.01%)</title><rect x="46.3" y="933" width="0.1" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="49.31" y="943.5" ></text>
</g>
<g >
<title>void std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_realloc_insert&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (156,132,048 samples, 0.04%)</title><rect x="1161.1" y="805" width="0.5" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="1164.14" y="815.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp; std::__get_helper&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (41,777,975 samples, 0.01%)</title><rect x="892.8" y="629" width="0.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="895.80" y="639.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (188,023,430 samples, 0.05%)</title><rect x="947.5" y="629" width="0.6" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="950.53" y="639.5" ></text>
</g>
<g >
<title>operator new (810,363,239 samples, 0.21%)</title><rect x="1021.8" y="725" width="2.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1024.84" y="735.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::~pair (144,077,514 samples, 0.04%)</title><rect x="524.4" y="709" width="0.5" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="527.43" y="719.5" ></text>
</g>
<g >
<title>dequeue_task_fair (49,306,296 samples, 0.01%)</title><rect x="1062.6" y="693" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1065.61" y="703.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node_base*&gt;::allocate (34,016,703 samples, 0.01%)</title><rect x="988.9" y="661" width="0.1" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="991.87" y="671.5" ></text>
</g>
<g >
<title>void std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_realloc_insert&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (605,358,125 samples, 0.16%)</title><rect x="946.7" y="725" width="1.9" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="949.74" y="735.5" ></text>
</g>
<g >
<title>EVP_MD_CTX_new (66,443,745 samples, 0.02%)</title><rect x="866.5" y="709" width="0.2" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="869.50" y="719.5" ></text>
</g>
<g >
<title>schedule (75,824,688 samples, 0.02%)</title><rect x="458.9" y="549" width="0.3" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="461.94" y="559.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (41,294,646 samples, 0.01%)</title><rect x="1157.8" y="805" width="0.1" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1160.81" y="815.5" ></text>
</g>
<g >
<title>__GI___libc_free (99,885,661 samples, 0.03%)</title><rect x="211.0" y="677" width="0.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="214.04" y="687.5" ></text>
</g>
<g >
<title>operation* std::__uninitialized_move_if_noexcept_a&lt;operation*, operation*, std::allocator&lt;operation&gt; &gt; (777,475,351 samples, 0.20%)</title><rect x="476.7" y="757" width="2.3" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="479.67" y="767.5" ></text>
</g>
<g >
<title>ksys_write (110,776,464 samples, 0.03%)</title><rect x="1082.7" y="741" width="0.3" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="1085.68" y="751.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (423,740,563 samples, 0.11%)</title><rect x="516.8" y="693" width="1.3" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="519.83" y="703.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (797,739,029 samples, 0.21%)</title><rect x="1021.9" y="709" width="2.4" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1024.86" y="719.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare (210,542,854 samples, 0.05%)</title><rect x="985.4" y="677" width="0.6" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="988.40" y="687.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_insert_unique_node (554,992,338 samples, 0.14%)</title><rect x="1011.5" y="741" width="1.7" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="1014.54" y="751.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__detail::_Node_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true, true&gt;, bool&gt; std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_insert&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt; &gt; (1,921,855,934 samples, 0.50%)</title><rect x="1009.6" y="757" width="5.8" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1012.57" y="767.5" ></text>
</g>
<g >
<title>do_user_addr_fault (49,966,537 samples, 0.01%)</title><rect x="1161.4" y="629" width="0.1" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1164.39" y="639.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, true&gt; &gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (447,584,084 samples, 0.12%)</title><rect x="444.2" y="709" width="1.4" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="447.21" y="719.5" ></text>
</g>
<g >
<title>std::_Identity&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt;::operator (139,954,260 samples, 0.04%)</title><rect x="724.6" y="709" width="0.4" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="727.60" y="719.5" ></text>
</g>
<g >
<title>__handle_mm_fault (54,058,358 samples, 0.01%)</title><rect x="1159.1" y="629" width="0.2" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1162.12" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::_List_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::allocate (323,266,689 samples, 0.08%)</title><rect x="525.6" y="693" width="1.0" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="528.64" y="703.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (59,047,181 samples, 0.02%)</title><rect x="1165.1" y="725" width="0.2" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="1168.12" y="735.5" ></text>
</g>
<g >
<title>do_futex (575,514,396 samples, 0.15%)</title><rect x="807.0" y="629" width="1.7" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="809.95" y="639.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;&amp;, std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;*&gt;::_Deque_iterator (36,667,846 samples, 0.01%)</title><rect x="457.0" y="725" width="0.2" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="460.04" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (302,571,403 samples, 0.08%)</title><rect x="509.9" y="693" width="0.9" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="512.91" y="703.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr (52,894,017 samples, 0.01%)</title><rect x="471.6" y="517" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="474.60" y="527.5" ></text>
</g>
<g >
<title>update_load_avg (37,098,182 samples, 0.01%)</title><rect x="1086.7" y="613" width="0.1" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1089.68" y="623.5" ></text>
</g>
<g >
<title>std::mutex::unlock (106,916,783 samples, 0.03%)</title><rect x="527.7" y="757" width="0.3" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="530.66" y="767.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::~_Vector_base (63,039,362 samples, 0.02%)</title><rect x="1164.1" y="709" width="0.2" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1167.12" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (1,071,497,012 samples, 0.28%)</title><rect x="560.4" y="693" width="3.3" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="563.44" y="703.5" ></text>
</g>
<g >
<title>FrequencySmoother::getFrequency (13,282,719,433 samples, 3.44%)</title><rect x="537.2" y="789" width="40.5" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="540.17" y="799.5" >Fre..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (260,085,196 samples, 0.07%)</title><rect x="1187.9" y="949" width="0.8" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1190.90" y="959.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (434,353,673 samples, 0.11%)</title><rect x="801.5" y="725" width="1.3" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="804.48" y="735.5" ></text>
</g>
<g >
<title>__x64_sys_epoll_wait (153,410,062 samples, 0.04%)</title><rect x="201.9" y="677" width="0.5" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="204.93" y="687.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct (49,715,012 samples, 0.01%)</title><rect x="906.9" y="661" width="0.1" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="909.88" y="671.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (34,849,013 samples, 0.01%)</title><rect x="1109.0" y="677" width="0.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1111.99" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;::_M_v (105,419,515 samples, 0.03%)</title><rect x="802.8" y="741" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="805.81" y="751.5" ></text>
</g>
<g >
<title>operator new (431,029,276 samples, 0.11%)</title><rect x="1098.7" y="709" width="1.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1101.74" y="719.5" ></text>
</g>
<g >
<title>__gthread_mutex_unlock (94,979,976 samples, 0.02%)</title><rect x="882.6" y="741" width="0.3" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="885.61" y="751.5" ></text>
</g>
<g >
<title>EVP_DigestInit_ex (104,335,969 samples, 0.03%)</title><rect x="1154.6" y="805" width="0.3" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="1157.61" y="815.5" ></text>
</g>
<g >
<title>cpp_redis::network::tcp_client::async_read (90,126,195 samples, 0.02%)</title><rect x="1080.0" y="821" width="0.3" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="1082.99" y="831.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (91,284,750 samples, 0.02%)</title><rect x="1142.6" y="677" width="0.3" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1145.64" y="687.5" ></text>
</g>
<g >
<title>void std::_Rb_tree&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;, std::_Identity&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt;, bool  (190,973,251 samples, 0.05%)</title><rect x="790.7" y="693" width="0.6" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="793.74" y="703.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::construct&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;&gt; (40,140,521 samples, 0.01%)</title><rect x="834.6" y="725" width="0.2" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="837.64" y="735.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::~vector (163,460,393 samples, 0.04%)</title><rect x="211.0" y="757" width="0.5" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="214.00" y="767.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_S_do_relocate (156,132,048 samples, 0.04%)</title><rect x="1161.1" y="773" width="0.5" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1164.14" y="783.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;  (698,308,258 samples, 0.18%)</title><rect x="469.6" y="597" width="2.2" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="472.63" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (177,364,030 samples, 0.05%)</title><rect x="1117.8" y="805" width="0.6" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="1120.82" y="815.5" ></text>
</g>
<g >
<title>cpp_redis::network::redis_connection::build_command (98,468,581 samples, 0.03%)</title><rect x="67.7" y="933" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="70.74" y="943.5" ></text>
</g>
<g >
<title>cpp_redis::client::mset (1,969,748,151 samples, 0.51%)</title><rect x="1157.1" y="853" width="6.0" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1160.06" y="863.5" ></text>
</g>
<g >
<title>operator new (72,935,249 samples, 0.02%)</title><rect x="1087.3" y="853" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1090.28" y="863.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::push_front (398,911,379 samples, 0.10%)</title><rect x="431.9" y="773" width="1.2" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="434.88" y="783.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (49,949,900 samples, 0.01%)</title><rect x="1174.2" y="837" width="0.1" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="1177.17" y="847.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (79,277,335 samples, 0.02%)</title><rect x="212.9" y="757" width="0.3" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="215.92" y="767.5" ></text>
</g>
<g >
<title>thrift_handler::async_put_batch (2,636,126,740 samples, 0.68%)</title><rect x="1100.4" y="805" width="8.0" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1103.39" y="815.5" ></text>
</g>
<g >
<title>std::deque&lt;std::pair&lt;int, std::pair&lt;sequence_id const&amp;, std::vector&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int, std::pair&lt;sequence_id const&amp;, std::vector&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::push_back (83,128,217 samples, 0.02%)</title><rect x="1100.5" y="741" width="0.3" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="1103.51" y="751.5" ></text>
</g>
<g >
<title>__tcp_cleanup_rbuf (34,007,746 samples, 0.01%)</title><rect x="204.0" y="501" width="0.1" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="207.04" y="511.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;, std::_Identity&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt;, bool  (560,021,606 samples, 0.14%)</title><rect x="595.5" y="709" width="1.7" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="598.49" y="719.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__relocate_a&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (222,794,742 samples, 0.06%)</title><rect x="1058.4" y="725" width="0.7" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="1061.44" y="735.5" ></text>
</g>
<g >
<title>encryption_engine::encrypt (393,655,779 samples, 0.10%)</title><rect x="1150.3" y="853" width="1.2" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="1153.27" y="863.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (199,981,793 samples, 0.05%)</title><rect x="829.5" y="741" width="0.6" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="832.53" y="751.5" ></text>
</g>
<g >
<title>__GI___libc_free (105,074,009 samples, 0.03%)</title><rect x="917.3" y="677" width="0.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="920.32" y="687.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (57,257,388 samples, 0.01%)</title><rect x="858.4" y="757" width="0.2" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="861.42" y="767.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (303,321,451 samples, 0.08%)</title><rect x="795.3" y="741" width="0.9" height="15.0" fill="rgb(220,71,16)" rx="2" ry="2" />
<text  x="798.30" y="751.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::construct&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;&gt; (328,166,181 samples, 0.08%)</title><rect x="449.0" y="741" width="1.0" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="452.02" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (2,268,688,772 samples, 0.59%)</title><rect x="821.8" y="757" width="6.9" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="824.81" y="767.5" ></text>
</g>
<g >
<title>std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::pair (175,240,307 samples, 0.05%)</title><rect x="1102.9" y="661" width="0.5" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="1105.88" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_v (47,709,727 samples, 0.01%)</title><rect x="957.1" y="693" width="0.2" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="960.11" y="703.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned_erms (37,243,106 samples, 0.01%)</title><rect x="968.2" y="757" width="0.1" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="971.17" y="767.5" ></text>
</g>
<g >
<title>decltype  (85,812,395 samples, 0.02%)</title><rect x="564.3" y="693" width="0.3" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="567.31" y="703.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_S_relocate (168,413,275 samples, 0.04%)</title><rect x="218.5" y="757" width="0.5" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="221.47" y="767.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (157,433,234 samples, 0.04%)</title><rect x="920.0" y="725" width="0.5" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="923.04" y="735.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__relocate_a_1&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (958,482,083 samples, 0.25%)</title><rect x="1026.3" y="709" width="2.9" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="1029.25" y="719.5" ></text>
</g>
<g >
<title>operator delete (99,629,235 samples, 0.03%)</title><rect x="1140.7" y="789" width="0.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1143.68" y="799.5" ></text>
</g>
<g >
<title>mprotect_fixup (48,084,647 samples, 0.01%)</title><rect x="1104.4" y="565" width="0.2" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="1107.41" y="575.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (40,528,048 samples, 0.01%)</title><rect x="489.2" y="773" width="0.2" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="492.25" y="783.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (223,364,029 samples, 0.06%)</title><rect x="1155.5" y="805" width="0.6" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1158.46" y="815.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;::type const&amp; std::get&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; (68,791,048 samples, 0.02%)</title><rect x="798.7" y="677" width="0.2" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="801.69" y="687.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, true&gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (454,992,593 samples, 0.12%)</title><rect x="534.7" y="693" width="1.4" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="537.72" y="703.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (132,721,997 samples, 0.03%)</title><rect x="212.8" y="789" width="0.4" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="215.80" y="799.5" ></text>
</g>
<g >
<title>memcpy@plt (222,421,198 samples, 0.06%)</title><rect x="674.5" y="693" width="0.7" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="677.48" y="703.5" ></text>
</g>
<g >
<title>lll_mutex_lock_optimized (162,646,489 samples, 0.04%)</title><rect x="538.0" y="709" width="0.5" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="541.04" y="719.5" ></text>
</g>
<g >
<title>do_syscall_64 (48,084,647 samples, 0.01%)</title><rect x="1104.4" y="613" width="0.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1107.41" y="623.5" ></text>
</g>
<g >
<title>malloc_consolidate (198,351,574 samples, 0.05%)</title><rect x="486.7" y="661" width="0.6" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="489.68" y="671.5" ></text>
</g>
<g >
<title>_int_malloc (34,673,565 samples, 0.01%)</title><rect x="203.6" y="565" width="0.1" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="206.62" y="575.5" ></text>
</g>
<g >
<title>_int_free (42,154,803 samples, 0.01%)</title><rect x="204.6" y="773" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="207.64" y="783.5" ></text>
</g>
<g >
<title>aesni_init_key (55,780,785 samples, 0.01%)</title><rect x="1150.9" y="805" width="0.2" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1153.93" y="815.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, false&gt; &gt; &gt;::_M_deallocate_nodes (511,911,207 samples, 0.13%)</title><rect x="957.6" y="725" width="1.6" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="960.63" y="735.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, true&gt; &gt;::deallocate (104,559,914 samples, 0.03%)</title><rect x="505.9" y="661" width="0.3" height="15.0" fill="rgb(238,151,36)" rx="2" ry="2" />
<text  x="508.92" y="671.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;1ul, std::tuple&lt;std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt; &gt;::type&amp; std::get&lt;1ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt; (38,026,648 samples, 0.01%)</title><rect x="811.0" y="549" width="0.1" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="813.96" y="559.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (163,460,393 samples, 0.04%)</title><rect x="211.0" y="741" width="0.5" height="15.0" fill="rgb(206,9,2)" rx="2" ry="2" />
<text  x="214.00" y="751.5" ></text>
</g>
<g >
<title>malloc_consolidate (69,666,654 samples, 0.02%)</title><rect x="1084.2" y="805" width="0.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1087.23" y="815.5" ></text>
</g>
<g >
<title>syscall (35,265,253 samples, 0.01%)</title><rect x="805.7" y="741" width="0.1" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="808.68" y="751.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_find_node (479,478,922 samples, 0.12%)</title><rect x="1010.1" y="741" width="1.4" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="1013.08" y="751.5" ></text>
</g>
<g >
<title>[libc.so.6] (59,078,280 samples, 0.02%)</title><rect x="112.5" y="949" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="115.46" y="959.5" ></text>
</g>
<g >
<title>__GI___lll_lock_wake (228,242,010 samples, 0.06%)</title><rect x="459.7" y="661" width="0.7" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="462.75" y="671.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;,  (34,676,077 samples, 0.01%)</title><rect x="818.3" y="485" width="0.1" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="821.32" y="495.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt; &gt; &gt;::destroy&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (129,751,072 samples, 0.03%)</title><rect x="884.9" y="693" width="0.4" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="887.93" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (52,400,420 samples, 0.01%)</title><rect x="822.2" y="709" width="0.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="825.15" y="719.5" ></text>
</g>
<g >
<title>operator new (85,602,269 samples, 0.02%)</title><rect x="1156.8" y="805" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1159.79" y="815.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::push_back (964,593,069 samples, 0.25%)</title><rect x="927.6" y="773" width="2.9" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="930.59" y="783.5" ></text>
</g>
<g >
<title>ip_queue_xmit (200,404,724 samples, 0.05%)</title><rect x="1060.1" y="421" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1063.06" y="431.5" ></text>
</g>
<g >
<title>__GI___libc_free (310,873,424 samples, 0.08%)</title><rect x="937.2" y="725" width="0.9" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="940.18" y="735.5" ></text>
</g>
<g >
<title>operator delete (49,090,309 samples, 0.01%)</title><rect x="615.4" y="693" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="618.42" y="703.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt;::destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (224,968,602 samples, 0.06%)</title><rect x="1016.6" y="709" width="0.7" height="15.0" fill="rgb(239,158,38)" rx="2" ry="2" />
<text  x="1019.58" y="719.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__relocate_a&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (347,759,127 samples, 0.09%)</title><rect x="929.4" y="709" width="1.1" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="932.42" y="719.5" ></text>
</g>
<g >
<title>ip_local_deliver_finish (65,045,447 samples, 0.02%)</title><rect x="1085.4" y="309" width="0.2" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="1088.37" y="319.5" ></text>
</g>
<g >
<title>__GI___libc_free (161,460,466 samples, 0.04%)</title><rect x="917.9" y="661" width="0.5" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="920.94" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;::_M_valptr (60,518,054 samples, 0.02%)</title><rect x="577.5" y="725" width="0.2" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="580.50" y="735.5" ></text>
</g>
<g >
<title>encryption_engine::encryptNonDeterministic (3,675,189,265 samples, 0.95%)</title><rect x="848.0" y="789" width="11.2" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="850.95" y="799.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Vector_base (82,091,495 samples, 0.02%)</title><rect x="902.1" y="677" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="905.13" y="687.5" ></text>
</g>
<g >
<title>do_futex (36,923,557 samples, 0.01%)</title><rect x="1063.2" y="741" width="0.1" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1066.20" y="751.5" ></text>
</g>
<g >
<title>operator new (62,454,905 samples, 0.02%)</title><rect x="1096.0" y="613" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1098.95" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (852,688,941 samples, 0.22%)</title><rect x="422.4" y="757" width="2.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="425.40" y="767.5" ></text>
</g>
<g >
<title>__wake_up_common_lock (81,629,633 samples, 0.02%)</title><rect x="1112.0" y="677" width="0.2" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1114.95" y="687.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;operation&gt; &gt;::allocate (2,703,956,718 samples, 0.70%)</title><rect x="479.0" y="741" width="8.3" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="482.04" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (109,931,730 samples, 0.03%)</title><rect x="440.1" y="741" width="0.3" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="443.11" y="751.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (40,958,702 samples, 0.01%)</title><rect x="532.8" y="709" width="0.2" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="535.83" y="719.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;::tuple&lt;true, true&gt; (70,827,297 samples, 0.02%)</title><rect x="1003.8" y="757" width="0.3" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="1006.84" y="767.5" ></text>
</g>
<g >
<title>___pthread_mutex_unlock (58,556,819 samples, 0.02%)</title><rect x="1103.9" y="693" width="0.2" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1106.92" y="703.5" ></text>
</g>
<g >
<title>tcache_put (399,717,659 samples, 0.10%)</title><rect x="781.5" y="677" width="1.2" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="784.45" y="687.5" ></text>
</g>
<g >
<title>cpp_redis::client::send (2,303,253,188 samples, 0.60%)</title><rect x="938.2" y="725" width="7.1" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="941.23" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (157,905,733 samples, 0.04%)</title><rect x="813.4" y="693" width="0.5" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="816.39" y="703.5" ></text>
</g>
<g >
<title>std::enable_if&lt;std::__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;std::__future_base::_Result_base::_Deleter&gt; &gt;, std::is_move_constructible&lt;std::__future_base::_Result_base::_Deleter&gt;, std::is_move_assignable&lt;std::__future_base::_Result_base::_Deleter&gt; &gt;::value, void&gt;::type std::swap&lt;std::__future_base::_Result_base::_Deleter&gt; (34,961,993 samples, 0.01%)</title><rect x="811.4" y="565" width="0.1" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="814.36" y="575.5" ></text>
</g>
<g >
<title>sha256_block_data_order_shaext (851,378,580 samples, 0.22%)</title><rect x="1184.6" y="949" width="2.6" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="1187.60" y="959.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (293,749,225 samples, 0.08%)</title><rect x="1159.8" y="741" width="0.9" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1162.78" y="751.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;waffle_thriftIf,  (46,301,298 samples, 0.01%)</title><rect x="1089.8" y="773" width="0.2" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1092.84" y="783.5" ></text>
</g>
<g >
<title>cpp_redis::client::unprotected_send (1,044,311,463 samples, 0.27%)</title><rect x="206.3" y="725" width="3.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="209.34" y="735.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::~vector (158,696,342 samples, 0.04%)</title><rect x="1164.1" y="725" width="0.5" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="1167.12" y="735.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin (367,789,536 samples, 0.10%)</title><rect x="986.6" y="741" width="1.2" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="989.64" y="751.5" ></text>
</g>
<g >
<title>tcache_put (40,702,864 samples, 0.01%)</title><rect x="1140.4" y="757" width="0.1" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="1143.39" y="767.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (83,012,612 samples, 0.02%)</title><rect x="530.4" y="725" width="0.2" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="533.38" y="735.5" ></text>
</g>
<g >
<title>malloc_consolidate (173,060,873 samples, 0.04%)</title><rect x="205.2" y="693" width="0.5" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="208.19" y="703.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt; &gt; &gt;::allocate (213,590,960 samples, 0.06%)</title><rect x="1142.4" y="757" width="0.6" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="1145.38" y="767.5" ></text>
</g>
<g >
<title>do_user_addr_fault (86,788,295 samples, 0.02%)</title><rect x="1142.6" y="645" width="0.3" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1145.64" y="655.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (42,033,333 samples, 0.01%)</title><rect x="881.5" y="741" width="0.1" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="884.49" y="751.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (176,564,998 samples, 0.05%)</title><rect x="985.5" y="661" width="0.5" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="988.49" y="671.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::operator[] (1,821,834,906 samples, 0.47%)</title><rect x="440.5" y="773" width="5.6" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="443.53" y="783.5" ></text>
</g>
<g >
<title>cpp_redis::network::tcp_client::async_write (53,545,892 samples, 0.01%)</title><rect x="903.2" y="725" width="0.2" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="906.24" y="735.5" ></text>
</g>
<g >
<title>std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;  (156,134,984 samples, 0.04%)</title><rect x="472.9" y="773" width="0.5" height="15.0" fill="rgb(241,170,40)" rx="2" ry="2" />
<text  x="475.89" y="783.5" ></text>
</g>
<g >
<title>mem_cgroup_uncharge_skmem (39,687,081 samples, 0.01%)</title><rect x="1083.2" y="629" width="0.2" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="1086.25" y="639.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (66,116,689 samples, 0.02%)</title><rect x="930.3" y="661" width="0.2" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="933.26" y="671.5" ></text>
</g>
<g >
<title>_int_malloc (300,997,279 samples, 0.08%)</title><rect x="925.3" y="645" width="0.9" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="928.29" y="655.5" ></text>
</g>
<g >
<title>apache::thrift::server::TNonblockingIOThread::run (751,820,279 samples, 0.19%)</title><rect x="201.9" y="789" width="2.3" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="204.90" y="799.5" ></text>
</g>
<g >
<title>lll_mutex_unlock_optimized (39,761,606 samples, 0.01%)</title><rect x="829.2" y="693" width="0.1" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="832.18" y="703.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (262,251,972 samples, 0.07%)</title><rect x="207.2" y="677" width="0.8" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="210.21" y="687.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;char*&gt;::difference_type std::distance&lt;char*&gt; (54,321,693 samples, 0.01%)</title><rect x="792.3" y="693" width="0.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="795.30" y="703.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::_List_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (96,129,391 samples, 0.02%)</title><rect x="526.8" y="709" width="0.2" height="15.0" fill="rgb(248,202,48)" rx="2" ry="2" />
<text  x="529.75" y="719.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (718,264,355 samples, 0.19%)</title><rect x="422.6" y="725" width="2.2" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="425.58" y="735.5" ></text>
</g>
<g >
<title>malloc_consolidate (74,603,173 samples, 0.02%)</title><rect x="1075.1" y="773" width="0.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1078.10" y="783.5" ></text>
</g>
<g >
<title>__GI___libc_free (852,941,033 samples, 0.22%)</title><rect x="1038.2" y="709" width="2.6" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1041.22" y="719.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (131,382,748 samples, 0.03%)</title><rect x="138.0" y="837" width="0.4" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="140.97" y="847.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (287,504,142 samples, 0.07%)</title><rect x="886.5" y="645" width="0.9" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="889.49" y="655.5" ></text>
</g>
<g >
<title>std::mutex::unlock (241,263,312 samples, 0.06%)</title><rect x="975.9" y="773" width="0.7" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="978.88" y="783.5" ></text>
</g>
<g >
<title>free@plt (43,770,742 samples, 0.01%)</title><rect x="894.7" y="789" width="0.2" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="897.72" y="799.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (491,879,829 samples, 0.13%)</title><rect x="892.2" y="693" width="1.5" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="895.25" y="703.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (144,738,540 samples, 0.04%)</title><rect x="812.1" y="725" width="0.4" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="815.10" y="735.5" ></text>
</g>
<g >
<title>___pthread_mutex_unlock (116,222,765 samples, 0.03%)</title><rect x="492.8" y="725" width="0.4" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="495.84" y="735.5" ></text>
</g>
<g >
<title>dequeue_entity (44,955,827 samples, 0.01%)</title><rect x="202.1" y="533" width="0.2" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="205.13" y="543.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (106,416,614 samples, 0.03%)</title><rect x="1107.7" y="517" width="0.3" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="1110.66" y="527.5" ></text>
</g>
<g >
<title>_int_free (86,565,950 samples, 0.02%)</title><rect x="457.4" y="661" width="0.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="460.39" y="671.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned_erms (115,617,906 samples, 0.03%)</title><rect x="1113.0" y="949" width="0.3" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1115.97" y="959.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (547,232,418 samples, 0.14%)</title><rect x="888.8" y="741" width="1.7" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="891.81" y="751.5" ></text>
</g>
<g >
<title>net_rx_action (110,074,073 samples, 0.03%)</title><rect x="1085.4" y="421" width="0.3" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1088.36" y="431.5" ></text>
</g>
<g >
<title>operation::~operation (189,427,719 samples, 0.05%)</title><rect x="405.1" y="725" width="0.6" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="408.14" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt;* std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (59,006,868 samples, 0.02%)</title><rect x="1173.2" y="821" width="0.1" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1176.17" y="831.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;,  (114,210,659 samples, 0.03%)</title><rect x="462.3" y="677" width="0.3" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="465.26" y="687.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (126,647,311 samples, 0.03%)</title><rect x="820.8" y="693" width="0.4" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="823.77" y="703.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cpp_redis::reply, std::allocator&lt;cpp_redis::reply&gt; &gt;::_M_deallocate (122,565,768 samples, 0.03%)</title><rect x="917.3" y="725" width="0.3" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="920.26" y="735.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (441,910,771 samples, 0.11%)</title><rect x="943.7" y="581" width="1.3" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="946.67" y="591.5" ></text>
</g>
<g >
<title>ksys_write (48,319,336 samples, 0.01%)</title><rect x="1080.0" y="693" width="0.2" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="1083.03" y="703.5" ></text>
</g>
<g >
<title>_int_malloc (103,633,735 samples, 0.03%)</title><rect x="210.6" y="741" width="0.4" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="213.64" y="751.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::~lock_guard (35,992,591 samples, 0.01%)</title><rect x="425.3" y="773" width="0.1" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="428.33" y="783.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;::type const&amp; std::get&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; (42,491,783 samples, 0.01%)</title><rect x="564.4" y="677" width="0.2" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="567.44" y="687.5" ></text>
</g>
<g >
<title>_int_malloc (109,694,334 samples, 0.03%)</title><rect x="962.3" y="725" width="0.3" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="965.25" y="735.5" ></text>
</g>
<g >
<title>tcp_data_queue (53,113,566 samples, 0.01%)</title><rect x="1060.3" y="37" width="0.1" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1063.25" y="47.5" ></text>
</g>
<g >
<title>__GI___libc_free (47,473,648 samples, 0.01%)</title><rect x="201.7" y="949" width="0.1" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="204.70" y="959.5" ></text>
</g>
<g >
<title>cpp_redis::reply::as_array (34,222,406 samples, 0.01%)</title><rect x="68.2" y="933" width="0.1" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="71.16" y="943.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;std::__future_base::_Result&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__future_base::_Result_base::_Deleter, true, true&gt;::__uniq_ptr_data (74,243,763 samples, 0.02%)</title><rect x="809.8" y="501" width="0.2" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="812.79" y="511.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (288,472,679 samples, 0.07%)</title><rect x="1062.2" y="869" width="0.9" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1065.17" y="879.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::shared_ptr&lt;std::allocator&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;&gt; (679,813,832 samples, 0.18%)</title><rect x="1095.6" y="725" width="2.0" height="15.0" fill="rgb(211,32,7)" rx="2" ry="2" />
<text  x="1098.55" y="735.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (59,720,176 samples, 0.02%)</title><rect x="445.7" y="725" width="0.2" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="448.75" y="735.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (54,328,448 samples, 0.01%)</title><rect x="849.7" y="709" width="0.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="852.71" y="719.5" ></text>
</g>
<g >
<title>__tcp_transmit_skb (49,030,033 samples, 0.01%)</title><rect x="1085.9" y="645" width="0.1" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1088.87" y="655.5" ></text>
</g>
<g >
<title>__wake_up_common (37,909,472 samples, 0.01%)</title><rect x="1082.9" y="661" width="0.1" height="15.0" fill="rgb(248,197,47)" rx="2" ry="2" />
<text  x="1085.86" y="671.5" ></text>
</g>
<g >
<title>std::mutex::unlock (92,292,008 samples, 0.02%)</title><rect x="1093.3" y="725" width="0.3" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1096.31" y="735.5" ></text>
</g>
<g >
<title>do_user_addr_fault (90,501,530 samples, 0.02%)</title><rect x="1119.7" y="741" width="0.2" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1122.66" y="751.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (139,116,891 samples, 0.04%)</title><rect x="910.7" y="725" width="0.4" height="15.0" fill="rgb(206,9,2)" rx="2" ry="2" />
<text  x="913.72" y="735.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (181,477,969 samples, 0.05%)</title><rect x="425.7" y="741" width="0.6" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="428.70" y="751.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (63,009,658 samples, 0.02%)</title><rect x="844.0" y="677" width="0.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="846.97" y="687.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (88,615,803 samples, 0.02%)</title><rect x="1116.2" y="757" width="0.2" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1119.16" y="767.5" ></text>
</g>
<g >
<title>do_anonymous_page (57,781,780 samples, 0.01%)</title><rect x="1162.4" y="693" width="0.1" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1165.36" y="703.5" ></text>
</g>
<g >
<title>std::vector&lt;cpp_redis::reply, std::allocator&lt;cpp_redis::reply&gt; &gt;::size (34,483,817 samples, 0.01%)</title><rect x="107.9" y="933" width="0.1" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="110.88" y="943.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_erase (1,605,937,553 samples, 0.42%)</title><rect x="883.0" y="741" width="4.9" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="885.95" y="751.5" ></text>
</g>
<g >
<title>std::__atomic_futex_unsigned&lt;2147483648u&gt;::_M_load_and_test_until (56,618,046 samples, 0.01%)</title><rect x="953.3" y="709" width="0.1" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="956.27" y="719.5" ></text>
</g>
<g >
<title>operator new (63,009,658 samples, 0.02%)</title><rect x="844.0" y="693" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="846.97" y="703.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::_List_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::deallocate (80,121,489 samples, 0.02%)</title><rect x="503.4" y="709" width="0.3" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="506.44" y="719.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (285,300,912 samples, 0.07%)</title><rect x="1180.9" y="837" width="0.8" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="1183.86" y="847.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (322,832,260 samples, 0.08%)</title><rect x="1096.2" y="565" width="1.0" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="1099.22" y="575.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (47,351,256 samples, 0.01%)</title><rect x="61.7" y="933" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="64.72" y="943.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::construct&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;&gt; (454,584,088 samples, 0.12%)</title><rect x="1095.9" y="661" width="1.4" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1098.91" y="671.5" ></text>
</g>
<g >
<title>__schedule (34,807,392 samples, 0.01%)</title><rect x="953.3" y="549" width="0.1" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="956.28" y="559.5" ></text>
</g>
<g >
<title>operator new (176,289,123 samples, 0.05%)</title><rect x="205.2" y="741" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="208.18" y="751.5" ></text>
</g>
<g >
<title>std::remove_reference&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt;::type&amp;&amp; std::move&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt; (38,536,990 samples, 0.01%)</title><rect x="105.6" y="933" width="0.1" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="108.57" y="943.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::vector (293,749,225 samples, 0.08%)</title><rect x="1159.8" y="773" width="0.9" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1162.78" y="783.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;operation*&gt; (143,177,342 samples, 0.04%)</title><rect x="487.4" y="725" width="0.4" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="490.38" y="735.5" ></text>
</g>
<g >
<title>dequeue_entity (49,306,296 samples, 0.01%)</title><rect x="1062.6" y="677" width="0.2" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1065.61" y="687.5" ></text>
</g>
<g >
<title>cpp_redis::client::try_commit (130,760,990 samples, 0.03%)</title><rect x="1156.7" y="837" width="0.4" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1159.66" y="847.5" ></text>
</g>
<g >
<title>clear_page_erms (50,751,151 samples, 0.01%)</title><rect x="1084.7" y="597" width="0.1" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1087.67" y="607.5" ></text>
</g>
<g >
<title>std::queue&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::deque&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::pop (336,821,689 samples, 0.09%)</title><rect x="457.2" y="773" width="1.0" height="15.0" fill="rgb(222,79,18)" rx="2" ry="2" />
<text  x="460.15" y="783.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned_erms (78,169,326 samples, 0.02%)</title><rect x="942.4" y="645" width="0.2" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="945.38" y="655.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;::~pair (283,657,167 samples, 0.07%)</title><rect x="614.8" y="709" width="0.9" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="617.83" y="719.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;char*&gt;::difference_type std::distance&lt;char*&gt; (104,944,800 samples, 0.03%)</title><rect x="521.5" y="757" width="0.3" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="524.52" y="767.5" ></text>
</g>
<g >
<title>__sys_sendto (258,502,300 samples, 0.07%)</title><rect x="1111.4" y="741" width="0.8" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="1114.41" y="751.5" ></text>
</g>
<g >
<title> (37,031,942 samples, 0.01%)</title><rect x="1089.4" y="805" width="0.1" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="1092.38" y="815.5" ></text>
</g>
<g >
<title>epoll_wait (182,814,725 samples, 0.05%)</title><rect x="201.9" y="741" width="0.6" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="204.90" y="751.5" ></text>
</g>
<g >
<title>_int_malloc (108,218,413 samples, 0.03%)</title><rect x="1104.3" y="693" width="0.3" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1107.25" y="703.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (34,886,167 samples, 0.01%)</title><rect x="121.4" y="933" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="124.36" y="943.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::allocate (529,670,459 samples, 0.14%)</title><rect x="1109.3" y="741" width="1.6" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="1112.26" y="751.5" ></text>
</g>
<g >
<title>std::_Identity&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt;::operator (49,890,596 samples, 0.01%)</title><rect x="42.4" y="933" width="0.2" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="45.44" y="943.5" ></text>
</g>
<g >
<title>void std::vector&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_realloc_insert&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (239,366,912 samples, 0.06%)</title><rect x="1101.3" y="741" width="0.7" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="1104.29" y="751.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (405,301,599 samples, 0.10%)</title><rect x="1025.0" y="693" width="1.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1027.98" y="703.5" ></text>
</g>
<g >
<title>___pthread_mutex_unlock (45,234,538 samples, 0.01%)</title><rect x="1119.1" y="805" width="0.1" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1122.06" y="815.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_S_do_relocate (95,153,509 samples, 0.02%)</title><rect x="1165.1" y="789" width="0.3" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="1168.07" y="799.5" ></text>
</g>
<g >
<title>__GI___select (312,436,460 samples, 0.08%)</title><rect x="1062.1" y="885" width="1.0" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1065.12" y="895.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_get_node (181,467,148 samples, 0.05%)</title><rect x="432.2" y="725" width="0.6" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="435.21" y="735.5" ></text>
</g>
<g >
<title>___pthread_cond_signal (45,370,606 samples, 0.01%)</title><rect x="1063.2" y="821" width="0.1" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1066.18" y="831.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_deallocate (239,335,656 samples, 0.06%)</title><rect x="957.6" y="613" width="0.8" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="960.63" y="623.5" ></text>
</g>
<g >
<title>aesni_init_key (47,117,451 samples, 0.01%)</title><rect x="1182.4" y="949" width="0.1" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1185.37" y="959.5" ></text>
</g>
<g >
<title>__random (230,551,413 samples, 0.06%)</title><rect x="1151.5" y="821" width="0.7" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="1154.53" y="831.5" ></text>
</g>
<g >
<title>lll_mutex_lock_optimized (63,736,509 samples, 0.02%)</title><rect x="1103.7" y="661" width="0.2" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="1106.69" y="671.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (55,610,564 samples, 0.01%)</title><rect x="1109.0" y="709" width="0.1" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1111.98" y="719.5" ></text>
</g>
<g >
<title>cpp_redis::builders::bulk_string_builder::fetch_str (67,416,273 samples, 0.02%)</title><rect x="25.4" y="933" width="0.2" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="28.42" y="943.5" ></text>
</g>
<g >
<title>aesni_cbc_cipher (196,762,733 samples, 0.05%)</title><rect x="842.4" y="709" width="0.6" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="845.44" y="719.5" ></text>
</g>
<g >
<title>cpp_redis::network::redis_connection::send (603,631,950 samples, 0.16%)</title><rect x="1157.9" y="773" width="1.9" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="1160.94" y="783.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (89,893,653 samples, 0.02%)</title><rect x="1028.3" y="645" width="0.2" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1031.27" y="655.5" ></text>
</g>
<g >
<title>void std::vector&lt;cpp_redis::reply, std::allocator&lt;cpp_redis::reply&gt; &gt;::_M_realloc_insert&lt;cpp_redis::reply const&amp;&gt; (732,076,282 samples, 0.19%)</title><rect x="1071.0" y="741" width="2.2" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="1073.97" y="751.5" ></text>
</g>
<g >
<title>apache::thrift::protocol::TProtocol::writeString (231,480,664 samples, 0.06%)</title><rect x="1061.2" y="693" width="0.7" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1064.22" y="703.5" ></text>
</g>
<g >
<title>CRYPTO_zalloc (146,797,398 samples, 0.04%)</title><rect x="18.8" y="933" width="0.4" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="21.79" y="943.5" ></text>
</g>
<g >
<title>void std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_realloc_insert&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (323,672,411 samples, 0.08%)</title><rect x="218.0" y="773" width="1.0" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="221.00" y="783.5" ></text>
</g>
<g >
<title>__x64_sys_write (48,319,336 samples, 0.01%)</title><rect x="1080.0" y="709" width="0.2" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1083.03" y="719.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__future_base::_Result_base::_Deleter&gt;::_M_deleter (34,065,807 samples, 0.01%)</title><rect x="810.6" y="517" width="0.1" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="813.63" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;,  (101,240,104 samples, 0.03%)</title><rect x="462.3" y="661" width="0.3" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="465.29" y="671.5" ></text>
</g>
<g >
<title>operator new (194,222,073 samples, 0.05%)</title><rect x="209.7" y="709" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="212.71" y="719.5" ></text>
</g>
<g >
<title>perf_event_mmap_output (35,718,104 samples, 0.01%)</title><rect x="1097.0" y="245" width="0.1" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="1100.03" y="255.5" ></text>
</g>
<g >
<title>_int_malloc (530,318,741 samples, 0.14%)</title><rect x="442.5" y="645" width="1.6" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="445.49" y="655.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (43,859,420 samples, 0.01%)</title><rect x="451.7" y="725" width="0.1" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="454.68" y="735.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (112,884,831 samples, 0.03%)</title><rect x="514.6" y="677" width="0.3" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="517.58" y="687.5" ></text>
</g>
<g >
<title>__gnu_cxx::__enable_if&lt;std::__is_char&lt;char&gt;::__value, bool&gt;::__type std::operator==&lt;char&gt; (47,010,036 samples, 0.01%)</title><rect x="523.2" y="677" width="0.1" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="526.16" y="687.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (222,897,850 samples, 0.06%)</title><rect x="1149.1" y="821" width="0.7" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="1152.12" y="831.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (145,163,616 samples, 0.04%)</title><rect x="1136.7" y="773" width="0.4" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="1139.66" y="783.5" ></text>
</g>
<g >
<title>decltype  (117,312,956 samples, 0.03%)</title><rect x="798.5" y="693" width="0.4" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="801.54" y="703.5" ></text>
</g>
<g >
<title>__GI___libc_free (121,159,207 samples, 0.03%)</title><rect x="910.4" y="661" width="0.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="913.35" y="671.5" ></text>
</g>
<g >
<title>arena_for_chunk (44,553,711 samples, 0.01%)</title><rect x="450.5" y="757" width="0.1" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="453.45" y="767.5" ></text>
</g>
<g >
<title>__random_r (36,072,311 samples, 0.01%)</title><rect x="1152.1" y="805" width="0.1" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="1155.12" y="815.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (54,046,181 samples, 0.01%)</title><rect x="893.2" y="613" width="0.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="896.20" y="623.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_assign (39,286,205 samples, 0.01%)</title><rect x="1187.3" y="949" width="0.1" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="1190.29" y="959.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (44,830,077 samples, 0.01%)</title><rect x="452.8" y="773" width="0.2" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="455.82" y="783.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (40,308,644 samples, 0.01%)</title><rect x="818.9" y="421" width="0.1" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="821.87" y="431.5" ></text>
</g>
<g >
<title>encryption_engine::prf (7,353,218,651 samples, 1.90%)</title><rect x="859.2" y="789" width="22.4" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="862.17" y="799.5" >e..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (109,054,252 samples, 0.03%)</title><rect x="1152.6" y="853" width="0.3" height="15.0" fill="rgb(218,59,14)" rx="2" ry="2" />
<text  x="1155.57" y="863.5" ></text>
</g>
<g >
<title>__GI___libc_free (3,063,666,934 samples, 0.79%)</title><rect x="774.2" y="709" width="9.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="777.18" y="719.5" ></text>
</g>
<g >
<title>unlink_chunk (40,600,609 samples, 0.01%)</title><rect x="212.3" y="629" width="0.1" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="215.32" y="639.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__relocate_a_1&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (155,157,927 samples, 0.04%)</title><rect x="1058.5" y="709" width="0.4" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="1061.46" y="719.5" ></text>
</g>
<g >
<title>cpp_redis::reply::~reply (712,664,699 samples, 0.18%)</title><rect x="916.5" y="773" width="2.2" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="919.54" y="783.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;,  (52,068,234 samples, 0.01%)</title><rect x="1097.4" y="677" width="0.2" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1100.42" y="687.5" ></text>
</g>
<g >
<title>__GI___libc_free (74,941,399 samples, 0.02%)</title><rect x="839.5" y="709" width="0.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="842.46" y="719.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__future_base::_Result_base::_Deleter&gt;::release (61,551,286 samples, 0.02%)</title><rect x="471.6" y="533" width="0.2" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="474.58" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::~unique_ptr (60,213,372 samples, 0.02%)</title><rect x="819.6" y="437" width="0.2" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="822.62" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::vector (519,814,288 samples, 0.13%)</title><rect x="907.3" y="693" width="1.6" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="910.33" y="703.5" ></text>
</g>
<g >
<title>operation::~operation (117,408,998 samples, 0.03%)</title><rect x="460.9" y="773" width="0.4" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="463.94" y="783.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;::pair (40,690,913 samples, 0.01%)</title><rect x="44.6" y="933" width="0.1" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="47.56" y="943.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (1,266,816,277 samples, 0.33%)</title><rect x="1021.0" y="741" width="3.9" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1024.03" y="751.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (249,606,215 samples, 0.06%)</title><rect x="1014.6" y="709" width="0.7" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="1017.59" y="719.5" ></text>
</g>
<g >
<title>void std::__relocate_object_a&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; (175,341,494 samples, 0.05%)</title><rect x="1101.5" y="661" width="0.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="1104.49" y="671.5" ></text>
</g>
<g >
<title>std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;* std::__relocate_a_1&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;*, std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;*, std::allocator&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; (179,230,743 samples, 0.05%)</title><rect x="1101.5" y="677" width="0.5" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="1104.48" y="687.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (99,287,803 samples, 0.03%)</title><rect x="821.4" y="677" width="0.3" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="824.44" y="687.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::operator[] (2,380,586,910 samples, 0.62%)</title><rect x="1167.2" y="869" width="7.3" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="1170.21" y="879.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (443,886,989 samples, 0.11%)</title><rect x="907.6" y="629" width="1.3" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="910.57" y="639.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;::pair (223,237,777 samples, 0.06%)</title><rect x="793.2" y="741" width="0.7" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="796.21" y="751.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (54,292,219 samples, 0.01%)</title><rect x="159.8" y="933" width="0.1" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="162.76" y="943.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (241,133,162 samples, 0.06%)</title><rect x="787.2" y="725" width="0.8" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="790.21" y="735.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;waffle_thriftIf,  (37,031,942 samples, 0.01%)</title><rect x="1089.4" y="821" width="0.1" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1092.38" y="831.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (91,554,280 samples, 0.02%)</title><rect x="942.4" y="677" width="0.3" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="945.38" y="687.5" ></text>
</g>
<g >
<title>unlink_chunk (44,656,932 samples, 0.01%)</title><rect x="1004.6" y="629" width="0.2" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="1007.62" y="639.5" ></text>
</g>
<g >
<title>std::mutex::lock (96,751,331 samples, 0.03%)</title><rect x="527.3" y="757" width="0.3" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="530.30" y="767.5" ></text>
</g>
<g >
<title>operator new (303,659,204 samples, 0.08%)</title><rect x="955.1" y="725" width="0.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="958.09" y="735.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;void  (505,935,797 samples, 0.13%)</title><rect x="1078.3" y="725" width="1.5" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1081.29" y="735.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (33,854,263 samples, 0.01%)</title><rect x="1116.3" y="709" width="0.1" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1119.32" y="719.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (655,096,012 samples, 0.17%)</title><rect x="885.4" y="725" width="2.0" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="888.38" y="735.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned_erms (36,198,771 samples, 0.01%)</title><rect x="935.0" y="725" width="0.2" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="938.04" y="735.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;::pair (522,613,022 samples, 0.14%)</title><rect x="102.0" y="933" width="1.6" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="104.98" y="943.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (102,712,929 samples, 0.03%)</title><rect x="1161.3" y="677" width="0.3" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1164.27" y="687.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (59,962,419 samples, 0.02%)</title><rect x="872.5" y="693" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="875.47" y="703.5" ></text>
</g>
<g >
<title>operator new (132,261,977 samples, 0.03%)</title><rect x="447.1" y="693" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="450.10" y="703.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;char*&gt;::difference_type std::distance&lt;char*&gt; (42,619,809 samples, 0.01%)</title><rect x="968.9" y="757" width="0.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="971.85" y="767.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (71,403,790 samples, 0.02%)</title><rect x="887.6" y="693" width="0.2" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="890.58" y="703.5" ></text>
</g>
<g >
<title>__GI___libc_free (239,335,656 samples, 0.06%)</title><rect x="957.6" y="565" width="0.8" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="960.63" y="575.5" ></text>
</g>
<g >
<title>std::deque&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;::empty (53,957,925 samples, 0.01%)</title><rect x="456.8" y="757" width="0.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="459.75" y="767.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (116,637,551 samples, 0.03%)</title><rect x="1088.5" y="709" width="0.4" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="1091.50" y="719.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::lock_guard (44,202,077 samples, 0.01%)</title><rect x="422.0" y="773" width="0.2" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="425.02" y="783.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (2,700,041,334 samples, 0.70%)</title><rect x="479.1" y="693" width="8.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="482.06" y="703.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_safe_stack (59,671,685 samples, 0.02%)</title><rect x="1184.0" y="949" width="0.2" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="1186.98" y="959.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;::_M_ptr (35,279,073 samples, 0.01%)</title><rect x="803.0" y="709" width="0.1" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="806.02" y="719.5" ></text>
</g>
<g >
<title>waffle_proxy::clearThread (5,330,356,411 samples, 1.38%)</title><rect x="204.3" y="821" width="16.3" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="207.32" y="831.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (595,676,121 samples, 0.15%)</title><rect x="136.7" y="901" width="1.8" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="139.68" y="911.5" ></text>
</g>
<g >
<title>std::remove_reference&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;&amp;&gt;::type&amp;&amp; std::move&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;&amp;&gt; (46,205,502 samples, 0.01%)</title><rect x="105.8" y="933" width="0.1" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="108.76" y="943.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (216,664,276 samples, 0.06%)</title><rect x="1160.0" y="693" width="0.7" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1163.02" y="703.5" ></text>
</g>
<g >
<title>mem_cgroup_charge_skmem (64,226,889 samples, 0.02%)</title><rect x="1086.1" y="629" width="0.2" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1089.08" y="639.5" ></text>
</g>
<g >
<title>futex_wake (37,186,228 samples, 0.01%)</title><rect x="1093.5" y="565" width="0.1" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1096.48" y="575.5" ></text>
</g>
<g >
<title>neigh_hh_output (114,100,136 samples, 0.03%)</title><rect x="1085.3" y="501" width="0.4" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="1088.35" y="511.5" ></text>
</g>
<g >
<title>tacopie::tcp_client::on_write_available (753,076,653 samples, 0.19%)</title><rect x="1084.0" y="869" width="2.3" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1086.99" y="879.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (88,140,028 samples, 0.02%)</title><rect x="881.8" y="757" width="0.3" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="884.82" y="767.5" ></text>
</g>
<g >
<title>EVP_MD_CTX_copy_ex (318,610,182 samples, 0.08%)</title><rect x="873.0" y="725" width="1.0" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="876.02" y="735.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::push_back (680,521,326 samples, 0.18%)</title><rect x="959.2" y="773" width="2.1" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="962.19" y="783.5" ></text>
</g>
<g >
<title>vfs_write (104,156,285 samples, 0.03%)</title><rect x="1082.7" y="725" width="0.3" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1085.70" y="735.5" ></text>
</g>
<g >
<title>malloc_consolidate (2,209,948,200 samples, 0.57%)</title><rect x="1030.6" y="677" width="6.7" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1033.60" y="687.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (138,128,506 samples, 0.04%)</title><rect x="522.3" y="741" width="0.4" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="525.27" y="751.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (34,226,081 samples, 0.01%)</title><rect x="851.5" y="725" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="854.53" y="735.5" ></text>
</g>
<g >
<title>__gthread_mutex_lock (236,235,242 samples, 0.06%)</title><rect x="537.8" y="741" width="0.7" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="540.81" y="751.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin (157,257,140 samples, 0.04%)</title><rect x="441.3" y="725" width="0.5" height="15.0" fill="rgb(218,62,15)" rx="2" ry="2" />
<text  x="444.28" y="735.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::deallocate (121,159,207 samples, 0.03%)</title><rect x="910.4" y="677" width="0.3" height="15.0" fill="rgb(214,41,10)" rx="2" ry="2" />
<text  x="913.35" y="687.5" ></text>
</g>
<g >
<title>waffle_proxy::init (21,525,383,758 samples, 5.57%)</title><rect x="1116.7" y="885" width="65.7" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1119.66" y="895.5" >waffle_..</text>
</g>
<g >
<title>std::_Vector_base&lt;cpp_redis::reply, std::allocator&lt;cpp_redis::reply&gt; &gt;::_M_allocate (300,997,279 samples, 0.08%)</title><rect x="925.3" y="725" width="0.9" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="928.29" y="735.5" ></text>
</g>
<g >
<title>try_charge_memcg (64,226,889 samples, 0.02%)</title><rect x="1086.1" y="613" width="0.2" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1089.08" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_S_relocate (561,459,947 samples, 0.15%)</title><rect x="946.8" y="709" width="1.7" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="949.83" y="719.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (260,684,876 samples, 0.07%)</title><rect x="932.7" y="725" width="0.8" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="935.68" y="735.5" ></text>
</g>
<g >
<title>cpp_redis::client::exec_cmd (3,790,812,513 samples, 0.98%)</title><rect x="937.0" y="757" width="11.6" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="940.03" y="767.5" ></text>
</g>
<g >
<title>__GI___mprotect (48,084,647 samples, 0.01%)</title><rect x="1104.4" y="645" width="0.2" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="1107.41" y="655.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (40,219,713 samples, 0.01%)</title><rect x="916.2" y="725" width="0.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="919.22" y="735.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_S_do_relocate (352,146,630 samples, 0.09%)</title><rect x="929.4" y="725" width="1.1" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="932.42" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (146,054,114 samples, 0.04%)</title><rect x="887.4" y="725" width="0.4" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="890.38" y="735.5" ></text>
</g>
<g >
<title>malloc_consolidate (80,384,334 samples, 0.02%)</title><rect x="904.4" y="725" width="0.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="907.39" y="735.5" ></text>
</g>
<g >
<title>__x64_sys_recvfrom (181,999,590 samples, 0.05%)</title><rect x="1083.1" y="757" width="0.5" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1086.06" y="767.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (58,102,409 samples, 0.02%)</title><rect x="1116.3" y="725" width="0.1" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1119.26" y="735.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::max_size (34,007,212 samples, 0.01%)</title><rect x="834.2" y="693" width="0.1" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="837.15" y="703.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::push_back (449,386,374 samples, 0.12%)</title><rect x="1115.1" y="869" width="1.4" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1118.11" y="879.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (37,788,514 samples, 0.01%)</title><rect x="489.5" y="773" width="0.1" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="492.49" y="783.5" ></text>
</g>
<g >
<title>__GI___libc_free (219,661,987 samples, 0.06%)</title><rect x="958.4" y="549" width="0.7" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="961.44" y="559.5" ></text>
</g>
<g >
<title>queue&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::size (22,630,509,605 samples, 5.85%)</title><rect x="273.9" y="805" width="69.1" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="276.91" y="815.5" >queue&lt;s..</text>
</g>
<g >
<title>void std::__relocate_object_a&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (146,771,733 samples, 0.04%)</title><rect x="218.5" y="693" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="221.54" y="703.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (890,114,086 samples, 0.23%)</title><rect x="891.1" y="741" width="2.7" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="894.11" y="751.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned_erms (148,693,019 samples, 0.04%)</title><rect x="1158.9" y="709" width="0.5" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1161.90" y="719.5" ></text>
</g>
<g >
<title> (36,321,250 samples, 0.01%)</title><rect x="460.7" y="773" width="0.1" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="463.71" y="783.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin (75,475,419 samples, 0.02%)</title><rect x="890.8" y="725" width="0.2" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="893.78" y="735.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (443,051,585 samples, 0.11%)</title><rect x="799.7" y="693" width="1.4" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="802.73" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::_M_valptr (46,458,068 samples, 0.01%)</title><rect x="87.8" y="933" width="0.1" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="90.77" y="943.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (101,560,152 samples, 0.03%)</title><rect x="159.4" y="933" width="0.4" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="162.45" y="943.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_remove_bucket_begin (38,600,362 samples, 0.01%)</title><rect x="813.9" y="709" width="0.1" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="816.87" y="719.5" ></text>
</g>
<g >
<title>_int_malloc (183,555,520 samples, 0.05%)</title><rect x="1162.0" y="805" width="0.6" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1165.04" y="815.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::allocate (152,268,654 samples, 0.04%)</title><rect x="447.0" y="709" width="0.5" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="450.04" y="719.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (96,730,058 samples, 0.03%)</title><rect x="500.3" y="645" width="0.3" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="503.29" y="655.5" ></text>
</g>
<g >
<title>lll_mutex_unlock_optimized (33,058,795 samples, 0.01%)</title><rect x="439.1" y="693" width="0.1" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="442.09" y="703.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_S_relocate (485,283,310 samples, 0.13%)</title><rect x="959.8" y="725" width="1.5" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="962.77" y="735.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__future_base::_Result_base::_Deleter&gt;::unique_ptr (78,062,093 samples, 0.02%)</title><rect x="809.8" y="517" width="0.2" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="812.77" y="527.5" ></text>
</g>
<g >
<title>sk_page_frag_refill (66,481,230 samples, 0.02%)</title><rect x="1084.7" y="677" width="0.2" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1087.66" y="687.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::~lock_guard (300,186,316 samples, 0.08%)</title><rect x="975.7" y="789" width="0.9" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="978.70" y="799.5" ></text>
</g>
<g >
<title>epoll_nochangelist_add (46,267,426 samples, 0.01%)</title><rect x="202.8" y="613" width="0.1" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="205.75" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (1,090,651,674 samples, 0.28%)</title><rect x="797.7" y="709" width="3.4" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="800.75" y="719.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::vector (39,899,312 samples, 0.01%)</title><rect x="832.6" y="645" width="0.1" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="835.56" y="655.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (285,300,912 samples, 0.07%)</title><rect x="1180.9" y="853" width="0.8" height="15.0" fill="rgb(206,9,2)" rx="2" ry="2" />
<text  x="1183.86" y="863.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;::_M_ptr (38,242,753 samples, 0.01%)</title><rect x="577.6" y="709" width="0.1" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="580.57" y="719.5" ></text>
</g>
<g >
<title>page_counter_cancel (35,594,671 samples, 0.01%)</title><rect x="1083.3" y="549" width="0.1" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1086.26" y="559.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (626,857,636 samples, 0.16%)</title><rect x="930.6" y="773" width="1.9" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="933.58" y="783.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (891,344,793 samples, 0.23%)</title><rect x="830.5" y="757" width="2.8" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="833.55" y="767.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned_erms (208,856,966 samples, 0.05%)</title><rect x="120.7" y="933" width="0.7" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="123.72" y="943.5" ></text>
</g>
<g >
<title>std::mutex::unlock (40,678,373 samples, 0.01%)</title><rect x="433.3" y="757" width="0.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="436.29" y="767.5" ></text>
</g>
<g >
<title>EVP_MD_CTX_reset (47,091,839 samples, 0.01%)</title><rect x="867.9" y="709" width="0.2" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="870.93" y="719.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (400,103,186 samples, 0.10%)</title><rect x="1059.8" y="597" width="1.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1062.80" y="607.5" ></text>
</g>
<g >
<title>futex_wait (154,002,844 samples, 0.04%)</title><rect x="458.8" y="661" width="0.5" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="461.82" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (54,381,383 samples, 0.01%)</title><rect x="1146.8" y="821" width="0.2" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="1149.82" y="831.5" ></text>
</g>
<g >
<title>sequence_id::write (44,570,972 samples, 0.01%)</title><rect x="1061.9" y="693" width="0.2" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1064.92" y="703.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy_chars (665,355,757 samples, 0.17%)</title><rect x="686.5" y="693" width="2.1" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="689.53" y="703.5" ></text>
</g>
<g >
<title>std::__future_base::_Result_base::_Deleter&amp; std::__get_helper&lt;1ul, std::__future_base::_Result_base::_Deleter&gt; (43,651,719 samples, 0.01%)</title><rect x="471.9" y="549" width="0.1" height="15.0" fill="rgb(241,170,40)" rx="2" ry="2" />
<text  x="474.91" y="559.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::_List_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::destroy&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (156,166,954 samples, 0.04%)</title><rect x="524.4" y="741" width="0.5" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="527.39" y="751.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;::~pair (160,698,724 samples, 0.04%)</title><rect x="596.5" y="645" width="0.5" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="599.53" y="655.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (303,527,266 samples, 0.08%)</title><rect x="791.5" y="709" width="1.0" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="794.54" y="719.5" ></text>
</g>
<g >
<title>std::mutex::unlock (32,959,267 samples, 0.01%)</title><rect x="452.1" y="757" width="0.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="455.12" y="767.5" ></text>
</g>
<g >
<title>void std::__future_base::_State_baseV2::_S_check&lt;std::__future_base::_State_baseV2&gt; (187,531,069 samples, 0.05%)</title><rect x="473.4" y="757" width="0.6" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="476.42" y="767.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (2,456,794,947 samples, 0.64%)</title><rect x="506.9" y="725" width="7.5" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="509.90" y="735.5" ></text>
</g>
<g >
<title>tacopie::io_service::process_rd_event (49,863,924 samples, 0.01%)</title><rect x="1063.2" y="869" width="0.1" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="1066.18" y="879.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__future_base::_Result_base::_Deleter&gt;::release (48,689,812 samples, 0.01%)</title><rect x="464.1" y="613" width="0.1" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="467.07" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (208,609,259 samples, 0.05%)</title><rect x="451.2" y="757" width="0.7" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="454.22" y="767.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;operation*&gt; (201,393,668 samples, 0.05%)</title><rect x="405.1" y="773" width="0.6" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="408.10" y="783.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::~vector (40,309,381 samples, 0.01%)</title><rect x="1100.1" y="789" width="0.1" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1103.11" y="799.5" ></text>
</g>
<g >
<title>bool std::operator&lt; &lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (1,009,343,048 samples, 0.26%)</title><rect x="588.0" y="709" width="3.1" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="591.04" y="719.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt;::tuple&lt;std::__future_base::_Result_base*&amp;, std::__future_base::_Result_base::_Deleter, true&gt; (100,038,596 samples, 0.03%)</title><rect x="810.2" y="501" width="0.3" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="813.21" y="511.5" ></text>
</g>
<g >
<title>_int_free (35,789,740 samples, 0.01%)</title><rect x="906.3" y="613" width="0.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="909.27" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;int, std::pair&lt;int const, std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (139,647,268 samples, 0.04%)</title><rect x="956.9" y="709" width="0.4" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="959.88" y="719.5" ></text>
</g>
<g >
<title>HMAC_Final (88,092,977 samples, 0.02%)</title><rect x="1154.1" y="821" width="0.3" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1157.12" y="831.5" ></text>
</g>
<g >
<title>std::pair&lt;sequence_id const&amp;, std::vector&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::pair (46,569,847 samples, 0.01%)</title><rect x="1100.6" y="661" width="0.1" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1103.58" y="671.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;cpp_redis::reply&gt;::allocate (300,997,279 samples, 0.08%)</title><rect x="925.3" y="693" width="0.9" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="928.29" y="703.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned_erms (45,082,651 samples, 0.01%)</title><rect x="1159.6" y="725" width="0.2" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1162.64" y="735.5" ></text>
</g>
<g >
<title>std::vector&lt;cpp_redis::reply, std::allocator&lt;cpp_redis::reply&gt; &gt;::~vector (539,234,881 samples, 0.14%)</title><rect x="917.1" y="757" width="1.6" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="920.07" y="767.5" ></text>
</g>
<g >
<title>tcache_get (38,964,860 samples, 0.01%)</title><rect x="1090.7" y="645" width="0.1" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="1093.70" y="655.5" ></text>
</g>
<g >
<title>epoll_dispatch (201,211,798 samples, 0.05%)</title><rect x="201.9" y="757" width="0.6" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="204.90" y="767.5" ></text>
</g>
<g >
<title>__gnu_cxx::__enable_if&lt;std::__is_char&lt;char&gt;::__value, bool&gt;::__type std::operator==&lt;char&gt; (595,720,906 samples, 0.15%)</title><rect x="824.7" y="677" width="1.8" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="827.67" y="687.5" ></text>
</g>
<g >
<title>memcpy@plt (63,137,522 samples, 0.02%)</title><rect x="1134.7" y="773" width="0.2" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1137.75" y="783.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp; std::forward&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (64,855,290 samples, 0.02%)</title><rect x="158.0" y="933" width="0.2" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="160.98" y="943.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (57,589,887 samples, 0.01%)</title><rect x="809.5" y="501" width="0.2" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="812.51" y="511.5" ></text>
</g>
<g >
<title>_int_free (62,062,103 samples, 0.02%)</title><rect x="205.8" y="757" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="208.79" y="767.5" ></text>
</g>
<g >
<title>__fget_light (37,025,758 samples, 0.01%)</title><rect x="1083.4" y="693" width="0.2" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1086.44" y="703.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (573,189,175 samples, 0.15%)</title><rect x="530.2" y="741" width="1.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="533.24" y="751.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;,  (36,253,864 samples, 0.01%)</title><rect x="456.6" y="741" width="0.1" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="459.62" y="751.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct (46,733,405 samples, 0.01%)</title><rect x="80.7" y="933" width="0.2" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="83.72" y="943.5" ></text>
</g>
<g >
<title>SHA256_Update (62,566,337 samples, 0.02%)</title><rect x="875.1" y="741" width="0.2" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="878.11" y="751.5" ></text>
</g>
<g >
<title>engine_table_select (43,293,989 samples, 0.01%)</title><rect x="25.9" y="933" width="0.1" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="28.86" y="943.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (1,090,134,331 samples, 0.28%)</title><rect x="992.5" y="677" width="3.4" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="995.52" y="687.5" ></text>
</g>
<g >
<title>__fdget (37,025,758 samples, 0.01%)</title><rect x="1083.4" y="709" width="0.2" height="15.0" fill="rgb(214,41,10)" rx="2" ry="2" />
<text  x="1086.44" y="719.5" ></text>
</g>
<g >
<title>_int_free (117,336,809 samples, 0.03%)</title><rect x="450.1" y="773" width="0.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="453.08" y="783.5" ></text>
</g>
<g >
<title>std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::future (160,717,085 samples, 0.04%)</title><rect x="1105.4" y="741" width="0.5" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="1108.42" y="751.5" ></text>
</g>
<g >
<title>apache::thrift::concurrency::Monitor::Impl::waitForever (372,759,748 samples, 0.10%)</title><rect x="1087.7" y="837" width="1.2" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="1090.73" y="847.5" ></text>
</g>
<g >
<title>do_futex (184,785,162 samples, 0.05%)</title><rect x="459.8" y="597" width="0.6" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="462.83" y="607.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (38,455,810 samples, 0.01%)</title><rect x="839.1" y="725" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="842.06" y="735.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;std::__future_base::_Result&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;*, std::__future_base::_Result_base::_Deleter&gt; &gt;::type&amp; std::get&lt;0ul, std::__future_base::_Result&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;*, std::__future_base::_Result_base::_Deleter&gt; (36,863,029 samples, 0.01%)</title><rect x="471.7" y="501" width="0.1" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="474.65" y="511.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;*, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (272,575,551 samples, 0.07%)</title><rect x="958.4" y="629" width="0.8" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="961.36" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_node_ptr (422,323,135 samples, 0.11%)</title><rect x="1005.5" y="709" width="1.3" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="1008.50" y="719.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;char*&gt;::difference_type std::distance&lt;char*&gt; (51,511,927 samples, 0.01%)</title><rect x="456.4" y="725" width="0.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="459.45" y="735.5" ></text>
</g>
<g >
<title>ENGINE_finish (56,034,315 samples, 0.01%)</title><rect x="19.2" y="933" width="0.2" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="22.24" y="943.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (32,795,943 samples, 0.01%)</title><rect x="426.7" y="741" width="0.1" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="429.66" y="751.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (129,858,802 samples, 0.03%)</title><rect x="80.1" y="933" width="0.4" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="83.06" y="943.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::_S_do_relocate (70,574,385 samples, 0.02%)</title><rect x="834.3" y="725" width="0.2" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="837.31" y="735.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::destroy&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; (116,327,979 samples, 0.03%)</title><rect x="457.8" y="725" width="0.4" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="460.81" y="735.5" ></text>
</g>
<g >
<title>__x64_sys_futex (36,923,557 samples, 0.01%)</title><rect x="1063.2" y="757" width="0.1" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1066.20" y="767.5" ></text>
</g>
<g >
<title>std::__future_base::_Result&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::~_Result (216,125,191 samples, 0.06%)</title><rect x="1056.7" y="597" width="0.6" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1059.69" y="607.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, true&gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (181,742,376 samples, 0.05%)</title><rect x="437.5" y="693" width="0.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="440.45" y="703.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt;::deallocate (199,518,640 samples, 0.05%)</title><rect x="1015.9" y="677" width="0.6" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="1018.88" y="687.5" ></text>
</g>
<g >
<title>std::pointer_traits&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, true&gt;*&gt;::pointer_to (34,822,046 samples, 0.01%)</title><rect x="814.8" y="677" width="0.1" height="15.0" fill="rgb(241,170,40)" rx="2" ry="2" />
<text  x="817.82" y="687.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::data (52,558,689 samples, 0.01%)</title><rect x="32.2" y="933" width="0.1" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="35.17" y="943.5" ></text>
</g>
<g >
<title>operator new (440,206,833 samples, 0.11%)</title><rect x="945.3" y="725" width="1.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="948.34" y="735.5" ></text>
</g>
<g >
<title>do_syscall_64 (132,475,330 samples, 0.03%)</title><rect x="465.0" y="725" width="0.4" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="468.05" y="735.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__future_base::_Result_base::_Deleter&gt;::_M_deleter (53,485,957 samples, 0.01%)</title><rect x="471.4" y="533" width="0.2" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="474.41" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (836,699,269 samples, 0.22%)</title><rect x="1144.3" y="805" width="2.5" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="1147.27" y="815.5" ></text>
</g>
<g >
<title>cpp_redis::client::mset (5,784,479,869 samples, 1.50%)</title><rect x="935.5" y="773" width="17.6" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="938.48" y="783.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (167,458,986 samples, 0.04%)</title><rect x="533.0" y="709" width="0.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="535.99" y="719.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (350,000,390 samples, 0.09%)</title><rect x="826.8" y="709" width="1.0" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="829.76" y="719.5" ></text>
</g>
<g >
<title>EVP_EncryptFinal_ex (242,925,544 samples, 0.06%)</title><rect x="851.4" y="741" width="0.8" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="854.45" y="751.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (51,319,007 samples, 0.01%)</title><rect x="942.0" y="645" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="944.96" y="655.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;operation, operation const&amp;&gt; (761,540,795 samples, 0.20%)</title><rect x="476.7" y="693" width="2.3" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="479.72" y="703.5" ></text>
</g>
<g >
<title>std::__basic_future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::__basic_future (160,717,085 samples, 0.04%)</title><rect x="1105.4" y="725" width="0.5" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1108.42" y="735.5" ></text>
</g>
<g >
<title>do_syscall_64 (659,897,148 samples, 0.17%)</title><rect x="806.9" y="661" width="2.0" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="809.87" y="671.5" ></text>
</g>
<g >
<title>HMAC_CTX_reset (168,141,347 samples, 0.04%)</title><rect x="1153.6" y="805" width="0.5" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1156.60" y="815.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (511,911,207 samples, 0.13%)</title><rect x="957.6" y="741" width="1.6" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="960.63" y="751.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, true&gt; (616,431,366 samples, 0.16%)</title><rect x="528.3" y="757" width="1.9" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="531.28" y="767.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__is_null_pointer&lt;char&gt; (34,219,367 samples, 0.01%)</title><rect x="1046.3" y="773" width="0.1" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="1049.32" y="783.5" ></text>
</g>
<g >
<title>EVP_DigestFinal_ex (225,523,763 samples, 0.06%)</title><rect x="867.0" y="725" width="0.7" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="870.03" y="735.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__addressof&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (140,435,774 samples, 0.04%)</title><rect x="79.5" y="933" width="0.5" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="82.54" y="943.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::construct&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (74,929,141 samples, 0.02%)</title><rect x="1101.1" y="725" width="0.2" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1104.06" y="735.5" ></text>
</g>
<g >
<title>std::vector&lt;cpp_redis::reply, std::allocator&lt;cpp_redis::reply&gt; &gt;::vector (236,110,358 samples, 0.06%)</title><rect x="1064.3" y="757" width="0.8" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="1067.34" y="767.5" ></text>
</g>
<g >
<title>waffle_thriftProcessor::dispatchCall (7,158,273,173 samples, 1.85%)</title><rect x="1089.3" y="837" width="21.9" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="1092.34" y="847.5" >w..</text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1,329,076,750 samples, 0.34%)</title><rect x="822.5" y="725" width="4.0" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="825.45" y="735.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (116,715,677 samples, 0.03%)</title><rect x="919.2" y="773" width="0.3" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="922.16" y="783.5" ></text>
</g>
<g >
<title>cpp_redis::client::send (1,044,311,463 samples, 0.27%)</title><rect x="206.3" y="741" width="3.2" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="209.34" y="751.5" ></text>
</g>
<g >
<title>unlink_chunk (89,353,447 samples, 0.02%)</title><rect x="995.3" y="645" width="0.2" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="998.27" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, false, true&gt;::_Node_iterator (38,023,652 samples, 0.01%)</title><rect x="493.4" y="741" width="0.1" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="496.40" y="751.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (67,549,121 samples, 0.02%)</title><rect x="919.3" y="757" width="0.2" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="922.27" y="767.5" ></text>
</g>
<g >
<title>apache::thrift::server::TNonblockingIOThread::notify (342,806,258 samples, 0.09%)</title><rect x="1111.2" y="837" width="1.0" height="15.0" fill="rgb(238,151,36)" rx="2" ry="2" />
<text  x="1114.20" y="847.5" ></text>
</g>
<g >
<title>futex_wait (43,541,787 samples, 0.01%)</title><rect x="953.3" y="597" width="0.1" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="956.28" y="607.5" ></text>
</g>
<g >
<title>std::mutex::unlock (36,146,144 samples, 0.01%)</title><rect x="422.2" y="757" width="0.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="425.17" y="767.5" ></text>
</g>
<g >
<title>_int_malloc (55,704,400 samples, 0.01%)</title><rect x="1135.8" y="741" width="0.1" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1138.77" y="751.5" ></text>
</g>
<g >
<title>futex_wait (118,923,107 samples, 0.03%)</title><rect x="458.9" y="581" width="0.3" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="461.88" y="591.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_addr (96,775,078 samples, 0.03%)</title><rect x="118.9" y="933" width="0.3" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="121.91" y="943.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (223,645,541 samples, 0.06%)</title><rect x="1054.2" y="693" width="0.7" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1057.19" y="703.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (99,862,921 samples, 0.03%)</title><rect x="822.0" y="741" width="0.3" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="825.01" y="751.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (162,181,103 samples, 0.04%)</title><rect x="138.8" y="805" width="0.4" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="141.75" y="815.5" ></text>
</g>
<g >
<title>pipe_write (36,037,907 samples, 0.01%)</title><rect x="1080.0" y="661" width="0.2" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1083.05" y="671.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (319,227,894 samples, 0.08%)</title><rect x="525.7" y="661" width="0.9" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="528.66" y="671.5" ></text>
</g>
<g >
<title>__wake_up_common_lock (37,909,472 samples, 0.01%)</title><rect x="1082.9" y="677" width="0.1" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1085.86" y="687.5" ></text>
</g>
<g >
<title>apache::thrift::protocol::TVirtualProtocol&lt;apache::thrift::protocol::TBinaryProtocolT&lt;apache::thrift::transport::TTransport, apache::thrift::protocol::TNetworkBigEndian&gt;, apache::thrift::protocol::TProtocolDefaults&gt;::readMessageBegin_virt (48,282,906 samples, 0.01%)</title><rect x="1089.2" y="821" width="0.1" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="1092.19" y="831.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;int, std::pair&lt;int const, std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (360,555,108 samples, 0.09%)</title><rect x="956.5" y="757" width="1.1" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="959.49" y="767.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned_erms (127,220,155 samples, 0.03%)</title><rect x="1067.0" y="693" width="0.4" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1070.01" y="703.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;char*&gt;::difference_type std::distance&lt;char*&gt; (299,675,325 samples, 0.08%)</title><rect x="1051.4" y="773" width="0.9" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1054.41" y="783.5" ></text>
</g>
<g >
<title>operator new (204,378,332 samples, 0.05%)</title><rect x="208.7" y="613" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="211.72" y="623.5" ></text>
</g>
<g >
<title>apache::thrift::server::TNonblockingServer::TConnection::Task::run (7,641,072,083 samples, 1.98%)</title><rect x="1089.0" y="869" width="23.3" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="1092.00" y="879.5" >a..</text>
</g>
<g >
<title>std::_Function_handler&lt;void  (49,122,727 samples, 0.01%)</title><rect x="1082.5" y="821" width="0.2" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1085.52" y="831.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt; &gt;::operator[] (431,156,737 samples, 0.11%)</title><rect x="1117.4" y="853" width="1.3" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="1120.41" y="863.5" ></text>
</g>
<g >
<title>tcache_get (49,780,272 samples, 0.01%)</title><rect x="881.3" y="709" width="0.2" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="884.31" y="719.5" ></text>
</g>
<g >
<title>__x64_sys_recvfrom (60,939,028 samples, 0.02%)</title><rect x="202.5" y="645" width="0.2" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="205.54" y="655.5" ></text>
</g>
<g >
<title>page_counter_uncharge (35,594,671 samples, 0.01%)</title><rect x="1083.3" y="565" width="0.1" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="1086.26" y="575.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (101,808,800 samples, 0.03%)</title><rect x="1013.4" y="725" width="0.3" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1016.39" y="735.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr (37,103,324 samples, 0.01%)</title><rect x="463.6" y="629" width="0.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="466.56" y="639.5" ></text>
</g>
<g >
<title>void std::__relocate_object_a&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (127,207,767 samples, 0.03%)</title><rect x="1116.1" y="773" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1119.08" y="783.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::length (112,866,238 samples, 0.03%)</title><rect x="84.5" y="933" width="0.3" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="87.45" y="943.5" ></text>
</g>
<g >
<title>lll_mutex_unlock_optimized (142,726,724 samples, 0.04%)</title><rect x="538.8" y="693" width="0.4" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="541.76" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (56,998,934 samples, 0.01%)</title><rect x="987.6" y="693" width="0.2" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="990.58" y="703.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; std::allocate_shared&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;&gt; (684,347,810 samples, 0.18%)</title><rect x="1095.5" y="741" width="2.1" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="1098.54" y="751.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt; std::_Rb_tree&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;, std::_Identity&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt;, bool  (792,369,440 samples, 0.20%)</title><rect x="1141.3" y="821" width="2.4" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1144.33" y="831.5" ></text>
</g>
<g >
<title>operator new (326,203,617 samples, 0.08%)</title><rect x="1081.2" y="789" width="1.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1084.21" y="799.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare (499,307,641 samples, 0.13%)</title><rect x="574.7" y="661" width="1.5" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="577.67" y="671.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (216,489,855 samples, 0.06%)</title><rect x="903.4" y="709" width="0.7" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="906.40" y="719.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (132,475,330 samples, 0.03%)</title><rect x="465.0" y="741" width="0.4" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="468.05" y="751.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::allocate (82,091,495 samples, 0.02%)</title><rect x="902.1" y="629" width="0.3" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="905.13" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt;::_M_node_allocator (37,725,684 samples, 0.01%)</title><rect x="1014.1" y="709" width="0.1" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="1017.11" y="719.5" ></text>
</g>
<g >
<title>do_syscall_64 (68,679,989 samples, 0.02%)</title><rect x="1093.1" y="597" width="0.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1096.10" y="607.5" ></text>
</g>
<g >
<title>CRYPTO_zalloc (105,254,170 samples, 0.03%)</title><rect x="45.6" y="933" width="0.3" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="48.57" y="943.5" ></text>
</g>
<g >
<title>std::mutex::lock (45,431,987 samples, 0.01%)</title><rect x="1117.0" y="837" width="0.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1120.01" y="847.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_Setter&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;::operator (40,999,304 samples, 0.01%)</title><rect x="469.7" y="549" width="0.1" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="472.72" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__detail::_Identity, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (172,954,459 samples, 0.04%)</title><rect x="1010.7" y="693" width="0.5" height="15.0" fill="rgb(214,41,10)" rx="2" ry="2" />
<text  x="1013.70" y="703.5" ></text>
</g>
<g >
<title>EVP_CipherInit_ex (633,449,938 samples, 0.16%)</title><rect x="839.7" y="741" width="1.9" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="842.70" y="751.5" ></text>
</g>
<g >
<title>std::_Rb_tree_const_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt;::operator++ (589,008,977 samples, 0.15%)</title><rect x="962.8" y="789" width="1.8" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="965.79" y="799.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (146,252,865 samples, 0.04%)</title><rect x="458.8" y="645" width="0.5" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="461.85" y="655.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::_Vector_impl::_Vector_impl (65,403,478 samples, 0.02%)</title><rect x="444.9" y="613" width="0.2" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="447.91" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::_M_valptr (33,551,789 samples, 0.01%)</title><rect x="1015.6" y="709" width="0.1" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1018.64" y="719.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (129,964,411 samples, 0.03%)</title><rect x="953.5" y="773" width="0.4" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="956.50" y="783.5" ></text>
</g>
<g >
<title>__ip_finish_output (34,007,746 samples, 0.01%)</title><rect x="204.0" y="357" width="0.1" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="207.04" y="367.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (57,818,541 samples, 0.01%)</title><rect x="891.8" y="661" width="0.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="894.82" y="671.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;::~pair (45,069,370 samples, 0.01%)</title><rect x="1143.9" y="821" width="0.1" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="1146.89" y="831.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node_base*&gt; &gt;::allocate (43,579,596 samples, 0.01%)</title><rect x="1012.7" y="661" width="0.2" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="1015.72" y="671.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::shared_ptr (295,587,727 samples, 0.08%)</title><rect x="449.1" y="709" width="0.9" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="452.12" y="719.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__relocate_a_1&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (229,710,399 samples, 0.06%)</title><rect x="933.8" y="693" width="0.7" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="936.77" y="703.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;void  (854,154,066 samples, 0.22%)</title><rect x="809.0" y="645" width="2.6" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="811.98" y="655.5" ></text>
</g>
<g >
<title>_int_malloc (152,945,857 samples, 0.04%)</title><rect x="946.1" y="693" width="0.5" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="949.11" y="703.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (151,804,281 samples, 0.04%)</title><rect x="1106.3" y="597" width="0.4" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1109.27" y="607.5" ></text>
</g>
<g >
<title>apache::thrift::protocol::TVirtualProtocol&lt;apache::thrift::protocol::TBinaryProtocolT&lt;apache::thrift::transport::TTransport, apache::thrift::protocol::TNetworkBigEndian&gt;, apache::thrift::protocol::TProtocolDefaults&gt;::readFieldBegin_virt (33,971,680 samples, 0.01%)</title><rect x="1097.7" y="773" width="0.1" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="1100.71" y="783.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::push_back (3,085,986,693 samples, 0.80%)</title><rect x="1019.9" y="789" width="9.4" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1022.93" y="799.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (51,538,581 samples, 0.01%)</title><rect x="92.1" y="933" width="0.2" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="95.12" y="943.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (389,252,269 samples, 0.10%)</title><rect x="211.5" y="709" width="1.2" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="214.52" y="719.5" ></text>
</g>
<g >
<title>malloc_consolidate (496,116,847 samples, 0.13%)</title><rect x="1109.4" y="661" width="1.5" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1112.35" y="671.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;std::__future_base::_Result&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__future_base::_Result_base::_Deleter, true, true&gt;::__uniq_ptr_impl (57,282,277 samples, 0.01%)</title><rect x="1108.0" y="597" width="0.2" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1111.01" y="607.5" ></text>
</g>
<g >
<title>_int_free (179,780,405 samples, 0.05%)</title><rect x="1074.8" y="789" width="0.5" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1077.78" y="799.5" ></text>
</g>
<g >
<title>rand (230,551,413 samples, 0.06%)</title><rect x="1151.5" y="837" width="0.7" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="1154.53" y="847.5" ></text>
</g>
<g >
<title>__gnu_cxx::__enable_if&lt;std::__is_char&lt;char&gt;::__value, bool&gt;::__type std::operator==&lt;char&gt; (47,780,350 samples, 0.01%)</title><rect x="58.4" y="933" width="0.2" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="61.43" y="943.5" ></text>
</g>
<g >
<title>decltype  (77,858,057 samples, 0.02%)</title><rect x="511.2" y="693" width="0.3" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="514.24" y="703.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::find (105,041,199 samples, 0.03%)</title><rect x="1067.4" y="709" width="0.3" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="1070.40" y="719.5" ></text>
</g>
<g >
<title>__x64_sys_write (110,776,464 samples, 0.03%)</title><rect x="1082.7" y="757" width="0.3" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1085.68" y="767.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (154,498,586 samples, 0.04%)</title><rect x="960.4" y="629" width="0.4" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="963.36" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (206,898,804 samples, 0.05%)</title><rect x="919.9" y="741" width="0.6" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="922.91" y="751.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt; &gt;::allocate (154,774,539 samples, 0.04%)</title><rect x="1173.4" y="789" width="0.5" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="1176.43" y="799.5" ></text>
</g>
<g >
<title>void std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_range_insert&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; (245,959,928 samples, 0.06%)</title><rect x="209.6" y="741" width="0.7" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="212.56" y="751.5" ></text>
</g>
<g >
<title>CRYPTO_zalloc (822,475,404 samples, 0.21%)</title><rect x="864.0" y="709" width="2.5" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="866.99" y="719.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (854,801,754 samples, 0.22%)</title><rect x="1144.2" y="821" width="2.6" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1147.21" y="831.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::~lock_guard (39,284,481 samples, 0.01%)</title><rect x="451.0" y="773" width="0.2" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="454.05" y="783.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (625,413,018 samples, 0.16%)</title><rect x="864.3" y="693" width="1.9" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="867.33" y="703.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;char*&gt;::difference_type std::distance&lt;char*&gt; (61,954,245 samples, 0.02%)</title><rect x="580.2" y="741" width="0.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="583.16" y="751.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::find (101,345,631 samples, 0.03%)</title><rect x="881.8" y="773" width="0.3" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="884.78" y="783.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (71,940,566 samples, 0.02%)</title><rect x="830.2" y="709" width="0.3" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="833.25" y="719.5" ></text>
</g>
<g >
<title>__GI___pthread_mutex_unlock_usercnt (78,182,444 samples, 0.02%)</title><rect x="527.7" y="709" width="0.3" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="530.75" y="719.5" ></text>
</g>
<g >
<title>operator new (67,117,880 samples, 0.02%)</title><rect x="833.7" y="693" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="836.72" y="703.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (35,941,144 samples, 0.01%)</title><rect x="918.9" y="661" width="0.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="921.91" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, true&gt;* std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (1,199,682,164 samples, 0.31%)</title><rect x="441.9" y="725" width="3.7" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="444.91" y="735.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (394,358,244 samples, 0.10%)</title><rect x="439.3" y="757" width="1.2" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="442.31" y="767.5" ></text>
</g>
<g >
<title>_int_free (159,268,164 samples, 0.04%)</title><rect x="1063.8" y="805" width="0.5" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1066.82" y="815.5" ></text>
</g>
<g >
<title>ip_local_out (132,349,110 samples, 0.03%)</title><rect x="1085.3" y="581" width="0.4" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1088.32" y="591.5" ></text>
</g>
<g >
<title>apache::thrift::server::TNonblockingServer::TConnection::notifyIOThread (346,240,568 samples, 0.09%)</title><rect x="1111.2" y="853" width="1.0" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1114.19" y="863.5" ></text>
</g>
<g >
<title>unlink_chunk (41,798,931 samples, 0.01%)</title><rect x="108.6" y="933" width="0.1" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="111.61" y="943.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (63,103,517 samples, 0.02%)</title><rect x="72.6" y="933" width="0.2" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="75.64" y="943.5" ></text>
</g>
<g >
<title>futex_wait_queue (34,807,392 samples, 0.01%)</title><rect x="953.3" y="581" width="0.1" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="956.28" y="591.5" ></text>
</g>
<g >
<title>encryption_engine::extractKey (313,786,287 samples, 0.08%)</title><rect x="846.9" y="773" width="1.0" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="849.91" y="783.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;::~pair (45,241,901 samples, 0.01%)</title><rect x="44.7" y="933" width="0.1" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="47.69" y="943.5" ></text>
</g>
<g >
<title>_int_malloc (36,249,743 samples, 0.01%)</title><rect x="1165.5" y="805" width="0.1" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1168.52" y="815.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (120,580,577 samples, 0.03%)</title><rect x="445.1" y="645" width="0.4" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="448.11" y="655.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (252,185,215 samples, 0.07%)</title><rect x="1121.6" y="757" width="0.8" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1124.62" y="767.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, true&gt; &gt; &gt;::allocate (268,896,190 samples, 0.07%)</title><rect x="831.4" y="709" width="0.9" height="15.0" fill="rgb(216,54,12)" rx="2" ry="2" />
<text  x="834.44" y="719.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_assign (633,452,297 samples, 0.16%)</title><rect x="970.1" y="773" width="1.9" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="973.11" y="783.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, false, true&gt;::operator (107,190,875 samples, 0.03%)</title><rect x="1003.4" y="757" width="0.4" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="1006.44" y="767.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_erase (52,852,667 samples, 0.01%)</title><rect x="431.7" y="757" width="0.2" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="434.72" y="767.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::_M_ptr (80,532,912 samples, 0.02%)</title><rect x="511.5" y="661" width="0.3" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="514.54" y="671.5" ></text>
</g>
<g >
<title>operator new (238,184,445 samples, 0.06%)</title><rect x="1070.2" y="741" width="0.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1073.23" y="751.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::push_back (842,747,801 samples, 0.22%)</title><rect x="1175.8" y="869" width="2.6" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1178.78" y="879.5" ></text>
</g>
<g >
<title>operator new (303,978,753 samples, 0.08%)</title><rect x="216.2" y="773" width="1.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="219.24" y="783.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;cpp_redis::reply&gt;::deallocate (105,074,009 samples, 0.03%)</title><rect x="917.3" y="693" width="0.3" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="920.32" y="703.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;char*&gt;::difference_type std::__distance&lt;char*&gt; (224,825,875 samples, 0.06%)</title><rect x="94.6" y="933" width="0.7" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="97.64" y="943.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::deallocate (121,159,207 samples, 0.03%)</title><rect x="910.4" y="693" width="0.3" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="913.35" y="703.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (264,049,339 samples, 0.07%)</title><rect x="1173.3" y="837" width="0.9" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1176.35" y="847.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;char*&gt;::difference_type std::distance&lt;char*&gt; (234,598,450 samples, 0.06%)</title><rect x="35.4" y="933" width="0.7" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="38.36" y="943.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt; std::_Rb_tree&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;, std::_Identity&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt;, bool  (1,673,998,319 samples, 0.43%)</title><rect x="788.0" y="741" width="5.1" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="790.95" y="751.5" ></text>
</g>
<g >
<title>__GI___libc_free (76,616,317 samples, 0.02%)</title><rect x="1157.2" y="837" width="0.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1160.15" y="847.5" ></text>
</g>
<g >
<title>__gthread_mutex_unlock (68,639,392 samples, 0.02%)</title><rect x="1103.9" y="709" width="0.2" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="1106.88" y="719.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt;::_M_valptr (187,471,998 samples, 0.05%)</title><rect x="76.6" y="933" width="0.5" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="79.57" y="943.5" ></text>
</g>
<g >
<title>tacopie::tcp_client::process_write (710,250,136 samples, 0.18%)</title><rect x="1084.1" y="853" width="2.2" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="1087.12" y="863.5" ></text>
</g>
<g >
<title>_int_free (85,403,178 samples, 0.02%)</title><rect x="462.3" y="629" width="0.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="465.32" y="639.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (55,640,043 samples, 0.01%)</title><rect x="109.9" y="933" width="0.2" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="112.92" y="943.5" ></text>
</g>
<g >
<title>do_syscall_64 (63,046,455 samples, 0.02%)</title><rect x="204.0" y="629" width="0.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="206.96" y="639.5" ></text>
</g>
<g >
<title>std::remove_reference&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt;::type&amp;&amp; std::move&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt; (32,905,449 samples, 0.01%)</title><rect x="186.1" y="933" width="0.1" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="189.09" y="943.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (131,948,112 samples, 0.03%)</title><rect x="1173.5" y="757" width="0.4" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1176.47" y="767.5" ></text>
</g>
<g >
<title>operator new (200,125,802 samples, 0.05%)</title><rect x="1142.4" y="725" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1145.42" y="735.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (174,436,955 samples, 0.05%)</title><rect x="1014.8" y="677" width="0.5" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1017.81" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (127,167,627 samples, 0.03%)</title><rect x="1118.0" y="789" width="0.4" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="1120.96" y="799.5" ></text>
</g>
<g >
<title>operation::operation (724,813,275 samples, 0.19%)</title><rect x="476.8" y="677" width="2.2" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="479.81" y="687.5" ></text>
</g>
<g >
<title>operator new (34,016,703 samples, 0.01%)</title><rect x="988.9" y="645" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="991.87" y="655.5" ></text>
</g>
<g >
<title>___pthread_once (86,154,577 samples, 0.02%)</title><rect x="465.6" y="725" width="0.3" height="15.0" fill="rgb(233,128,30)" rx="2" ry="2" />
<text  x="468.60" y="735.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;* std::__relocate_a&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;*, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;*, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; (485,283,310 samples, 0.13%)</title><rect x="959.8" y="693" width="1.5" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="962.77" y="703.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;, std::_Identity&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt;, bool  (24,697,865,767 samples, 6.39%)</title><rect x="712.6" y="741" width="75.4" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="715.57" y="751.5" >std::_Rb..</text>
</g>
<g >
<title>std::__shared_ptr&lt;queue&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;,  (2,563,000,801 samples, 0.66%)</title><rect x="162.0" y="933" width="7.8" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="165.02" y="943.5" ></text>
</g>
<g >
<title>std::mutex::lock (110,207,955 samples, 0.03%)</title><rect x="804.7" y="757" width="0.4" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="807.73" y="767.5" ></text>
</g>
<g >
<title>waffle_proxy::async_put_batch (2,620,982,038 samples, 0.68%)</title><rect x="1100.4" y="789" width="8.0" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="1103.43" y="799.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (39,750,473 samples, 0.01%)</title><rect x="427.7" y="773" width="0.1" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="430.65" y="783.5" ></text>
</g>
<g >
<title>tcp_recvmsg_locked (111,666,157 samples, 0.03%)</title><rect x="1083.1" y="677" width="0.3" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="1086.10" y="687.5" ></text>
</g>
<g >
<title>std::mutex::lock (68,420,737 samples, 0.02%)</title><rect x="1103.7" y="709" width="0.2" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1106.68" y="719.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (1,088,862,897 samples, 0.28%)</title><rect x="560.4" y="709" width="3.3" height="15.0" fill="rgb(220,71,16)" rx="2" ry="2" />
<text  x="563.39" y="719.5" ></text>
</g>
<g >
<title>std::__allocated_ptr&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;,  (42,166,230 samples, 0.01%)</title><rect x="1097.3" y="677" width="0.1" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="1100.29" y="687.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy_chars (116,024,024 samples, 0.03%)</title><rect x="1051.0" y="773" width="0.3" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="1053.97" y="783.5" ></text>
</g>
<g >
<title>futex_wake (522,531,813 samples, 0.14%)</title><rect x="807.1" y="613" width="1.6" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="810.12" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;::_M_ptr (47,751,647 samples, 0.01%)</title><rect x="799.2" y="661" width="0.1" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="802.20" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_S_do_relocate (561,459,947 samples, 0.15%)</title><rect x="946.8" y="693" width="1.7" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="949.83" y="703.5" ></text>
</g>
<g >
<title>cpp_redis::network::redis_connection::build_command (549,462,211 samples, 0.14%)</title><rect x="1158.0" y="757" width="1.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1160.97" y="767.5" ></text>
</g>
<g >
<title>futex_wait_queue (212,042,968 samples, 0.05%)</title><rect x="1087.8" y="661" width="0.7" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="1090.81" y="671.5" ></text>
</g>
<g >
<title>std::unique_lock&lt;std::mutex&gt;::unique_lock (352,100,256 samples, 0.09%)</title><rect x="458.2" y="773" width="1.1" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="461.23" y="783.5" ></text>
</g>
<g >
<title>std::once_flag::_Prepare_execution::~_Prepare_execution (32,917,247 samples, 0.01%)</title><rect x="472.8" y="741" width="0.1" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="475.79" y="751.5" ></text>
</g>
<g >
<title>std::vector&lt;cpp_redis::reply, std::allocator&lt;cpp_redis::reply&gt; &gt;::vector (341,417,845 samples, 0.09%)</title><rect x="914.9" y="757" width="1.0" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="917.88" y="767.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_node_ptr (244,066,890 samples, 0.06%)</title><rect x="505.6" y="693" width="0.8" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="508.64" y="703.5" ></text>
</g>
<g >
<title>__x64_sys_recvfrom (63,046,455 samples, 0.02%)</title><rect x="204.0" y="613" width="0.2" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="206.96" y="623.5" ></text>
</g>
<g >
<title>operation::operation (35,387,682 samples, 0.01%)</title><rect x="452.7" y="789" width="0.1" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="455.68" y="799.5" ></text>
</g>
<g >
<title>std::unique_lock&lt;std::mutex&gt;::lock (72,918,539 samples, 0.02%)</title><rect x="1103.7" y="725" width="0.2" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="1106.66" y="735.5" ></text>
</g>
<g >
<title>cpp_redis::reply::~reply (326,174,480 samples, 0.08%)</title><rect x="926.6" y="693" width="1.0" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="929.60" y="703.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1,513,410,021 samples, 0.39%)</title><rect x="796.5" y="725" width="4.6" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="799.47" y="735.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::erase (277,049,641 samples, 0.07%)</title><rect x="524.0" y="773" width="0.9" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="527.02" y="783.5" ></text>
</g>
<g >
<title>freqCmp (172,409,544 samples, 0.04%)</title><rect x="68.7" y="933" width="0.6" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="71.75" y="943.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (1,179,197,458 samples, 0.31%)</title><rect x="434.9" y="757" width="3.6" height="15.0" fill="rgb(253,225,53)" rx="2" ry="2" />
<text  x="437.88" y="767.5" ></text>
</g>
<g >
<title>operator new (275,402,857 samples, 0.07%)</title><rect x="901.1" y="613" width="0.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="904.06" y="623.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (63,046,455 samples, 0.02%)</title><rect x="204.0" y="645" width="0.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="206.96" y="655.5" ></text>
</g>
<g >
<title>__gthread_mutex_lock (100,909,364 samples, 0.03%)</title><rect x="882.2" y="741" width="0.3" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="885.22" y="751.5" ></text>
</g>
<g >
<title>cpp_redis::reply* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;cpp_redis::reply const*, std::vector&lt;cpp_redis::reply, std::allocator&lt;cpp_redis::reply&gt; &gt; &gt;, cpp_redis::reply*&gt; (1,172,872,181 samples, 0.30%)</title><rect x="921.7" y="741" width="3.6" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="924.71" y="751.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::_List_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::deallocate (50,773,619 samples, 0.01%)</title><rect x="524.2" y="709" width="0.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="527.16" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (605,136,769 samples, 0.16%)</title><rect x="1015.4" y="741" width="1.9" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="1018.45" y="751.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (38,121,474 samples, 0.01%)</title><rect x="859.0" y="773" width="0.1" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="862.03" y="783.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;std::__future_base::_State_baseV2&gt; std::allocate_shared&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;&gt; (326,864,299 samples, 0.08%)</title><rect x="1096.2" y="597" width="1.0" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1099.21" y="607.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::deallocate (799,397,902 samples, 0.21%)</title><rect x="1178.4" y="821" width="2.5" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1181.42" y="831.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (1,614,951,323 samples, 0.42%)</title><rect x="796.2" y="741" width="5.0" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="799.23" y="751.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (215,455,380 samples, 0.06%)</title><rect x="1014.7" y="693" width="0.6" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1017.69" y="703.5" ></text>
</g>
<g >
<title>std::__allocated_ptr&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;,  (134,155,615 samples, 0.03%)</title><rect x="462.2" y="693" width="0.4" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="465.19" y="703.5" ></text>
</g>
<g >
<title>sysmalloc (35,718,104 samples, 0.01%)</title><rect x="1097.0" y="437" width="0.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1100.03" y="447.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (308,376,273 samples, 0.08%)</title><rect x="972.0" y="789" width="1.0" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="975.05" y="799.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned_erms (65,166,920 samples, 0.02%)</title><rect x="961.6" y="757" width="0.2" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="964.61" y="767.5" ></text>
</g>
<g >
<title>apache::thrift::transport::TSocket::write_partial (407,960,148 samples, 0.11%)</title><rect x="1059.8" y="645" width="1.2" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="1062.78" y="655.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt; &gt;::type&amp; std::get&lt;0ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt; (42,892,662 samples, 0.01%)</title><rect x="811.1" y="549" width="0.1" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="814.09" y="559.5" ></text>
</g>
<g >
<title>arena_for_chunk (104,707,679 samples, 0.03%)</title><rect x="837.8" y="757" width="0.3" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="840.77" y="767.5" ></text>
</g>
<g >
<title>lll_mutex_unlock_optimized (58,556,819 samples, 0.02%)</title><rect x="1103.9" y="661" width="0.2" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="1106.92" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::push_back (247,887,522 samples, 0.06%)</title><rect x="1164.6" y="853" width="0.8" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="1167.60" y="863.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;char*&gt;::difference_type std::distance&lt;char*&gt; (75,663,039 samples, 0.02%)</title><rect x="529.9" y="725" width="0.3" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="532.93" y="735.5" ></text>
</g>
<g >
<title>void std::vector&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::emplace_back&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (323,936,830 samples, 0.08%)</title><rect x="1090.3" y="757" width="1.0" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="1093.29" y="767.5" ></text>
</g>
<g >
<title>heap_for_ptr (93,046,802 samples, 0.02%)</title><rect x="837.8" y="741" width="0.3" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="840.81" y="751.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::clear (94,213,797 samples, 0.02%)</title><rect x="1175.5" y="869" width="0.2" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="1178.45" y="879.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::_S_relocate (131,950,000 samples, 0.03%)</title><rect x="448.4" y="741" width="0.4" height="15.0" fill="rgb(252,217,51)" rx="2" ry="2" />
<text  x="451.37" y="751.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (417,229,579 samples, 0.11%)</title><rect x="907.6" y="613" width="1.3" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="910.65" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1,250,695,712 samples, 0.32%)</title><rect x="1167.6" y="821" width="3.8" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="1170.58" y="831.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (300,997,279 samples, 0.08%)</title><rect x="925.3" y="661" width="0.9" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="928.29" y="671.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (95,629,761 samples, 0.02%)</title><rect x="1149.5" y="757" width="0.3" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1152.50" y="767.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (71,502,794 samples, 0.02%)</title><rect x="1093.8" y="709" width="0.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1096.77" y="719.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::allocate (106,930,579 samples, 0.03%)</title><rect x="1090.5" y="693" width="0.3" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="1093.49" y="703.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__future_base::_Result_base::_Deleter&gt;::__uniq_ptr_impl (57,282,277 samples, 0.01%)</title><rect x="1108.0" y="581" width="0.2" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1111.01" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (453,479,219 samples, 0.12%)</title><rect x="1171.7" y="805" width="1.4" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1174.72" y="815.5" ></text>
</g>
<g >
<title>do_anonymous_page (68,814,349 samples, 0.02%)</title><rect x="1155.8" y="677" width="0.2" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1158.80" y="687.5" ></text>
</g>
<g >
<title>EVP_MD_CTX_reset (226,498,014 samples, 0.06%)</title><rect x="47.4" y="933" width="0.7" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="50.39" y="943.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (218,409,536 samples, 0.06%)</title><rect x="921.0" y="629" width="0.7" height="15.0" fill="rgb(206,9,2)" rx="2" ry="2" />
<text  x="924.04" y="639.5" ></text>
</g>
<g >
<title>dequeue_task_fair (50,144,134 samples, 0.01%)</title><rect x="1054.2" y="549" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1057.22" y="559.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (163,460,393 samples, 0.04%)</title><rect x="211.0" y="725" width="0.5" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="214.00" y="735.5" ></text>
</g>
<g >
<title>__GI___libc_free (436,709,782 samples, 0.11%)</title><rect x="1139.2" y="789" width="1.4" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1142.25" y="799.5" ></text>
</g>
<g >
<title>___pthread_cond_signal (37,066,438 samples, 0.01%)</title><rect x="1091.5" y="741" width="0.1" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1094.54" y="751.5" ></text>
</g>
<g >
<title>_GLOBAL_OFFSET_TABLE_ (134,136,030 samples, 0.03%)</title><rect x="201.3" y="949" width="0.4" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="204.29" y="959.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (35,646,359 samples, 0.01%)</title><rect x="830.0" y="709" width="0.1" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="833.03" y="719.5" ></text>
</g>
<g >
<title>EVP_MD_block_size (36,670,100 samples, 0.01%)</title><rect x="114.2" y="933" width="0.1" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="117.20" y="943.5" ></text>
</g>
<g >
<title>operator new (255,870,248 samples, 0.07%)</title><rect x="831.5" y="677" width="0.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="834.48" y="687.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, void  (1,113,463,724 samples, 0.29%)</title><rect x="469.3" y="645" width="3.4" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="472.33" y="655.5" ></text>
</g>
<g >
<title>void std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::_M_realloc_insert&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;&gt; (1,169,108,787 samples, 0.30%)</title><rect x="446.5" y="757" width="3.5" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="449.45" y="767.5" ></text>
</g>
<g >
<title>__GI___libc_free (799,397,902 samples, 0.21%)</title><rect x="1178.4" y="789" width="2.5" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1181.42" y="799.5" ></text>
</g>
<g >
<title>decltype  (33,296,762 samples, 0.01%)</title><rect x="498.9" y="693" width="0.1" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="501.88" y="703.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;cpp_redis::reply&gt; (264,199,351 samples, 0.07%)</title><rect x="917.9" y="693" width="0.8" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="920.89" y="703.5" ></text>
</g>
<g >
<title>apache::thrift::protocol::TBinaryProtocolT&lt;apache::thrift::transport::TTransport, apache::thrift::protocol::TNetworkBigEndian&gt;::readI32 (53,333,425 samples, 0.01%)</title><rect x="1097.8" y="741" width="0.2" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1100.85" y="751.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter, true, true&gt;::__uniq_ptr_impl (40,389,659 samples, 0.01%)</title><rect x="1096.4" y="453" width="0.2" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="1099.45" y="463.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, true&gt; &gt; &gt;::allocate (597,807,798 samples, 0.15%)</title><rect x="442.3" y="709" width="1.9" height="15.0" fill="rgb(216,54,12)" rx="2" ry="2" />
<text  x="445.33" y="719.5" ></text>
</g>
<g >
<title>EVP_MD_CTX_md_data (42,515,715 samples, 0.01%)</title><rect x="47.3" y="933" width="0.1" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="50.26" y="943.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (34,801,389 samples, 0.01%)</title><rect x="38.0" y="933" width="0.2" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="41.05" y="943.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt;::_M_valptr (43,967,115 samples, 0.01%)</title><rect x="597.0" y="693" width="0.2" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="600.02" y="703.5" ></text>
</g>
<g >
<title>std::__future_base::_Result&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::_M_set (84,116,895 samples, 0.02%)</title><rect x="809.4" y="517" width="0.3" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="812.42" y="527.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;::~pair (750,114,335 samples, 0.19%)</title><rect x="1138.9" y="805" width="2.3" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="1141.94" y="815.5" ></text>
</g>
<g >
<title>perf_iterate_sb (35,718,104 samples, 0.01%)</title><rect x="1097.0" y="277" width="0.1" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="1100.03" y="287.5" ></text>
</g>
<g >
<title>free@plt (182,924,566 samples, 0.05%)</title><rect x="783.5" y="709" width="0.6" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="786.53" y="719.5" ></text>
</g>
<g >
<title>encryption_engine::gen_random[abi:cxx11] (986,279,761 samples, 0.26%)</title><rect x="853.8" y="773" width="3.0" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="856.83" y="783.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, true&gt; &gt; &gt;::destroy&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; (122,453,387 samples, 0.03%)</title><rect x="506.4" y="693" width="0.4" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="509.41" y="703.5" ></text>
</g>
<g >
<title>queue&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::push (2,281,423,541 samples, 0.59%)</title><rect x="895.6" y="789" width="6.9" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="898.55" y="799.5" ></text>
</g>
<g >
<title>std::mutex::lock (44,202,077 samples, 0.01%)</title><rect x="422.0" y="757" width="0.2" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="425.02" y="767.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (475,665,851 samples, 0.12%)</title><rect x="970.6" y="741" width="1.4" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="973.56" y="751.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (246,434,896 samples, 0.06%)</title><rect x="435.1" y="741" width="0.8" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="438.12" y="751.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (491,096,321 samples, 0.13%)</title><rect x="1147.6" y="805" width="1.5" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="1150.57" y="815.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (792,049,359 samples, 0.20%)</title><rect x="987.8" y="725" width="2.4" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="990.78" y="735.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;std::__future_base::_State_baseV2&gt;::shared_ptr&lt;std::allocator&lt;std::__future_base::_State_baseV2&gt;&gt; (322,832,260 samples, 0.08%)</title><rect x="1096.2" y="581" width="1.0" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1099.22" y="591.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (35,771,255 samples, 0.01%)</title><rect x="907.2" y="677" width="0.1" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="910.20" y="687.5" ></text>
</g>
<g >
<title>queue&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::push (690,931,416 samples, 0.18%)</title><rect x="1091.5" y="757" width="2.1" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="1094.49" y="767.5" ></text>
</g>
<g >
<title>cpp_redis::network::redis_connection::send (1,439,627,627 samples, 0.37%)</title><rect x="938.3" y="693" width="4.4" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="941.27" y="703.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;::construct&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; (37,781,263 samples, 0.01%)</title><rect x="1092.7" y="677" width="0.1" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1095.73" y="687.5" ></text>
</g>
<g >
<title>inet_sendmsg (575,556,389 samples, 0.15%)</title><rect x="1084.5" y="725" width="1.8" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="1087.52" y="735.5" ></text>
</g>
<g >
<title>_int_free (36,427,793 samples, 0.01%)</title><rect x="1150.7" y="773" width="0.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1153.73" y="783.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::construct&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (61,098,300 samples, 0.02%)</title><rect x="1091.0" y="645" width="0.2" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="1094.02" y="655.5" ></text>
</g>
<g >
<title>__do_softirq (34,007,746 samples, 0.01%)</title><rect x="204.0" y="261" width="0.1" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="207.04" y="271.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__future_base::_Result_base::_Deleter&gt; std::__invoke_impl&lt;std::unique_ptr&lt;std::__future_base::_Result&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__future_base::_Result_base::_Deleter&gt;, std::__future_base::_State_baseV2::_Setter&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;&amp;&gt; (44,912,044 samples, 0.01%)</title><rect x="469.7" y="565" width="0.1" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="472.71" y="575.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (2,288,387,703 samples, 0.59%)</title><rect x="1124.3" y="789" width="7.0" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1127.32" y="799.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;int, std::pair&lt;int const, std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (103,491,373 samples, 0.03%)</title><rect x="1163.8" y="837" width="0.3" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1166.79" y="847.5" ></text>
</g>
<g >
<title>apache::thrift::transport::TVirtualTransport&lt;apache::thrift::transport::TFramedTransport, apache::thrift::transport::TBufferBase&gt;::write_virt (52,612,090 samples, 0.01%)</title><rect x="1061.6" y="613" width="0.2" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1064.65" y="623.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy_chars (697,291,784 samples, 0.18%)</title><rect x="764.9" y="693" width="2.2" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="767.93" y="703.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (208,195,931 samples, 0.05%)</title><rect x="539.8" y="741" width="0.6" height="15.0" fill="rgb(220,71,16)" rx="2" ry="2" />
<text  x="542.76" y="751.5" ></text>
</g>
<g >
<title>std::__allocated_ptr&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (185,868,852 samples, 0.05%)</title><rect x="1096.6" y="533" width="0.5" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="1099.57" y="543.5" ></text>
</g>
<g >
<title>__x64_sys_futex (35,265,253 samples, 0.01%)</title><rect x="805.7" y="693" width="0.1" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="808.68" y="703.5" ></text>
</g>
<g >
<title>tacopie::utils::thread_pool::fetch_task_or_stop (410,058,458 samples, 0.11%)</title><rect x="1086.3" y="885" width="1.2" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="1089.28" y="895.5" ></text>
</g>
<g >
<title>__gnu_cxx::__enable_if&lt;std::__is_char&lt;char&gt;::__value, bool&gt;::__type std::operator==&lt;char&gt; (37,241,797 samples, 0.01%)</title><rect x="531.3" y="661" width="0.1" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="534.28" y="671.5" ></text>
</g>
<g >
<title>operation::operation (751,280,388 samples, 0.19%)</title><rect x="474.4" y="741" width="2.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="477.36" y="751.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (40,386,765 samples, 0.01%)</title><rect x="1101.8" y="549" width="0.2" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1104.83" y="559.5" ></text>
</g>
<g >
<title>evictedItems::erase (1,889,759,869 samples, 0.49%)</title><rect x="882.1" y="789" width="5.8" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="885.09" y="799.5" ></text>
</g>
<g >
<title>__GI___libc_free (171,676,318 samples, 0.04%)</title><rect x="1063.8" y="821" width="0.5" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1066.78" y="831.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (748,914,716 samples, 0.19%)</title><rect x="428.6" y="741" width="2.3" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="431.57" y="751.5" ></text>
</g>
<g >
<title>SHA256_Update (193,895,129 samples, 0.05%)</title><rect x="874.1" y="725" width="0.6" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="877.10" y="735.5" ></text>
</g>
<g >
<title>operator new (520,881,639 samples, 0.13%)</title><rect x="998.1" y="645" width="1.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1001.14" y="655.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;,  (697,951,408 samples, 0.18%)</title><rect x="817.7" y="501" width="2.1" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="820.67" y="511.5" ></text>
</g>
<g >
<title>__ip_queue_xmit (39,855,310 samples, 0.01%)</title><rect x="1085.9" y="613" width="0.1" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1088.88" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_deallocate_buckets (196,316,822 samples, 0.05%)</title><rect x="1004.2" y="757" width="0.6" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1007.16" y="767.5" ></text>
</g>
<g >
<title>arena_for_chunk (33,035,148 samples, 0.01%)</title><rect x="1082.5" y="789" width="0.1" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1085.54" y="799.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::operator[] (8,899,535,048 samples, 2.30%)</title><rect x="977.0" y="789" width="27.1" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="979.97" y="799.5" >s..</text>
</g>
<g >
<title>__x64_sys_sendto (400,103,186 samples, 0.10%)</title><rect x="1059.8" y="565" width="1.2" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="1062.80" y="575.5" ></text>
</g>
<g >
<title>__GI___libc_free (173,848,535 samples, 0.04%)</title><rect x="926.7" y="677" width="0.5" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="929.67" y="687.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_set_result (2,673,263,558 samples, 0.69%)</title><rect x="464.7" y="773" width="8.2" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="467.73" y="783.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;*&gt; (56,730,796 samples, 0.01%)</title><rect x="1057.8" y="725" width="0.2" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1060.79" y="735.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;,  (543,415,364 samples, 0.14%)</title><rect x="1095.6" y="677" width="1.7" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1098.63" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_S_equals (165,711,724 samples, 0.04%)</title><rect x="824.1" y="693" width="0.5" height="15.0" fill="rgb(208,16,4)" rx="2" ry="2" />
<text  x="827.11" y="703.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned_erms (64,340,159 samples, 0.02%)</title><rect x="900.8" y="613" width="0.2" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="903.82" y="623.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned_erms (779,848,210 samples, 0.20%)</title><rect x="1043.9" y="773" width="2.4" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1046.94" y="783.5" ></text>
</g>
<g >
<title>gen_random[abi:cxx11] (120,102,440 samples, 0.03%)</title><rect x="894.9" y="789" width="0.3" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="897.85" y="799.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_const_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt;, bool&gt;::pair&lt;std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt;&amp;, bool&amp;, true&gt; (64,770,303 samples, 0.02%)</title><rect x="711.9" y="757" width="0.2" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="714.93" y="767.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__detail::_Identity, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (131,212,315 samples, 0.03%)</title><rect x="1013.3" y="741" width="0.4" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="1016.30" y="751.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt; (43,446,566 samples, 0.01%)</title><rect x="791.2" y="661" width="0.1" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="794.19" y="671.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (146,014,890 samples, 0.04%)</title><rect x="536.3" y="725" width="0.5" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="539.35" y="735.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::allocate (1,529,530,198 samples, 0.40%)</title><rect x="895.6" y="645" width="4.7" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="898.59" y="655.5" ></text>
</g>
<g >
<title>tcache_get (43,448,682 samples, 0.01%)</title><rect x="613.7" y="645" width="0.1" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="616.67" y="655.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;, std::_Identity&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt;, bool  (70,404,086 samples, 0.02%)</title><rect x="725.0" y="709" width="0.2" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="728.02" y="719.5" ></text>
</g>
<g >
<title>std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::~promise (429,445,211 samples, 0.11%)</title><rect x="818.5" y="453" width="1.3" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="821.49" y="463.5" ></text>
</g>
<g >
<title>operator new (216,489,855 samples, 0.06%)</title><rect x="903.4" y="725" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="906.40" y="735.5" ></text>
</g>
<g >
<title>std::pair&lt;int const, std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::~pair (158,696,342 samples, 0.04%)</title><rect x="1164.1" y="741" width="0.5" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1167.12" y="751.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr (53,470,143 samples, 0.01%)</title><rect x="472.5" y="597" width="0.2" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="475.53" y="607.5" ></text>
</g>
<g >
<title>operator new (115,121,972 samples, 0.03%)</title><rect x="1083.6" y="821" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1086.63" y="831.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;  (562,955,947 samples, 0.15%)</title><rect x="809.2" y="581" width="1.7" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="812.17" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::_M_valptr (97,090,031 samples, 0.03%)</title><rect x="511.5" y="677" width="0.3" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="514.49" y="687.5" ></text>
</g>
<g >
<title>cpp_redis::client::connection_receive_handler (1,525,334,655 samples, 0.39%)</title><rect x="1075.3" y="821" width="4.7" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="1078.34" y="831.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (461,081,146 samples, 0.12%)</title><rect x="1071.7" y="709" width="1.4" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1074.73" y="719.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (56,781,539 samples, 0.01%)</title><rect x="424.8" y="725" width="0.2" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="427.81" y="735.5" ></text>
</g>
<g >
<title>cpp_redis::network::redis_connection::commit (148,105,251 samples, 0.04%)</title><rect x="935.0" y="741" width="0.5" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="938.03" y="751.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::~pair (48,041,822 samples, 0.01%)</title><rect x="961.0" y="613" width="0.2" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="964.03" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, false, true&gt;::_Node_iterator (38,405,065 samples, 0.01%)</title><rect x="990.3" y="741" width="0.1" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="993.25" y="751.5" ></text>
</g>
<g >
<title>operator new (36,386,489 samples, 0.01%)</title><rect x="1143.4" y="773" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1146.40" y="783.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (515,917,848 samples, 0.13%)</title><rect x="940.3" y="645" width="1.6" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="943.29" y="655.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;::~pair (61,874,445 samples, 0.02%)</title><rect x="580.4" y="773" width="0.1" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="583.35" y="783.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (55,686,904 samples, 0.01%)</title><rect x="858.1" y="709" width="0.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="861.14" y="719.5" ></text>
</g>
<g >
<title>EVP_DecryptUpdate (275,974,858 samples, 0.07%)</title><rect x="842.2" y="741" width="0.9" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="845.23" y="751.5" ></text>
</g>
<g >
<title>syscall (46,267,426 samples, 0.01%)</title><rect x="202.8" y="565" width="0.1" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="205.75" y="575.5" ></text>
</g>
<g >
<title>handle_pte_fault (36,139,354 samples, 0.01%)</title><rect x="1160.4" y="581" width="0.1" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1163.43" y="591.5" ></text>
</g>
<g >
<title>_copy_from_iter (106,601,310 samples, 0.03%)</title><rect x="1084.9" y="661" width="0.3" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="1087.88" y="671.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::construct&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;&gt; (126,368,542 samples, 0.03%)</title><rect x="902.1" y="709" width="0.4" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="905.13" y="719.5" ></text>
</g>
<g >
<title>sha256_block_data_order (38,364,487 samples, 0.01%)</title><rect x="874.6" y="709" width="0.1" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="877.57" y="719.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (329,996,690 samples, 0.09%)</title><rect x="208.5" y="645" width="1.0" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="211.47" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, true&gt; &gt;::deallocate (184,478,696 samples, 0.05%)</title><rect x="814.3" y="661" width="0.5" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="817.26" y="671.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;*&gt; (95,656,980 samples, 0.02%)</title><rect x="1164.3" y="693" width="0.3" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="1167.31" y="703.5" ></text>
</g>
<g >
<title>_int_malloc (34,016,703 samples, 0.01%)</title><rect x="988.9" y="613" width="0.1" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="991.87" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt; &gt;::deallocate (259,558,173 samples, 0.07%)</title><rect x="1005.8" y="677" width="0.8" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="1008.77" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (45,714,400 samples, 0.01%)</title><rect x="888.7" y="709" width="0.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="891.67" y="719.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (11,704,142,121 samples, 3.03%)</title><rect x="540.5" y="725" width="35.7" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="543.51" y="735.5" >std..</text>
</g>
<g >
<title>sock_recvmsg (60,182,095 samples, 0.02%)</title><rect x="204.0" y="581" width="0.1" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="206.96" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (2,782,384,273 samples, 0.72%)</title><rect x="794.7" y="757" width="8.5" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="797.68" y="767.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_deallocate (99,490,149 samples, 0.03%)</title><rect x="920.7" y="613" width="0.3" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="923.74" y="623.5" ></text>
</g>
<g >
<title>__GI___lll_lock_wake (51,741,691 samples, 0.01%)</title><rect x="1093.4" y="645" width="0.2" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1096.43" y="655.5" ></text>
</g>
<g >
<title>std::_Rb_tree_decrement (48,323,222 samples, 0.01%)</title><rect x="727.1" y="709" width="0.1" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="730.06" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_need_rehash (34,045,880 samples, 0.01%)</title><rect x="990.4" y="741" width="0.1" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="993.37" y="751.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (232,809,107 samples, 0.06%)</title><rect x="1182.5" y="949" width="0.7" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1185.54" y="959.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (842,602,125 samples, 0.22%)</title><rect x="1000.6" y="757" width="2.6" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="1003.62" y="767.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;main::{lambda (773,925,518 samples, 0.20%)</title><rect x="201.9" y="853" width="2.4" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="204.90" y="863.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (143,287,387 samples, 0.04%)</title><rect x="1104.9" y="709" width="0.5" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1107.93" y="719.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (1,034,004,683 samples, 0.27%)</title><rect x="518.7" y="773" width="3.1" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="521.68" y="783.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::length (232,462,604 samples, 0.06%)</title><rect x="827.9" y="709" width="0.7" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="830.88" y="719.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::erase (3,006,554,355 samples, 0.78%)</title><rect x="812.6" y="757" width="9.2" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="815.62" y="767.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (38,943,326 samples, 0.01%)</title><rect x="489.4" y="773" width="0.1" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="492.37" y="783.5" ></text>
</g>
<g >
<title>aesni_cbc_cipher (62,276,434 samples, 0.02%)</title><rect x="126.5" y="933" width="0.2" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="129.51" y="943.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (69,707,337 samples, 0.02%)</title><rect x="959.5" y="725" width="0.2" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="962.49" y="735.5" ></text>
</g>
<g >
<title>__GI___pthread_mutex_unlock_usercnt (155,511,760 samples, 0.04%)</title><rect x="538.7" y="709" width="0.5" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="541.72" y="719.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;::find (194,826,490 samples, 0.05%)</title><rect x="522.2" y="773" width="0.6" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="525.22" y="783.5" ></text>
</g>
<g >
<title>__GI___libc_free (1,078,990,260 samples, 0.28%)</title><rect x="834.8" y="789" width="3.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="837.80" y="799.5" ></text>
</g>
<g >
<title>futex_wait_queue (145,726,201 samples, 0.04%)</title><rect x="1054.2" y="613" width="0.5" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="1057.21" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::deallocate (94,495,181 samples, 0.02%)</title><rect x="457.4" y="693" width="0.3" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="460.38" y="703.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (238,184,445 samples, 0.06%)</title><rect x="1070.2" y="725" width="0.8" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1073.23" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (68,465,496 samples, 0.02%)</title><rect x="431.2" y="757" width="0.2" height="15.0" fill="rgb(253,225,53)" rx="2" ry="2" />
<text  x="434.17" y="767.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp; std::forward&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (35,116,454 samples, 0.01%)</title><rect x="79.4" y="933" width="0.1" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="82.43" y="943.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (125,421,642 samples, 0.03%)</title><rect x="514.5" y="693" width="0.4" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="517.54" y="703.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;::~pair (251,827,484 samples, 0.07%)</title><rect x="711.1" y="741" width="0.8" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="714.12" y="751.5" ></text>
</g>
<g >
<title>__GI___libc_free (92,112,195 samples, 0.02%)</title><rect x="916.7" y="757" width="0.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="919.68" y="767.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (35,012,365 samples, 0.01%)</title><rect x="86.1" y="933" width="0.1" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="89.08" y="943.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;apache::thrift::concurrency::Runnable,  (34,673,565 samples, 0.01%)</title><rect x="203.6" y="645" width="0.1" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="206.62" y="655.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (213,179,200 samples, 0.06%)</title><rect x="871.8" y="693" width="0.7" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="874.82" y="703.5" ></text>
</g>
<g >
<title>CRYPTO_clear_free (59,922,001 samples, 0.02%)</title><rect x="860.9" y="709" width="0.2" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="863.88" y="719.5" ></text>
</g>
<g >
<title>perf_event_mmap_event (35,718,104 samples, 0.01%)</title><rect x="1097.0" y="293" width="0.1" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="1100.03" y="303.5" ></text>
</g>
<g >
<title>lll_mutex_unlock_optimized (36,057,175 samples, 0.01%)</title><rect x="1119.1" y="773" width="0.1" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="1122.08" y="783.5" ></text>
</g>
<g >
<title>void std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::emplace_back&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (648,253,850 samples, 0.17%)</title><rect x="932.5" y="773" width="2.0" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="935.50" y="783.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned_erms (332,624,914 samples, 0.09%)</title><rect x="1133.6" y="773" width="1.1" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1136.65" y="783.5" ></text>
</g>
<g >
<title>do_anonymous_page (49,564,200 samples, 0.01%)</title><rect x="1159.1" y="597" width="0.2" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1162.12" y="607.5" ></text>
</g>
<g >
<title>schedule (108,293,963 samples, 0.03%)</title><rect x="1062.6" y="741" width="0.3" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1065.58" y="751.5" ></text>
</g>
<g >
<title>cpp_redis::client::commit (148,105,251 samples, 0.04%)</title><rect x="935.0" y="773" width="0.5" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="938.03" y="783.5" ></text>
</g>
<g >
<title>redis::put_batch (3,012,763,628 samples, 0.78%)</title><rect x="1156.5" y="869" width="9.2" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="1159.46" y="879.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__strip_reference_wrapper&lt;std::decay&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;::type&gt;::__type, std::__strip_reference_wrapper&lt;std::decay&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;::type&gt;::__type&gt; std::make_pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (808,383,538 samples, 0.21%)</title><rect x="954.0" y="773" width="2.4" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="956.97" y="783.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::allocate (90,583,078 samples, 0.02%)</title><rect x="833.6" y="709" width="0.3" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="836.65" y="719.5" ></text>
</g>
<g >
<title>__GI___libc_free (72,671,693 samples, 0.02%)</title><rect x="1150.0" y="869" width="0.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1153.00" y="879.5" ></text>
</g>
<g >
<title>dequeue_task (44,095,342 samples, 0.01%)</title><rect x="458.9" y="517" width="0.2" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="461.94" y="527.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (52,208,895 samples, 0.01%)</title><rect x="1050.5" y="773" width="0.1" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1053.47" y="783.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (41,833,482 samples, 0.01%)</title><rect x="1020.9" y="741" width="0.1" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1023.91" y="751.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, true&gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (216,282,217 samples, 0.06%)</title><rect x="832.3" y="693" width="0.7" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="835.35" y="703.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt;, bool&gt; std::_Rb_tree&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;, std::_Identity&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt;, bool  (7,836,456,582 samples, 2.03%)</title><rect x="1120.1" y="837" width="23.9" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1123.11" y="847.5" >s..</text>
</g>
<g >
<title>__GI___libc_malloc (97,082,625 samples, 0.03%)</title><rect x="873.5" y="709" width="0.3" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="876.55" y="719.5" ></text>
</g>
<g >
<title>cpp_redis::reply::operator&lt;&lt; (1,019,234,941 samples, 0.26%)</title><rect x="1070.1" y="757" width="3.1" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="1073.09" y="767.5" ></text>
</g>
<g >
<title>operator new (45,042,762 samples, 0.01%)</title><rect x="217.8" y="725" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="220.81" y="735.5" ></text>
</g>
<g >
<title>do_epoll_ctl (42,008,666 samples, 0.01%)</title><rect x="202.8" y="501" width="0.1" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="205.77" y="511.5" ></text>
</g>
<g >
<title>std::pair&lt;sequence_id const&amp;, std::vector&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::~pair (59,645,727 samples, 0.02%)</title><rect x="1057.8" y="789" width="0.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1060.78" y="799.5" ></text>
</g>
<g >
<title>__GI___libc_free (733,751,106 samples, 0.19%)</title><rect x="1075.6" y="805" width="2.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1078.60" y="815.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::~lock_guard (129,205,560 samples, 0.03%)</title><rect x="805.1" y="773" width="0.4" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="808.06" y="783.5" ></text>
</g>
<g >
<title>apache::thrift::concurrency::ThreadManager::Task::run (7,644,942,030 samples, 1.98%)</title><rect x="1089.0" y="885" width="23.3" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="1091.99" y="895.5" >a..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (1,204,878,717 samples, 0.31%)</title><rect x="911.1" y="709" width="3.7" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="914.15" y="719.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (825,119,834 samples, 0.21%)</title><rect x="215.0" y="789" width="2.5" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="217.99" y="799.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_find_before_node (463,052,204 samples, 0.12%)</title><rect x="1010.1" y="725" width="1.4" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="1013.13" y="735.5" ></text>
</g>
<g >
<title>_int_free (189,764,787 samples, 0.05%)</title><rect x="219.0" y="709" width="0.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="221.99" y="719.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::lock_guard (355,258,954 samples, 0.09%)</title><rect x="537.5" y="773" width="1.0" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="540.46" y="783.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::lock_guard (39,736,391 samples, 0.01%)</title><rect x="428.0" y="773" width="0.1" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="431.00" y="783.5" ></text>
</g>
<g >
<title>cpp_redis::builders::bulk_string_builder::get_reply (47,328,919 samples, 0.01%)</title><rect x="1066.3" y="757" width="0.1" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1069.28" y="767.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;*, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;::__normal_iterator (35,303,470 samples, 0.01%)</title><rect x="446.3" y="741" width="0.1" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="449.31" y="751.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;int, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;::~unordered_map (322,434,225 samples, 0.08%)</title><rect x="920.7" y="773" width="1.0" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="923.72" y="783.5" ></text>
</g>
<g >
<title>psi_task_switch (51,727,431 samples, 0.01%)</title><rect x="1088.3" y="613" width="0.2" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1091.30" y="623.5" ></text>
</g>
<g >
<title>unlink_chunk (153,943,028 samples, 0.04%)</title><rect x="877.0" y="709" width="0.4" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="879.96" y="719.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (319,681,874 samples, 0.08%)</title><rect x="1081.2" y="773" width="1.0" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1084.23" y="783.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (741,764,839 samples, 0.19%)</title><rect x="1175.8" y="853" width="2.3" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="1178.81" y="863.5" ></text>
</g>
<g >
<title>EVP_CipherInit_ex (667,002,284 samples, 0.17%)</title><rect x="849.4" y="741" width="2.0" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="852.41" y="751.5" ></text>
</g>
<g >
<title>std::__atomic_futex_unsigned&lt;2147483648u&gt;::_M_load_and_test_until (44,934,140 samples, 0.01%)</title><rect x="918.9" y="709" width="0.1" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="921.90" y="719.5" ></text>
</g>
<g >
<title>evmap_io_add_ (46,416,980 samples, 0.01%)</title><rect x="202.8" y="629" width="0.1" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="205.75" y="639.5" ></text>
</g>
<g >
<title>std::deque&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;::push_back (280,158,113 samples, 0.07%)</title><rect x="1102.8" y="725" width="0.8" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="1105.76" y="735.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (36,387,567 samples, 0.01%)</title><rect x="1100.1" y="741" width="0.1" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="1103.13" y="751.5" ></text>
</g>
<g >
<title>std::mutex::unlock (207,227,204 samples, 0.05%)</title><rect x="538.6" y="757" width="0.6" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="541.59" y="767.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_allocate (106,930,579 samples, 0.03%)</title><rect x="1090.5" y="725" width="0.3" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="1093.49" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_valptr (39,228,098 samples, 0.01%)</title><rect x="957.1" y="677" width="0.2" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="960.14" y="687.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr (58,850,728 samples, 0.02%)</title><rect x="472.0" y="581" width="0.2" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="475.05" y="591.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;,  (673,754,545 samples, 0.17%)</title><rect x="1095.6" y="709" width="2.0" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="1098.57" y="719.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (47,717,496 samples, 0.01%)</title><rect x="434.6" y="693" width="0.2" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="437.65" y="703.5" ></text>
</g>
<g >
<title>__sk_mem_reduce_allocated (39,687,081 samples, 0.01%)</title><rect x="1083.2" y="645" width="0.2" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="1086.25" y="655.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (85,602,269 samples, 0.02%)</title><rect x="1156.8" y="789" width="0.3" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1159.79" y="799.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator= (175,328,030 samples, 0.05%)</title><rect x="1104.1" y="757" width="0.5" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="1107.09" y="767.5" ></text>
</g>
<g >
<title>__GI___libc_free (165,420,930 samples, 0.04%)</title><rect x="405.1" y="709" width="0.5" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="408.14" y="719.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (43,657,367 samples, 0.01%)</title><rect x="434.7" y="677" width="0.1" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="437.66" y="687.5" ></text>
</g>
<g >
<title>net_rx_action (34,007,746 samples, 0.01%)</title><rect x="204.0" y="245" width="0.1" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="207.04" y="255.5" ></text>
</g>
<g >
<title>__sys_sendto (400,103,186 samples, 0.10%)</title><rect x="1059.8" y="549" width="1.2" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="1062.80" y="559.5" ></text>
</g>
<g >
<title>std::once_flag::_Prepare_execution::_Prepare_execution&lt;std::call_once&lt;void  (881,098,283 samples, 0.23%)</title><rect x="808.9" y="693" width="2.7" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="811.91" y="703.5" ></text>
</g>
<g >
<title>_int_malloc (54,769,499 samples, 0.01%)</title><rect x="1103.1" y="581" width="0.2" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1106.09" y="591.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (525,771,537 samples, 0.14%)</title><rect x="474.8" y="693" width="1.6" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="477.81" y="703.5" ></text>
</g>
<g >
<title>operator new (55,965,959 samples, 0.01%)</title><rect x="1094.6" y="693" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1097.64" y="703.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;::construct&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; (146,645,636 samples, 0.04%)</title><rect x="1092.1" y="693" width="0.5" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1095.12" y="703.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (35,943,519 samples, 0.01%)</title><rect x="934.3" y="661" width="0.1" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="937.31" y="671.5" ></text>
</g>
<g >
<title>_int_free (96,229,756 samples, 0.02%)</title><rect x="211.1" y="661" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="214.05" y="671.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (529,670,459 samples, 0.14%)</title><rect x="1109.3" y="693" width="1.6" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1112.26" y="703.5" ></text>
</g>
<g >
<title>futex_wake (36,923,557 samples, 0.01%)</title><rect x="1063.2" y="725" width="0.1" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1066.20" y="735.5" ></text>
</g>
<g >
<title>_int_malloc (102,309,638 samples, 0.03%)</title><rect x="41.3" y="933" width="0.3" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="44.34" y="943.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;operation&gt;::construct&lt;operation, operation const&amp;&gt; (771,710,925 samples, 0.20%)</title><rect x="474.3" y="757" width="2.4" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="477.32" y="767.5" ></text>
</g>
<g >
<title>void std::_Rb_tree&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;, std::_Identity&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt;, bool  (36,055,274 samples, 0.01%)</title><rect x="1143.0" y="773" width="0.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1146.03" y="783.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (110,507,973 samples, 0.03%)</title><rect x="948.1" y="629" width="0.3" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="951.10" y="639.5" ></text>
</g>
<g >
<title>checked_request2size (443,413,746 samples, 0.11%)</title><rect x="678.1" y="661" width="1.3" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="681.07" y="671.5" ></text>
</g>
<g >
<title>__sys_sendto (578,957,274 samples, 0.15%)</title><rect x="1084.5" y="741" width="1.8" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="1087.52" y="751.5" ></text>
</g>
<g >
<title>___pthread_mutex_unlock (309,763,617 samples, 0.08%)</title><rect x="459.5" y="709" width="0.9" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="462.50" y="719.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void  (281,054,969,830 samples, 72.70%)</title><rect x="204.3" y="901" width="857.8" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="207.26" y="911.5" >std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void </text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (322,067,611 samples, 0.08%)</title><rect x="208.5" y="629" width="1.0" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="211.49" y="639.5" ></text>
</g>
<g >
<title>handle_mm_fault (34,100,432 samples, 0.01%)</title><rect x="1115.7" y="741" width="0.1" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1118.68" y="751.5" ></text>
</g>
<g >
<title>heap_for_ptr (49,162,536 samples, 0.01%)</title><rect x="1094.3" y="677" width="0.1" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1097.28" y="687.5" ></text>
</g>
<g >
<title>std::once_flag::_Prepare_execution::_Prepare_execution&lt;std::call_once&lt;void  (543,479,618 samples, 0.14%)</title><rect x="1078.2" y="757" width="1.6" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="1081.17" y="767.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (44,277,047 samples, 0.01%)</title><rect x="902.4" y="677" width="0.1" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="905.38" y="687.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;char*&gt;::difference_type std::__distance&lt;char*&gt; (58,607,436 samples, 0.02%)</title><rect x="1052.0" y="757" width="0.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1055.04" y="767.5" ></text>
</g>
<g >
<title>malloc_consolidate (199,060,802 samples, 0.05%)</title><rect x="936.3" y="725" width="0.6" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="939.34" y="735.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (37,931,881 samples, 0.01%)</title><rect x="1092.2" y="629" width="0.1" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1095.21" y="639.5" ></text>
</g>
<g >
<title>std::mersenne_twister_engine&lt;unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul&gt;::operator (35,839,409 samples, 0.01%)</title><rect x="139.7" y="869" width="0.1" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="142.73" y="879.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (116,078,639 samples, 0.03%)</title><rect x="982.6" y="693" width="0.4" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="985.60" y="703.5" ></text>
</g>
<g >
<title>encryption_engine::prf_encrypt (1,068,625,748 samples, 0.28%)</title><rect x="1152.9" y="853" width="3.3" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1155.91" y="863.5" ></text>
</g>
<g >
<title>futex_wake (163,965,951 samples, 0.04%)</title><rect x="459.9" y="581" width="0.5" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="462.90" y="591.5" ></text>
</g>
<g >
<title>_int_malloc (626,789,267 samples, 0.16%)</title><rect x="879.3" y="709" width="1.9" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="882.27" y="719.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned_erms (59,875,871 samples, 0.02%)</title><rect x="207.6" y="645" width="0.2" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="210.62" y="655.5" ></text>
</g>
<g >
<title>_int_free (618,563,186 samples, 0.16%)</title><rect x="1038.8" y="693" width="1.9" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1041.80" y="703.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__future_base::_Result_base::_Deleter&gt;::~unique_ptr (34,542,472 samples, 0.01%)</title><rect x="819.0" y="437" width="0.1" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="822.00" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_S_relocate (186,064,483 samples, 0.05%)</title><rect x="1101.5" y="725" width="0.5" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="1104.45" y="735.5" ></text>
</g>
<g >
<title>std::__allocated_ptr&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;,  (44,122,351 samples, 0.01%)</title><rect x="1108.2" y="677" width="0.1" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="1111.19" y="687.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::~lock_guard (77,162,008 samples, 0.02%)</title><rect x="1117.1" y="853" width="0.3" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="1120.15" y="863.5" ></text>
</g>
<g >
<title>__gthread_mutex_unlock (94,771,988 samples, 0.02%)</title><rect x="527.7" y="741" width="0.3" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="530.70" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (1,797,439,264 samples, 0.46%)</title><rect x="440.6" y="757" width="5.5" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="443.59" y="767.5" ></text>
</g>
<g >
<title>void std::_Construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (713,098,372 samples, 0.18%)</title><rect x="943.1" y="629" width="2.2" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="946.08" y="639.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (170,869,812 samples, 0.04%)</title><rect x="613.3" y="661" width="0.5" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="616.28" y="671.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (300,322,848 samples, 0.08%)</title><rect x="216.3" y="757" width="0.9" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="219.25" y="767.5" ></text>
</g>
<g >
<title>__local_bh_enable_ip (110,074,073 samples, 0.03%)</title><rect x="1085.4" y="469" width="0.3" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1088.36" y="479.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (35,919,713 samples, 0.01%)</title><rect x="818.9" y="405" width="0.1" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="821.89" y="415.5" ></text>
</g>
<g >
<title>operator delete (109,511,675 samples, 0.03%)</title><rect x="895.2" y="789" width="0.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="898.22" y="799.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_erase (2,287,303,789 samples, 0.59%)</title><rect x="813.0" y="725" width="7.0" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="816.03" y="735.5" ></text>
</g>
<g >
<title>futex_wait (68,679,989 samples, 0.02%)</title><rect x="1093.1" y="549" width="0.2" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1096.10" y="559.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::operator!=&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; (62,789,764 samples, 0.02%)</title><rect x="942.9" y="629" width="0.2" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="945.88" y="639.5" ></text>
</g>
<g >
<title>__tcp_transmit_skb (145,027,867 samples, 0.04%)</title><rect x="1085.3" y="629" width="0.4" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1088.30" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;cpp_redis::reply, std::allocator&lt;cpp_redis::reply&gt; &gt;::~vector (84,798,925 samples, 0.02%)</title><rect x="1074.4" y="773" width="0.3" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1077.43" y="783.5" ></text>
</g>
<g >
<title>__handle_mm_fault (86,007,505 samples, 0.02%)</title><rect x="1119.7" y="709" width="0.2" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1122.66" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, true&gt;* std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (598,004,214 samples, 0.15%)</title><rect x="831.2" y="725" width="1.8" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="834.18" y="735.5" ></text>
</g>
<g >
<title>FrequencySmoother::getKeyWithMinFrequency[abi:cxx11] (35,740,437 samples, 0.01%)</title><rect x="577.7" y="789" width="0.1" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="580.71" y="799.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;int, std::pair&lt;int const, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (364,064,308 samples, 0.09%)</title><rect x="919.6" y="757" width="1.1" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="922.61" y="767.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;, std::_Identity&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt;, bool  (49,932,425 samples, 0.01%)</title><rect x="42.6" y="933" width="0.2" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="45.60" y="943.5" ></text>
</g>
<g >
<title>std::vector&lt;cpp_redis::reply, std::allocator&lt;cpp_redis::reply&gt; &gt;::vector (346,882,525 samples, 0.09%)</title><rect x="922.1" y="677" width="1.1" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="925.15" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (35,442,086 samples, 0.01%)</title><rect x="563.6" y="677" width="0.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="566.60" y="687.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (145,235,308 samples, 0.04%)</title><rect x="1163.3" y="821" width="0.5" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1166.32" y="831.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (40,819,922 samples, 0.01%)</title><rect x="434.1" y="709" width="0.1" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="437.07" y="719.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (273,416,313 samples, 0.07%)</title><rect x="513.5" y="645" width="0.9" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="516.54" y="655.5" ></text>
</g>
<g >
<title>grow_heap (35,718,104 samples, 0.01%)</title><rect x="1097.0" y="421" width="0.1" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="1100.03" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__future_base::_Result_base::_Deleter&gt;::release (56,627,322 samples, 0.01%)</title><rect x="464.1" y="629" width="0.1" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="467.05" y="639.5" ></text>
</g>
<g >
<title>std::__basic_future&lt;cpp_redis::reply&gt;::_M_get_result (49,416,662 samples, 0.01%)</title><rect x="918.9" y="757" width="0.1" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="921.90" y="767.5" ></text>
</g>
<g >
<title>__GI___pthread_mutex_unlock_usercnt (45,234,538 samples, 0.01%)</title><rect x="1119.1" y="789" width="0.1" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1122.06" y="799.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;std::__future_base::_State_baseV2&gt;::shared_ptr (43,301,492 samples, 0.01%)</title><rect x="1101.2" y="677" width="0.1" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="1104.16" y="687.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_capacity (55,887,463 samples, 0.01%)</title><rect x="1049.9" y="773" width="0.2" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="1052.88" y="783.5" ></text>
</g>
<g >
<title>do_syscall_64 (46,267,426 samples, 0.01%)</title><rect x="202.8" y="533" width="0.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="205.75" y="543.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter, true, true&gt;::__uniq_ptr_impl&lt;std::__future_base::_Result_base::_Deleter&gt; (100,038,596 samples, 0.03%)</title><rect x="810.2" y="533" width="0.3" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="813.21" y="543.5" ></text>
</g>
<g >
<title>_int_malloc (48,044,466 samples, 0.01%)</title><rect x="1079.6" y="581" width="0.1" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1082.58" y="591.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (135,713,316 samples, 0.04%)</title><rect x="1050.1" y="773" width="0.4" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="1053.05" y="783.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;,  (1,040,067,919 samples, 0.27%)</title><rect x="461.4" y="757" width="3.1" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="464.36" y="767.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, false&gt; &gt; &gt;::_M_deallocate_nodes (240,150,848 samples, 0.06%)</title><rect x="214.3" y="741" width="0.7" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="217.26" y="751.5" ></text>
</g>
<g >
<title>ip_rcv (136,814,316 samples, 0.04%)</title><rect x="1060.1" y="149" width="0.4" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="1063.08" y="159.5" ></text>
</g>
<g >
<title>handle_pte_fault (57,781,780 samples, 0.01%)</title><rect x="1162.4" y="709" width="0.1" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1165.36" y="719.5" ></text>
</g>
<g >
<title>___pthread_mutex_lock (157,463,047 samples, 0.04%)</title><rect x="975.2" y="741" width="0.5" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="978.19" y="751.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (45,353,616 samples, 0.01%)</title><rect x="1152.8" y="837" width="0.1" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1155.76" y="847.5" ></text>
</g>
<g >
<title>__alloc_pages (62,056,735 samples, 0.02%)</title><rect x="1084.7" y="629" width="0.2" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="1087.67" y="639.5" ></text>
</g>
<g >
<title>unlink_chunk (76,402,119 samples, 0.02%)</title><rect x="928.9" y="661" width="0.2" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="931.92" y="671.5" ></text>
</g>
<g >
<title>__pthread_once_slow (583,361,142 samples, 0.15%)</title><rect x="1078.0" y="789" width="1.8" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1081.05" y="799.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (36,151,072 samples, 0.01%)</title><rect x="1105.8" y="693" width="0.1" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="1108.80" y="703.5" ></text>
</g>
<g >
<title>__GI___libc_free (328,404,243 samples, 0.08%)</title><rect x="951.9" y="741" width="1.1" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="954.95" y="751.5" ></text>
</g>
<g >
<title>exc_page_fault (41,294,646 samples, 0.01%)</title><rect x="1157.8" y="789" width="0.1" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1160.81" y="799.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;, std::_Identity&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt;, bool  (384,837,862 samples, 0.10%)</title><rect x="595.8" y="693" width="1.2" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="598.85" y="703.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (51,521,432 samples, 0.01%)</title><rect x="997.2" y="661" width="0.1" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1000.17" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (314,513,704 samples, 0.08%)</title><rect x="982.0" y="709" width="1.0" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="985.00" y="719.5" ></text>
</g>
<g >
<title>do_syscall_64 (142,182,949 samples, 0.04%)</title><rect x="458.9" y="629" width="0.4" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="461.86" y="639.5" ></text>
</g>
<g >
<title>sequence_id::sequence_id (63,005,479 samples, 0.02%)</title><rect x="1052.5" y="805" width="0.2" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="1055.53" y="815.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (54,037,134 samples, 0.01%)</title><rect x="919.3" y="741" width="0.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="922.31" y="751.5" ></text>
</g>
<g >
<title>EVP_EncryptUpdate (49,767,964 samples, 0.01%)</title><rect x="46.9" y="933" width="0.2" height="15.0" fill="rgb(248,197,47)" rx="2" ry="2" />
<text  x="49.90" y="943.5" ></text>
</g>
<g >
<title>__gnu_cxx::__enable_if&lt;std::__is_char&lt;char&gt;::__value, bool&gt;::__type std::operator==&lt;char&gt; (675,045,316 samples, 0.17%)</title><rect x="574.1" y="677" width="2.1" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="577.14" y="687.5" ></text>
</g>
<g >
<title>cpp_redis::reply* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;cpp_redis::reply const*, std::vector&lt;cpp_redis::reply, std::allocator&lt;cpp_redis::reply&gt; &gt; &gt;, cpp_redis::reply*, cpp_redis::reply&gt; (1,172,872,181 samples, 0.30%)</title><rect x="921.7" y="757" width="3.6" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="924.71" y="767.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr (38,741,016 samples, 0.01%)</title><rect x="819.7" y="421" width="0.1" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="822.68" y="431.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;,  (91,231,110 samples, 0.02%)</title><rect x="818.0" y="453" width="0.3" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="821.04" y="463.5" ></text>
</g>
<g >
<title>unlink_chunk (70,824,440 samples, 0.02%)</title><rect x="958.1" y="517" width="0.3" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="961.14" y="527.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::unique_ptr&lt;std::__future_base::_Result_base::_Deleter, void&gt; (40,389,659 samples, 0.01%)</title><rect x="1096.4" y="469" width="0.2" height="15.0" fill="rgb(211,27,6)" rx="2" ry="2" />
<text  x="1099.45" y="479.5" ></text>
</g>
<g >
<title>do_user_addr_fault (57,781,780 samples, 0.01%)</title><rect x="1162.4" y="757" width="0.1" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1165.36" y="767.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (100,241,107 samples, 0.03%)</title><rect x="452.3" y="757" width="0.3" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="455.27" y="767.5" ></text>
</g>
<g >
<title>std::vector&lt;operation, std::allocator&lt;operation&gt; &gt;::push_back (4,446,465,715 samples, 1.15%)</title><rect x="474.3" y="789" width="13.6" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="477.29" y="799.5" ></text>
</g>
<g >
<title>waffle_thrift_responseClient::send_async_response (826,539,130 samples, 0.21%)</title><rect x="1059.6" y="725" width="2.5" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1062.60" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt;* std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (818,850,004 samples, 0.21%)</title><rect x="891.2" y="725" width="2.5" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="894.25" y="735.5" ></text>
</g>
<g >
<title>ip_protocol_deliver_rcu (61,497,330 samples, 0.02%)</title><rect x="1085.4" y="293" width="0.2" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="1088.37" y="303.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt;::operator-- (61,154,180 samples, 0.02%)</title><rect x="727.0" y="725" width="0.2" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="730.02" y="735.5" ></text>
</g>
<g >
<title>_int_free (264,110,611 samples, 0.07%)</title><rect x="219.6" y="709" width="0.8" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="222.61" y="719.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__future_base::_Result_base::_Deleter&gt;::release (47,600,211 samples, 0.01%)</title><rect x="810.7" y="533" width="0.2" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="813.73" y="543.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (39,778,286 samples, 0.01%)</title><rect x="445.8" y="693" width="0.1" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="448.81" y="703.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (139,116,891 samples, 0.04%)</title><rect x="910.7" y="693" width="0.4" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="913.72" y="703.5" ></text>
</g>
<g >
<title>mprotect_fixup (35,718,104 samples, 0.01%)</title><rect x="1097.0" y="325" width="0.1" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="1100.03" y="335.5" ></text>
</g>
<g >
<title>exc_page_fault (90,081,862 samples, 0.02%)</title><rect x="139.0" y="741" width="0.2" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="141.97" y="751.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (81,263,175 samples, 0.02%)</title><rect x="966.5" y="725" width="0.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="969.48" y="735.5" ></text>
</g>
<g >
<title>unlink_chunk (68,386,381 samples, 0.02%)</title><rect x="526.3" y="629" width="0.3" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="529.35" y="639.5" ></text>
</g>
<g >
<title>unlink_chunk (48,991,412 samples, 0.01%)</title><rect x="1024.0" y="677" width="0.2" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="1027.02" y="687.5" ></text>
</g>
<g >
<title>std::once_flag::_Prepare_execution::_Prepare_execution&lt;std::call_once&lt;void  (543,479,618 samples, 0.14%)</title><rect x="1078.2" y="773" width="1.6" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="1081.17" y="783.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (33,131,146 samples, 0.01%)</title><rect x="522.7" y="741" width="0.1" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="525.69" y="751.5" ></text>
</g>
<g >
<title>getKeysValues (873,179,377 samples, 0.23%)</title><rect x="1113.8" y="885" width="2.7" height="15.0" fill="rgb(253,225,53)" rx="2" ry="2" />
<text  x="1116.81" y="895.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (717,382,359 samples, 0.19%)</title><rect x="574.0" y="693" width="2.2" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="577.05" y="703.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::end (68,297,475 samples, 0.02%)</title><rect x="493.3" y="757" width="0.2" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="496.32" y="767.5" ></text>
</g>
<g >
<title>_int_free (43,556,002 samples, 0.01%)</title><rect x="875.4" y="725" width="0.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="878.38" y="735.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (69,732,454 samples, 0.02%)</title><rect x="1115.5" y="789" width="0.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1118.47" y="799.5" ></text>
</g>
<g >
<title>malloc@plt (41,299,000 samples, 0.01%)</title><rect x="1094.0" y="709" width="0.1" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="1096.98" y="719.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, true&gt; &gt;::allocate (156,234,432 samples, 0.04%)</title><rect x="436.9" y="693" width="0.5" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="439.89" y="703.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt;::_Tuple_impl&lt;std::__future_base::_Result_base*&amp;, std::__future_base::_Result_base::_Deleter, void&gt; (65,205,646 samples, 0.02%)</title><rect x="810.3" y="485" width="0.2" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="813.28" y="495.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__strip_reference_wrapper&lt;std::decay&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt;::type&gt;::__type, std::__strip_reference_wrapper&lt;std::decay&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt;::type&gt;::__type&gt; std::make_pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt; (641,844,761 samples, 0.17%)</title><rect x="528.2" y="773" width="2.0" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="531.21" y="783.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (72,061,038 samples, 0.02%)</title><rect x="858.1" y="741" width="0.2" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="861.09" y="751.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (62,754,869 samples, 0.02%)</title><rect x="887.6" y="677" width="0.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="890.61" y="687.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (33,879,562 samples, 0.01%)</title><rect x="1094.8" y="693" width="0.1" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="1097.84" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (191,089,979 samples, 0.05%)</title><rect x="430.3" y="709" width="0.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="433.27" y="719.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_erase (331,531,207 samples, 0.09%)</title><rect x="503.1" y="757" width="1.0" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="506.06" y="767.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt; &gt;::type&amp; std::get&lt;0ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt; (58,850,728 samples, 0.02%)</title><rect x="472.0" y="565" width="0.2" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="475.05" y="575.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (1,275,279,761 samples, 0.33%)</title><rect x="996.5" y="709" width="3.8" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="999.45" y="719.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (67,468,248 samples, 0.02%)</title><rect x="202.5" y="677" width="0.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="205.53" y="687.5" ></text>
</g>
<g >
<title>operator new (54,046,181 samples, 0.01%)</title><rect x="893.2" y="629" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="896.20" y="639.5" ></text>
</g>
<g >
<title>___pthread_mutex_unlock (36,368,212 samples, 0.01%)</title><rect x="1117.3" y="805" width="0.1" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1120.27" y="815.5" ></text>
</g>
<g >
<title>unlink_chunk (94,627,157 samples, 0.02%)</title><rect x="971.7" y="709" width="0.3" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="974.68" y="719.5" ></text>
</g>
<g >
<title>__GI___libc_free (360,795,407 samples, 0.09%)</title><rect x="862.1" y="725" width="1.1" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="865.14" y="735.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;char*&gt;::difference_type std::__distance&lt;char*&gt; (40,875,015 samples, 0.01%)</title><rect x="1138.7" y="757" width="0.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1141.71" y="767.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (52,835,881 samples, 0.01%)</title><rect x="438.1" y="693" width="0.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="441.14" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (69,089,891 samples, 0.02%)</title><rect x="424.8" y="741" width="0.2" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="427.77" y="751.5" ></text>
</g>
<g >
<title>__GI___libc_free (106,603,766 samples, 0.03%)</title><rect x="117.4" y="933" width="0.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="120.36" y="943.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (53,721,495 samples, 0.01%)</title><rect x="502.1" y="773" width="0.2" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="505.11" y="783.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (438,106,025 samples, 0.11%)</title><rect x="110.1" y="933" width="1.3" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="113.09" y="943.5" ></text>
</g>
<g >
<title>lll_mutex_unlock_optimized (47,876,971 samples, 0.01%)</title><rect x="578.6" y="693" width="0.1" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="581.57" y="703.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;operation, std::allocator&lt;operation&gt; &gt;::~_Vector_base (72,032,981 samples, 0.02%)</title><rect x="404.9" y="789" width="0.2" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="407.88" y="799.5" ></text>
</g>
<g >
<title>sha256_block_data_order_shaext (2,694,899,931 samples, 0.70%)</title><rect x="140.5" y="933" width="8.2" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="143.49" y="943.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (467,424,734 samples, 0.12%)</title><rect x="923.6" y="645" width="1.4" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="926.58" y="655.5" ></text>
</g>
<g >
<title>std::__future_base::_Result&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::~_Result (34,856,895 samples, 0.01%)</title><rect x="1057.2" y="581" width="0.1" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1060.24" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_v (48,231,568 samples, 0.01%)</title><rect x="823.9" y="693" width="0.2" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="826.91" y="703.5" ></text>
</g>
<g >
<title>std::pair&lt;int const, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::~pair (240,150,848 samples, 0.06%)</title><rect x="214.3" y="677" width="0.7" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="217.26" y="687.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (54,551,557 samples, 0.01%)</title><rect x="1149.6" y="725" width="0.2" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1152.61" y="735.5" ></text>
</g>
<g >
<title>malloc_consolidate (144,021,081 samples, 0.04%)</title><rect x="127.7" y="933" width="0.5" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="130.73" y="943.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (62,876,280 samples, 0.02%)</title><rect x="1103.1" y="597" width="0.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1106.07" y="607.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::pair (114,995,077 samples, 0.03%)</title><rect x="960.5" y="613" width="0.3" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="963.48" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::__enable_if&lt;std::__is_char&lt;char&gt;::__value, bool&gt;::__type std::operator==&lt;char&gt; (387,127,956 samples, 0.10%)</title><rect x="886.2" y="677" width="1.2" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="889.20" y="687.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (782,359,441 samples, 0.20%)</title><rect x="1106.0" y="693" width="2.3" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1108.96" y="703.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (49,833,895 samples, 0.01%)</title><rect x="1153.5" y="789" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1156.45" y="799.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;char*&gt;::difference_type std::__distance&lt;char*&gt; (153,661,793 samples, 0.04%)</title><rect x="688.6" y="693" width="0.4" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="691.56" y="703.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (548,939,040 samples, 0.14%)</title><rect x="1001.3" y="725" width="1.6" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="1004.27" y="735.5" ></text>
</g>
<g >
<title>apache::thrift::server::TNonblockingServer::TConnection::transition (68,034,457 samples, 0.02%)</title><rect x="202.7" y="709" width="0.2" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="205.74" y="719.5" ></text>
</g>
<g >
<title>lll_mutex_lock_optimized (65,687,699 samples, 0.02%)</title><rect x="882.3" y="709" width="0.2" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="885.29" y="719.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Vector_impl::_Vector_impl (50,019,649 samples, 0.01%)</title><rect x="1019.0" y="725" width="0.2" height="15.0" fill="rgb(236,147,35)" rx="2" ry="2" />
<text  x="1022.02" y="735.5" ></text>
</g>
<g >
<title>HMAC_CTX_new (227,144,919 samples, 0.06%)</title><rect x="1153.4" y="821" width="0.7" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="1156.42" y="831.5" ></text>
</g>
<g >
<title>__GI___libc_free (105,700,881 samples, 0.03%)</title><rect x="206.0" y="741" width="0.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="209.02" y="751.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Vector_base (58,760,010 samples, 0.02%)</title><rect x="515.1" y="757" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="518.10" y="767.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (64,019,965 samples, 0.02%)</title><rect x="451.4" y="725" width="0.2" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="454.39" y="735.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::_M_ptr (45,240,749 samples, 0.01%)</title><rect x="536.9" y="693" width="0.2" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="539.93" y="703.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;void  (1,137,976,112 samples, 0.29%)</title><rect x="469.3" y="661" width="3.4" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="472.26" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_S_relocate (129,454,123 samples, 0.03%)</title><rect x="1090.9" y="725" width="0.4" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="1093.86" y="735.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cpp_redis::reply, std::allocator&lt;cpp_redis::reply&gt; &gt;::~_Vector_base (176,411,676 samples, 0.05%)</title><rect x="917.2" y="741" width="0.5" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="920.17" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, false, true&gt;::operator (61,845,968 samples, 0.02%)</title><rect x="894.4" y="741" width="0.2" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="897.39" y="751.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;cpp_redis::reply&gt; (334,873,630 samples, 0.09%)</title><rect x="926.6" y="709" width="1.0" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="929.57" y="719.5" ></text>
</g>
<g >
<title>tcache_get (97,771,827 samples, 0.03%)</title><rect x="865.9" y="677" width="0.3" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="868.94" y="687.5" ></text>
</g>
<g >
<title>event_process_active (537,536,370 samples, 0.14%)</title><rect x="202.5" y="757" width="1.7" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="205.51" y="767.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::vector (395,688,564 samples, 0.10%)</title><rect x="211.5" y="773" width="1.2" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="214.50" y="783.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (89,201,493 samples, 0.02%)</title><rect x="438.0" y="741" width="0.3" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="441.05" y="751.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;,  (239,685,203 samples, 0.06%)</title><rect x="803.8" y="757" width="0.8" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="806.83" y="767.5" ></text>
</g>
<g >
<title>__x64_sys_futex (206,846,090 samples, 0.05%)</title><rect x="1054.2" y="661" width="0.6" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1057.20" y="671.5" ></text>
</g>
<g >
<title>tcp_push_one (53,985,323 samples, 0.01%)</title><rect x="1085.9" y="677" width="0.1" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="1088.87" y="687.5" ></text>
</g>
<g >
<title>tcache_put (382,235,283 samples, 0.10%)</title><rect x="703.4" y="677" width="1.2" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="706.38" y="687.5" ></text>
</g>
<g >
<title>do_syscall_64 (48,319,336 samples, 0.01%)</title><rect x="1080.0" y="725" width="0.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1083.03" y="735.5" ></text>
</g>
<g >
<title>operator new (152,311,514 samples, 0.04%)</title><rect x="436.9" y="677" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="439.90" y="687.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt;::_M_valptr (61,165,525 samples, 0.02%)</title><rect x="596.0" y="677" width="0.2" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="598.98" y="687.5" ></text>
</g>
<g >
<title>___pthread_mutex_lock (52,554,585 samples, 0.01%)</title><rect x="804.9" y="725" width="0.1" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="807.89" y="735.5" ></text>
</g>
<g >
<title>_int_free (41,622,269 samples, 0.01%)</title><rect x="839.5" y="693" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="842.54" y="703.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;char*&gt;::difference_type std::distance&lt;char*&gt; (35,121,535 samples, 0.01%)</title><rect x="956.3" y="725" width="0.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="959.31" y="735.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cpp_redis::reply, std::allocator&lt;cpp_redis::reply&gt; &gt;::_M_create_storage (47,281,546 samples, 0.01%)</title><rect x="915.6" y="725" width="0.1" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="918.56" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (70,078,791 samples, 0.02%)</title><rect x="530.4" y="709" width="0.2" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="533.42" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (941,852,714 samples, 0.24%)</title><rect x="823.6" y="709" width="2.9" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="826.63" y="719.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (97,702,991 samples, 0.03%)</title><rect x="463.2" y="613" width="0.3" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="466.17" y="623.5" ></text>
</g>
<g >
<title>std::__basic_future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::__basic_future (127,154,066 samples, 0.03%)</title><rect x="1095.1" y="725" width="0.3" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1098.05" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (288,245,712 samples, 0.07%)</title><rect x="89.7" y="933" width="0.9" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="92.67" y="943.5" ></text>
</g>
<g >
<title>apache::thrift::concurrency::PthreadThread::threadMain (8,194,860,335 samples, 2.12%)</title><rect x="1087.5" y="917" width="25.0" height="15.0" fill="rgb(241,165,39)" rx="2" ry="2" />
<text  x="1090.54" y="927.5" >a..</text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (273,981,089 samples, 0.07%)</title><rect x="434.0" y="741" width="0.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="437.02" y="751.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (1,255,188,288 samples, 0.32%)</title><rect x="1167.6" y="837" width="3.8" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="1170.57" y="847.5" ></text>
</g>
<g >
<title>__GI___libc_free (47,887,291 samples, 0.01%)</title><rect x="457.9" y="677" width="0.1" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="460.86" y="687.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (85,459,334 samples, 0.02%)</title><rect x="830.2" y="725" width="0.3" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="833.22" y="735.5" ></text>
</g>
<g >
<title>__GI___libc_free (44,314,712 samples, 0.01%)</title><rect x="580.4" y="757" width="0.1" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="583.38" y="767.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt;::deallocate (215,279,771 samples, 0.06%)</title><rect x="1015.8" y="693" width="0.7" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="1018.83" y="703.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;::operator[] (1,183,062,678 samples, 0.31%)</title><rect x="434.9" y="773" width="3.6" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="437.87" y="783.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::~vector (240,150,848 samples, 0.06%)</title><rect x="214.3" y="661" width="0.7" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="217.26" y="671.5" ></text>
</g>
<g >
<title>___pthread_mutex_unlock (42,321,452 samples, 0.01%)</title><rect x="439.1" y="725" width="0.1" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="442.06" y="735.5" ></text>
</g>
<g >
<title>__tcp_transmit_skb (200,404,724 samples, 0.05%)</title><rect x="1060.1" y="437" width="0.6" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1063.06" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (36,940,309 samples, 0.01%)</title><rect x="523.3" y="741" width="0.1" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="526.31" y="751.5" ></text>
</g>
<g >
<title>__GI___libc_free (200,755,102 samples, 0.05%)</title><rect x="904.1" y="757" width="0.6" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="907.09" y="767.5" ></text>
</g>
<g >
<title>__futex_abstimed_wait_common64 (250,428,156 samples, 0.06%)</title><rect x="1086.3" y="805" width="0.8" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="1089.35" y="815.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned_erms (34,729,865 samples, 0.01%)</title><rect x="938.1" y="725" width="0.1" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="941.12" y="735.5" ></text>
</g>
<g >
<title>__libc_recv (63,046,455 samples, 0.02%)</title><rect x="204.0" y="661" width="0.2" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="206.96" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_v (63,050,445 samples, 0.02%)</title><rect x="1003.2" y="757" width="0.2" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1006.23" y="767.5" ></text>
</g>
<g >
<title>dequeue_task (47,415,701 samples, 0.01%)</title><rect x="1088.0" y="613" width="0.2" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="1091.02" y="623.5" ></text>
</g>
<g >
<title>main::{lambda (239,677,684 samples, 0.06%)</title><rect x="26.0" y="933" width="0.7" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="28.99" y="943.5" ></text>
</g>
<g >
<title>operator new (99,118,800 samples, 0.03%)</title><rect x="1160.1" y="677" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1163.09" y="687.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (490,609,272 samples, 0.13%)</title><rect x="961.3" y="773" width="1.5" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="964.29" y="783.5" ></text>
</g>
<g >
<title>operator new (76,808,268 samples, 0.02%)</title><rect x="1165.4" y="837" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1168.41" y="847.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (1,529,530,198 samples, 0.40%)</title><rect x="895.6" y="597" width="4.7" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="898.59" y="607.5" ></text>
</g>
<g >
<title>tcache_get (34,623,645 samples, 0.01%)</title><rect x="517.6" y="629" width="0.2" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="520.65" y="639.5" ></text>
</g>
<g >
<title>Cache::checkIfKeyExists (3,079,962,456 samples, 0.80%)</title><rect x="491.8" y="789" width="9.4" height="15.0" fill="rgb(213,36,8)" rx="2" ry="2" />
<text  x="494.84" y="799.5" ></text>
</g>
<g >
<title>_int_free (85,959,575 samples, 0.02%)</title><rect x="1181.5" y="773" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1184.47" y="783.5" ></text>
</g>
<g >
<title>HMAC (746,027,640 samples, 0.19%)</title><rect x="1153.0" y="837" width="2.3" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="1155.98" y="847.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt; &gt; &gt;::deallocate (178,554,453 samples, 0.05%)</title><rect x="884.3" y="677" width="0.5" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="887.29" y="687.5" ></text>
</g>
<g >
<title>tcp_recvmsg (115,013,463 samples, 0.03%)</title><rect x="1083.1" y="693" width="0.3" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1086.09" y="703.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;std::__future_base::_Result&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__future_base::_Result_base::_Deleter, true, true&gt;::__uniq_ptr_data (70,823,779 samples, 0.02%)</title><rect x="470.5" y="517" width="0.3" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="473.54" y="527.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::~lock_guard (118,558,533 samples, 0.03%)</title><rect x="578.4" y="773" width="0.3" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="581.37" y="783.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, true&gt;* std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (503,638,772 samples, 0.13%)</title><rect x="436.5" y="725" width="1.5" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="439.47" y="735.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;std::__future_base::_State_baseV2&gt;::~shared_ptr (106,110,996 samples, 0.03%)</title><rect x="463.1" y="645" width="0.4" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="466.14" y="655.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::lock_guard (47,233,141 samples, 0.01%)</title><rect x="425.2" y="773" width="0.1" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="428.18" y="783.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_do_set (810,334,099 samples, 0.21%)</title><rect x="809.1" y="613" width="2.5" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="812.12" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, false&gt; &gt; &gt;::_M_deallocate_nodes (317,899,685 samples, 0.08%)</title><rect x="920.7" y="725" width="1.0" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="923.74" y="735.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (52,635,729 samples, 0.01%)</title><rect x="1095.3" y="693" width="0.1" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="1098.28" y="703.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_erase (2,993,437,320 samples, 0.77%)</title><rect x="812.7" y="741" width="9.1" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="815.66" y="751.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::_M_allocate (172,546,133 samples, 0.04%)</title><rect x="447.0" y="741" width="0.5" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="449.98" y="751.5" ></text>
</g>
<g >
<title>exc_page_fault (34,100,432 samples, 0.01%)</title><rect x="1115.7" y="773" width="0.1" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1118.68" y="783.5" ></text>
</g>
<g >
<title>tcp_wmem_schedule (64,226,889 samples, 0.02%)</title><rect x="1086.1" y="677" width="0.2" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="1089.08" y="687.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt; &gt;::type&amp; std::get&lt;0ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt; (52,349,656 samples, 0.01%)</title><rect x="464.3" y="613" width="0.2" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="467.35" y="623.5" ></text>
</g>
<g >
<title>operation::operation (166,413,519 samples, 0.04%)</title><rect x="1094.5" y="725" width="0.5" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="1097.48" y="735.5" ></text>
</g>
<g >
<title>std::set&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;, bool  (70,101,737,111 samples, 18.13%)</title><rect x="580.5" y="773" width="214.0" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="583.54" y="783.5" >std::set&lt;std::pair&lt;std::__cx..</text>
</g>
<g >
<title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::~_Vector_base (46,010,036 samples, 0.01%)</title><rect x="1019.3" y="741" width="0.1" height="15.0" fill="rgb(252,217,51)" rx="2" ry="2" />
<text  x="1022.30" y="751.5" ></text>
</g>
<g >
<title>std::queue&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::deque&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::front (73,702,066 samples, 0.02%)</title><rect x="456.9" y="773" width="0.3" height="15.0" fill="rgb(214,41,9)" rx="2" ry="2" />
<text  x="459.93" y="783.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (83,923,836 samples, 0.02%)</title><rect x="1116.2" y="741" width="0.2" height="15.0" fill="rgb(214,41,9)" rx="2" ry="2" />
<text  x="1119.18" y="751.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;::~pair (5,238,927,741 samples, 1.36%)</title><rect x="693.4" y="725" width="15.9" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="696.35" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_S_equals (35,646,359 samples, 0.01%)</title><rect x="830.0" y="693" width="0.1" height="15.0" fill="rgb(208,16,4)" rx="2" ry="2" />
<text  x="833.03" y="703.5" ></text>
</g>
<g >
<title>std::mutex::unlock (329,974,897 samples, 0.09%)</title><rect x="459.4" y="741" width="1.0" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="462.44" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (82,268,026 samples, 0.02%)</title><rect x="989.3" y="693" width="0.3" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="992.35" y="703.5" ></text>
</g>
<g >
<title>operator new (1,044,765,630 samples, 0.27%)</title><rect x="948.7" y="757" width="3.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="951.75" y="767.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;cpp_redis::reply&gt; &gt;::deallocate (101,745,497 samples, 0.03%)</title><rect x="926.2" y="725" width="0.3" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="929.20" y="735.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (609,034,536 samples, 0.16%)</title><rect x="900.3" y="693" width="1.8" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="903.26" y="703.5" ></text>
</g>
<g >
<title>EVP_EncryptUpdate (160,017,110 samples, 0.04%)</title><rect x="852.2" y="741" width="0.5" height="15.0" fill="rgb(248,197,47)" rx="2" ry="2" />
<text  x="855.23" y="751.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (796,526,976 samples, 0.21%)</title><rect x="987.8" y="741" width="2.4" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="990.77" y="751.5" ></text>
</g>
<g >
<title>arena_for_chunk (45,572,499 samples, 0.01%)</title><rect x="1077.7" y="773" width="0.1" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1080.70" y="783.5" ></text>
</g>
<g >
<title>_int_free (164,924,068 samples, 0.04%)</title><rect x="1071.1" y="709" width="0.5" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1074.14" y="719.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp; std::__get_helper&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (68,341,269 samples, 0.02%)</title><rect x="997.3" y="645" width="0.2" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1000.34" y="655.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;*&gt; (272,575,551 samples, 0.07%)</title><rect x="958.4" y="613" width="0.8" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="961.36" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin (48,736,592 samples, 0.01%)</title><rect x="830.9" y="725" width="0.2" height="15.0" fill="rgb(218,62,15)" rx="2" ry="2" />
<text  x="833.92" y="735.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::operator[] (908,812,646 samples, 0.24%)</title><rect x="830.5" y="773" width="2.8" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="833.49" y="783.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::allocate (431,029,276 samples, 0.11%)</title><rect x="1098.7" y="725" width="1.4" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1101.74" y="735.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned_erms (210,002,397 samples, 0.05%)</title><rect x="1073.4" y="741" width="0.6" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1076.39" y="751.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (385,413,853 samples, 0.10%)</title><rect x="477.5" y="629" width="1.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="480.54" y="639.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (288,224,327 samples, 0.07%)</title><rect x="932.6" y="741" width="0.9" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="935.60" y="751.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (149,425,201 samples, 0.04%)</title><rect x="435.9" y="741" width="0.4" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="438.88" y="751.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::vector (86,036,675 samples, 0.02%)</title><rect x="444.8" y="645" width="0.3" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="447.85" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (49,229,614 samples, 0.01%)</title><rect x="1012.4" y="677" width="0.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1015.38" y="687.5" ></text>
</g>
<g >
<title>OPENSSL_cleanse (2,782,289,762 samples, 0.72%)</title><rect x="10.2" y="949" width="8.5" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="13.21" y="959.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::~vector (317,899,685 samples, 0.08%)</title><rect x="920.7" y="645" width="1.0" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="923.74" y="655.5" ></text>
</g>
<g >
<title>operator new (34,673,565 samples, 0.01%)</title><rect x="203.6" y="597" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="206.62" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_node (1,937,769,433 samples, 0.50%)</title><rect x="814.0" y="709" width="5.9" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="816.99" y="719.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (555,787,973 samples, 0.14%)</title><rect x="927.7" y="757" width="1.7" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="930.66" y="767.5" ></text>
</g>
<g >
<title>tcache_put (71,033,109 samples, 0.02%)</title><rect x="837.5" y="757" width="0.3" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="840.55" y="767.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;char*&gt;::difference_type std::distance&lt;char*&gt; (62,981,380 samples, 0.02%)</title><rect x="1024.7" y="725" width="0.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1027.71" y="735.5" ></text>
</g>
<g >
<title>tcp_rcv_established (58,003,733 samples, 0.02%)</title><rect x="1085.4" y="245" width="0.2" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1088.38" y="255.5" ></text>
</g>
<g >
<title>std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::operator* (69,933,062 samples, 0.02%)</title><rect x="502.5" y="757" width="0.2" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="505.52" y="767.5" ></text>
</g>
<g >
<title>std::__basic_future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::__basic_future (81,097,450 samples, 0.02%)</title><rect x="1101.7" y="597" width="0.3" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1104.70" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_valptr (55,397,450 samples, 0.01%)</title><rect x="991.9" y="725" width="0.2" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="994.90" y="735.5" ></text>
</g>
<g >
<title>inet6_sendmsg (373,189,006 samples, 0.10%)</title><rect x="1059.8" y="533" width="1.2" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="1062.81" y="543.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (358,658,129 samples, 0.09%)</title><rect x="928.1" y="693" width="1.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="931.11" y="703.5" ></text>
</g>
<g >
<title>std::unique_lock&lt;std::mutex&gt;::unlock (350,044,060 samples, 0.09%)</title><rect x="459.4" y="757" width="1.0" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="462.38" y="767.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;std::__future_base::_State_baseV2&gt;::shared_ptr (52,072,672 samples, 0.01%)</title><rect x="1105.6" y="709" width="0.2" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="1108.61" y="719.5" ></text>
</g>
<g >
<title>arena_for_chunk (45,572,499 samples, 0.01%)</title><rect x="1077.7" y="789" width="0.1" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1080.70" y="799.5" ></text>
</g>
<g >
<title>tcp_rcv_established (65,358,414 samples, 0.02%)</title><rect x="1060.2" y="53" width="0.2" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1063.23" y="63.5" ></text>
</g>
<g >
<title>ip_local_deliver (114,137,500 samples, 0.03%)</title><rect x="1060.1" y="133" width="0.3" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1063.08" y="143.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;int, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;::operator[] (332,051,996 samples, 0.09%)</title><rect x="213.2" y="789" width="1.0" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="216.21" y="799.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (227,252,082 samples, 0.06%)</title><rect x="529.1" y="709" width="0.7" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="532.09" y="719.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::erase (1,615,046,618 samples, 0.42%)</title><rect x="882.9" y="773" width="5.0" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="885.93" y="783.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;*&gt; (969,311,469 samples, 0.25%)</title><rect x="816.9" y="597" width="3.0" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="819.91" y="607.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (181,999,590 samples, 0.05%)</title><rect x="1083.1" y="789" width="0.5" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1086.06" y="799.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (215,582,932 samples, 0.06%)</title><rect x="429.6" y="693" width="0.6" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="432.59" y="703.5" ></text>
</g>
<g >
<title>malloc_consolidate (790,442,333 samples, 0.20%)</title><rect x="1178.5" y="757" width="2.4" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1181.45" y="767.5" ></text>
</g>
<g >
<title>__GI___libc_free (118,749,664 samples, 0.03%)</title><rect x="596.6" y="629" width="0.4" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="599.60" y="639.5" ></text>
</g>
<g >
<title>malloc_consolidate (40,433,213 samples, 0.01%)</title><rect x="903.9" y="677" width="0.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="906.94" y="687.5" ></text>
</g>
<g >
<title>operator new (144,432,136 samples, 0.04%)</title><rect x="932.9" y="709" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="935.88" y="719.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::construct&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;&gt; (627,668,958 samples, 0.16%)</title><rect x="1106.3" y="645" width="1.9" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="1109.27" y="655.5" ></text>
</g>
<g >
<title>__GI___libc_free (77,551,745 samples, 0.02%)</title><rect x="1164.3" y="629" width="0.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1167.32" y="639.5" ></text>
</g>
<g >
<title>_int_malloc (429,185,290 samples, 0.11%)</title><rect x="950.5" y="725" width="1.3" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="953.49" y="735.5" ></text>
</g>
<g >
<title>std::mutex::lock (82,497,823 samples, 0.02%)</title><rect x="438.7" y="757" width="0.3" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="441.73" y="767.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::destroy&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (438,369,400 samples, 0.11%)</title><rect x="818.5" y="485" width="1.3" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="821.46" y="495.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (1,160,028,500 samples, 0.30%)</title><rect x="878.1" y="757" width="3.5" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="881.08" y="767.5" ></text>
</g>
<g >
<title>operator new (98,661,490 samples, 0.03%)</title><rect x="1164.8" y="757" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1167.77" y="767.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (68,679,989 samples, 0.02%)</title><rect x="1093.1" y="613" width="0.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1096.10" y="623.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt; &gt; &gt;::allocate (109,701,006 samples, 0.03%)</title><rect x="790.4" y="677" width="0.3" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="793.39" y="687.5" ></text>
</g>
<g >
<title>std::pair&lt;int, std::pair&lt;sequence_id const&amp;, std::vector&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;::pair (59,567,058 samples, 0.02%)</title><rect x="1100.5" y="677" width="0.2" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="1103.54" y="687.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (325,105,443 samples, 0.08%)</title><rect x="219.6" y="773" width="1.0" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="222.57" y="783.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (42,186,172 samples, 0.01%)</title><rect x="421.4" y="805" width="0.1" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="424.37" y="815.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_erase (747,864,839 samples, 0.19%)</title><rect x="883.1" y="725" width="2.3" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="886.10" y="735.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;cpp_redis::reply*&gt; (339,393,727 samples, 0.09%)</title><rect x="926.6" y="725" width="1.0" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="929.56" y="735.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (90,081,862 samples, 0.02%)</title><rect x="139.0" y="757" width="0.2" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="141.97" y="767.5" ></text>
</g>
<g >
<title>queue&lt;std::pair&lt;int, std::pair&lt;sequence_id const&amp;, std::vector&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::push (83,128,217 samples, 0.02%)</title><rect x="1100.5" y="773" width="0.3" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="1103.51" y="783.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (106,303,961 samples, 0.03%)</title><rect x="217.7" y="773" width="0.3" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="220.68" y="783.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, true&gt; &gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (501,168,351 samples, 0.13%)</title><rect x="534.6" y="709" width="1.5" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="537.58" y="719.5" ></text>
</g>
<g >
<title>arena_for_chunk (33,035,148 samples, 0.01%)</title><rect x="1082.5" y="773" width="0.1" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1085.54" y="783.5" ></text>
</g>
<g >
<title>_int_malloc (294,881,172 samples, 0.08%)</title><rect x="998.7" y="613" width="0.9" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1001.67" y="623.5" ></text>
</g>
<g >
<title>_int_free (96,787,332 samples, 0.03%)</title><rect x="1113.5" y="949" width="0.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1116.47" y="959.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (49,611,876 samples, 0.01%)</title><rect x="441.6" y="693" width="0.2" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="444.60" y="703.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::lock_guard (135,430,746 samples, 0.04%)</title><rect x="882.1" y="773" width="0.4" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="885.13" y="783.5" ></text>
</g>
<g >
<title>EVP_PKEY_CTX_free (43,555,181 samples, 0.01%)</title><rect x="48.2" y="933" width="0.1" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="51.21" y="943.5" ></text>
</g>
<g >
<title>apache::thrift::transport::TVirtualTransport&lt;apache::thrift::transport::TSocket, apache::thrift::transport::TTransportDefaults&gt;::write_virt (407,960,148 samples, 0.11%)</title><rect x="1059.8" y="677" width="1.2" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1062.78" y="687.5" ></text>
</g>
<g >
<title>handle_mm_fault (90,081,862 samples, 0.02%)</title><rect x="139.0" y="709" width="0.2" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="141.97" y="719.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::unique_ptr&lt;std::__future_base::_Result&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__future_base::_Result_base::_Deleter, void&gt; (226,965,873 samples, 0.06%)</title><rect x="810.2" y="549" width="0.7" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="813.18" y="559.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (172,126,257 samples, 0.04%)</title><rect x="576.8" y="693" width="0.6" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="579.83" y="703.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, void  (505,935,797 samples, 0.13%)</title><rect x="1078.3" y="709" width="1.5" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="1081.29" y="719.5" ></text>
</g>
<g >
<title>tcp_v4_rcv (61,497,330 samples, 0.02%)</title><rect x="1085.4" y="277" width="0.2" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="1088.37" y="287.5" ></text>
</g>
<g >
<title>operation::operation (1,061,382,115 samples, 0.27%)</title><rect x="453.4" y="757" width="3.2" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="456.36" y="767.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned_erms (39,229,561 samples, 0.01%)</title><rect x="940.1" y="645" width="0.1" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="943.13" y="655.5" ></text>
</g>
<g >
<title>__wake_up_common (77,934,205 samples, 0.02%)</title><rect x="1112.0" y="661" width="0.2" height="15.0" fill="rgb(248,197,47)" rx="2" ry="2" />
<text  x="1114.95" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (59,366,714 samples, 0.02%)</title><rect x="532.3" y="725" width="0.2" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="535.32" y="735.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1,551,783,155 samples, 0.40%)</title><rect x="603.8" y="693" width="4.8" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="606.83" y="703.5" ></text>
</g>
<g >
<title>do_syscall_64 (579,101,555 samples, 0.15%)</title><rect x="1084.5" y="773" width="1.8" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1087.52" y="783.5" ></text>
</g>
<g >
<title>futex_wait (203,217,647 samples, 0.05%)</title><rect x="1054.2" y="629" width="0.6" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1057.21" y="639.5" ></text>
</g>
<g >
<title>bool std::operator&lt; &lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (406,221,914 samples, 0.11%)</title><rect x="1121.3" y="789" width="1.2" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="1124.29" y="799.5" ></text>
</g>
<g >
<title>__GI___libc_free (115,783,980 samples, 0.03%)</title><rect x="1074.1" y="773" width="0.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1077.05" y="783.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;void  (281,054,969,830 samples, 72.70%)</title><rect x="204.3" y="885" width="857.8" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="207.26" y="895.5" >std::thread::_Invoker&lt;std::tuple&lt;void </text>
</g>
<g >
<title>do_futex (178,652,059 samples, 0.05%)</title><rect x="1086.4" y="741" width="0.5" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1089.40" y="751.5" ></text>
</g>
<g >
<title>encryption_engine::decrypt (2,781,391,529 samples, 0.72%)</title><rect x="838.4" y="773" width="8.5" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="841.42" y="783.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt;* std::_Rb_tree&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;, std::_Identity&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt;, bool  (263,315,118 samples, 0.07%)</title><rect x="1142.3" y="789" width="0.9" height="15.0" fill="rgb(230,117,27)" rx="2" ry="2" />
<text  x="1145.35" y="799.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (75,713,290 samples, 0.02%)</title><rect x="1028.8" y="661" width="0.2" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="1031.80" y="671.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::deallocate (62,313,302 samples, 0.02%)</title><rect x="214.3" y="613" width="0.1" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="217.26" y="623.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;char*&gt;::difference_type std::distance&lt;char*&gt; (36,286,680 samples, 0.01%)</title><rect x="26.6" y="917" width="0.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="29.61" y="927.5" ></text>
</g>
<g >
<title>operator new (75,727,502 samples, 0.02%)</title><rect x="906.6" y="629" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="909.61" y="639.5" ></text>
</g>
<g >
<title>_int_malloc (331,992,357 samples, 0.09%)</title><rect x="65.5" y="933" width="1.0" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="68.50" y="943.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (287,574,025 samples, 0.07%)</title><rect x="985.2" y="709" width="0.9" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="988.18" y="719.5" ></text>
</g>
<g >
<title>process_backlog (142,082,924 samples, 0.04%)</title><rect x="1060.1" y="197" width="0.4" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="1063.08" y="207.5" ></text>
</g>
<g >
<title>std::__basic_future&lt;cpp_redis::reply&gt;::_M_get_result (65,321,930 samples, 0.02%)</title><rect x="953.2" y="757" width="0.2" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="956.24" y="767.5" ></text>
</g>
<g >
<title>EVP_CipherInit_ex (84,319,900 samples, 0.02%)</title><rect x="1150.9" y="821" width="0.2" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1153.86" y="831.5" ></text>
</g>
<g >
<title>cpp_redis::client::del (1,405,887,821 samples, 0.36%)</title><rect x="206.0" y="757" width="4.3" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="209.02" y="767.5" ></text>
</g>
<g >
<title>std::__exception_ptr::operator== (213,025,911 samples, 0.06%)</title><rect x="1052.9" y="773" width="0.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1055.89" y="783.5" ></text>
</g>
<g >
<title>_int_malloc (140,564,218 samples, 0.04%)</title><rect x="1119.5" y="789" width="0.4" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1122.51" y="799.5" ></text>
</g>
<g >
<title>__alloc_skb (69,649,483 samples, 0.02%)</title><rect x="1111.6" y="677" width="0.2" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="1114.61" y="687.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator= (37,137,280 samples, 0.01%)</title><rect x="32.4" y="933" width="0.1" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="35.36" y="943.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct (39,881,274 samples, 0.01%)</title><rect x="208.0" y="677" width="0.1" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="211.01" y="687.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;queue&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;,  (17,648,603,679 samples, 4.57%)</title><rect x="350.9" y="805" width="53.9" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="353.93" y="815.5" >std::..</text>
</g>
<g >
<title>waffle_proxy::put_future (2,090,947,674 samples, 0.54%)</title><rect x="1102.0" y="773" width="6.4" height="15.0" fill="rgb(252,217,52)" rx="2" ry="2" />
<text  x="1105.05" y="783.5" ></text>
</g>
<g >
<title>unlink_chunk (38,789,441 samples, 0.01%)</title><rect x="205.6" y="677" width="0.1" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="208.60" y="687.5" ></text>
</g>
<g >
<title>std::enable_if&lt;std::__and_&lt;std::__not_&lt;std::is_void&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt; &gt; &gt;, std::is_convertible&lt;std::__invoke_result&lt;std::__future_base::_State_baseV2::_Setter&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;&amp;&gt;::type, std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt; &gt; &gt;::value, std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt; &gt;::type std::__invoke_r&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;, std::__future_base::_State_baseV2::_Setter&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;&amp;&gt; (83,521,118 samples, 0.02%)</title><rect x="469.7" y="581" width="0.3" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="472.71" y="591.5" ></text>
</g>
<g >
<title>do_syscall_64 (67,468,248 samples, 0.02%)</title><rect x="202.5" y="661" width="0.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="205.53" y="671.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::operator[] (2,273,248,057 samples, 0.59%)</title><rect x="821.8" y="773" width="6.9" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="824.80" y="783.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_S_equals (100,849,267 samples, 0.03%)</title><rect x="430.4" y="693" width="0.3" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="433.43" y="703.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_rehash_aux (40,887,566 samples, 0.01%)</title><rect x="1174.9" y="789" width="0.2" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="1177.94" y="799.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (322,434,225 samples, 0.08%)</title><rect x="920.7" y="741" width="1.0" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="923.72" y="751.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;, std::_Identity&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt;, bool  (442,843,724 samples, 0.11%)</title><rect x="74.9" y="933" width="1.3" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="77.87" y="943.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (255,461,488 samples, 0.07%)</title><rect x="1115.2" y="837" width="0.8" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1118.18" y="847.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (76,841,106 samples, 0.02%)</title><rect x="451.6" y="741" width="0.2" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="454.58" y="751.5" ></text>
</g>
<g >
<title>std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;* std::__relocate_a&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;*, std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;*, std::allocator&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; (124,950,978 samples, 0.03%)</title><rect x="1090.9" y="693" width="0.4" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="1093.87" y="703.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;std::__future_base::_State_baseV2&gt; std::make_shared&lt;std::__future_base::_State_baseV2&gt; (397,222,641 samples, 0.10%)</title><rect x="1106.8" y="613" width="1.2" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="1109.79" y="623.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (165,165,139 samples, 0.04%)</title><rect x="1056.0" y="677" width="0.5" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="1058.99" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (70,312,409 samples, 0.02%)</title><rect x="888.6" y="725" width="0.2" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="891.60" y="735.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_allocate (529,670,459 samples, 0.14%)</title><rect x="1109.3" y="757" width="1.6" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1112.26" y="767.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::_M_check_len (253,573,124 samples, 0.07%)</title><rect x="447.6" y="741" width="0.8" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="450.59" y="751.5" ></text>
</g>
<g >
<title>cpp_redis::network::redis_connection::commit (130,760,990 samples, 0.03%)</title><rect x="1156.7" y="821" width="0.4" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1159.66" y="831.5" ></text>
</g>
<g >
<title>CRYPTO_free (35,033,761 samples, 0.01%)</title><rect x="861.1" y="709" width="0.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="864.07" y="719.5" ></text>
</g>
<g >
<title>std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::future (39,530,316 samples, 0.01%)</title><rect x="1091.1" y="613" width="0.1" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="1094.09" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (8,793,556,399 samples, 2.27%)</title><rect x="977.2" y="773" width="26.9" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="980.21" y="783.5" >s..</text>
</g>
<g >
<title>std::_Identity&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt;::operator (171,255,474 samples, 0.04%)</title><rect x="595.0" y="709" width="0.5" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="597.96" y="719.5" ></text>
</g>
<g >
<title>do_epoll_wait (149,151,302 samples, 0.04%)</title><rect x="201.9" y="661" width="0.5" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="204.93" y="671.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::size (38,749,841 samples, 0.01%)</title><rect x="824.7" y="661" width="0.2" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="827.74" y="671.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (34,534,174 samples, 0.01%)</title><rect x="953.0" y="757" width="0.1" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="956.03" y="767.5" ></text>
</g>
<g >
<title>_int_malloc (112,704,089 samples, 0.03%)</title><rect x="432.4" y="645" width="0.3" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="435.38" y="655.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (232,057,836 samples, 0.06%)</title><rect x="426.8" y="741" width="0.7" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="429.76" y="751.5" ></text>
</g>
<g >
<title>syscall (182,814,725 samples, 0.05%)</title><rect x="201.9" y="725" width="0.6" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="204.90" y="735.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node_base*&gt; &gt;::allocate (34,016,703 samples, 0.01%)</title><rect x="988.9" y="677" width="0.1" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="991.87" y="687.5" ></text>
</g>
<g >
<title>ttwu_queue_wakelist (37,055,172 samples, 0.01%)</title><rect x="465.3" y="629" width="0.1" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="468.34" y="639.5" ></text>
</g>
<g >
<title>OPENSSL_cleanse (668,778,024 samples, 0.17%)</title><rect x="114.7" y="933" width="2.0" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="117.68" y="943.5" ></text>
</g>
<g >
<title>__GI___libc_free (72,001,089 samples, 0.02%)</title><rect x="461.0" y="757" width="0.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="463.99" y="767.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (80,474,718 samples, 0.02%)</title><rect x="531.6" y="677" width="0.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="534.60" y="687.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (48,247,966 samples, 0.01%)</title><rect x="217.3" y="773" width="0.2" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="220.31" y="783.5" ></text>
</g>
<g >
<title>CRYPTO_zalloc (96,185,057 samples, 0.02%)</title><rect x="849.6" y="725" width="0.3" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="852.64" y="735.5" ></text>
</g>
<g >
<title>lll_mutex_lock_optimized (55,917,128 samples, 0.01%)</title><rect x="527.4" y="709" width="0.2" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="530.41" y="719.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (90,255,161 samples, 0.02%)</title><rect x="94.3" y="933" width="0.2" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="97.27" y="943.5" ></text>
</g>
<g >
<title>__GI___libc_free (136,587,021 samples, 0.04%)</title><rect x="615.0" y="693" width="0.4" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="617.98" y="703.5" ></text>
</g>
<g >
<title>std::pair&lt;int const, std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::~pair (511,911,207 samples, 0.13%)</title><rect x="957.6" y="661" width="1.6" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="960.63" y="671.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt; &gt; &gt;::deallocate (271,483,235 samples, 0.07%)</title><rect x="1005.7" y="693" width="0.9" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="1008.73" y="703.5" ></text>
</g>
<g >
<title>__gthread_mutex_lock (70,321,603 samples, 0.02%)</title><rect x="438.8" y="741" width="0.2" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="441.76" y="751.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::operator* (41,733,961 samples, 0.01%)</title><rect x="120.1" y="933" width="0.2" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="123.15" y="943.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (76,808,268 samples, 0.02%)</title><rect x="1165.4" y="821" width="0.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1168.41" y="831.5" ></text>
</g>
<g >
<title>_int_malloc (110,303,241 samples, 0.03%)</title><rect x="955.6" y="693" width="0.3" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="958.57" y="703.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;int, std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::operator[] (116,967,047 samples, 0.03%)</title><rect x="1163.8" y="853" width="0.3" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1166.76" y="863.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, true&gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (411,881,607 samples, 0.11%)</title><rect x="444.3" y="693" width="1.3" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="447.32" y="703.5" ></text>
</g>
<g >
<title>cpp_redis::builders::integer_builder::operator&lt;&lt; (309,506,073 samples, 0.08%)</title><rect x="1066.8" y="725" width="0.9" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1069.78" y="735.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;operation&gt; &gt;::deallocate (72,032,981 samples, 0.02%)</title><rect x="404.9" y="757" width="0.2" height="15.0" fill="rgb(226,101,24)" rx="2" ry="2" />
<text  x="407.88" y="767.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (46,379,585 samples, 0.01%)</title><rect x="498.5" y="677" width="0.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="501.49" y="687.5" ></text>
</g>
<g >
<title>cpp_redis::reply* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;cpp_redis::reply const*, std::vector&lt;cpp_redis::reply, std::allocator&lt;cpp_redis::reply&gt; &gt; &gt;, cpp_redis::reply*&gt; (63,836,732 samples, 0.02%)</title><rect x="915.2" y="725" width="0.2" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="918.24" y="735.5" ></text>
</g>
<g >
<title>schedule (145,726,201 samples, 0.04%)</title><rect x="1054.2" y="597" width="0.5" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1057.21" y="607.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::wait (479,435,232 samples, 0.12%)</title><rect x="1053.5" y="773" width="1.5" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="1056.54" y="783.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned_erms (34,067,640 samples, 0.01%)</title><rect x="970.4" y="757" width="0.1" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="973.40" y="767.5" ></text>
</g>
<g >
<title>_int_free (94,536,007 samples, 0.02%)</title><rect x="910.8" y="645" width="0.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="913.79" y="655.5" ></text>
</g>
<g >
<title>apache::thrift::protocol::TProtocol::readString (219,680,520 samples, 0.06%)</title><rect x="1108.5" y="789" width="0.7" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1111.52" y="799.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (100,665,891 samples, 0.03%)</title><rect x="117.0" y="917" width="0.3" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="120.03" y="927.5" ></text>
</g>
<g >
<title>std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::promise (448,273,256 samples, 0.12%)</title><rect x="1095.9" y="629" width="1.4" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="1098.93" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (72,603,146 samples, 0.02%)</title><rect x="523.1" y="709" width="0.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="526.08" y="719.5" ></text>
</g>
<g >
<title>void std::_Function_base::_Base_manager&lt;std::__future_base::_State_baseV2::_Setter&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt; &gt;::_M_init_functor&lt;std::__future_base::_State_baseV2::_Setter&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt; &gt; (48,829,807 samples, 0.01%)</title><rect x="473.2" y="757" width="0.2" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="476.22" y="767.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (46,431,996 samples, 0.01%)</title><rect x="23.2" y="933" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="26.19" y="943.5" ></text>
</g>
<g >
<title>std::deque&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;::begin (49,160,842 samples, 0.01%)</title><rect x="457.0" y="741" width="0.2" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="460.00" y="751.5" ></text>
</g>
<g >
<title>tacopie::io_service::process_events (106,358,988 samples, 0.03%)</title><rect x="1063.1" y="885" width="0.4" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="1066.15" y="895.5" ></text>
</g>
<g >
<title>handle_pte_fault (34,961,903 samples, 0.01%)</title><rect x="1161.4" y="581" width="0.1" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1164.42" y="591.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (150,702,271 samples, 0.04%)</title><rect x="211.0" y="693" width="0.5" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="214.04" y="703.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;* std::__relocate_a&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;*, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;*, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; (95,153,509 samples, 0.02%)</title><rect x="1165.1" y="773" width="0.3" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="1168.07" y="783.5" ></text>
</g>
<g >
<title>do_anonymous_page (41,294,646 samples, 0.01%)</title><rect x="1157.8" y="709" width="0.1" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1160.81" y="719.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (57,591,696 samples, 0.01%)</title><rect x="818.6" y="437" width="0.2" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="821.65" y="447.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (311,611,586 samples, 0.08%)</title><rect x="219.6" y="741" width="1.0" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="222.61" y="751.5" ></text>
</g>
<g >
<title>__GI___libc_free (147,196,650 samples, 0.04%)</title><rect x="501.6" y="773" width="0.5" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="504.61" y="783.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;::_M_valptr (70,864,702 samples, 0.02%)</title><rect x="802.9" y="725" width="0.2" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="805.91" y="735.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (234,214,898 samples, 0.06%)</title><rect x="1158.8" y="725" width="0.7" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1161.79" y="735.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::find (113,594,270 samples, 0.03%)</title><rect x="1174.5" y="869" width="0.3" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="1177.50" y="879.5" ></text>
</g>
<g >
<title>_int_malloc (138,729,313 samples, 0.04%)</title><rect x="901.4" y="581" width="0.4" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="904.40" y="591.5" ></text>
</g>
<g >
<title>cpp_redis::builders::bulk_string_builder::~bulk_string_builder (147,207,641 samples, 0.04%)</title><rect x="1069.4" y="757" width="0.5" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="1072.43" y="767.5" ></text>
</g>
<g >
<title>__GI___libc_free (76,617,028 samples, 0.02%)</title><rect x="204.5" y="789" width="0.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="207.54" y="799.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::insert (122,431,134 samples, 0.03%)</title><rect x="1174.8" y="869" width="0.4" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1177.85" y="879.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt; &gt;::operator[] (12,606,620,059 samples, 3.26%)</title><rect x="539.2" y="773" width="38.5" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="542.23" y="783.5" >std..</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (52,600,473 samples, 0.01%)</title><rect x="427.5" y="741" width="0.1" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="430.47" y="751.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (83,060,875 samples, 0.02%)</title><rect x="942.1" y="661" width="0.3" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="945.13" y="671.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_List_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::allocate (323,266,689 samples, 0.08%)</title><rect x="525.6" y="709" width="1.0" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="528.64" y="719.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (115,405,474 samples, 0.03%)</title><rect x="1161.2" y="693" width="0.4" height="15.0" fill="rgb(214,41,9)" rx="2" ry="2" />
<text  x="1164.23" y="703.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (218,473,756 samples, 0.06%)</title><rect x="435.2" y="725" width="0.7" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="438.20" y="735.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (48,319,336 samples, 0.01%)</title><rect x="1080.0" y="741" width="0.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1083.03" y="751.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (110,776,464 samples, 0.03%)</title><rect x="1082.7" y="789" width="0.3" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1085.68" y="799.5" ></text>
</g>
<g >
<title>operator new (34,849,013 samples, 0.01%)</title><rect x="1109.0" y="693" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1111.99" y="703.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;char*&gt;::difference_type std::distance&lt;char*&gt; (83,663,871 samples, 0.02%)</title><rect x="185.4" y="933" width="0.3" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="188.41" y="943.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt;::_M_next (196,481,849 samples, 0.05%)</title><rect x="989.6" y="709" width="0.6" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="992.60" y="719.5" ></text>
</g>
<g >
<title>std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;  (90,097,076 samples, 0.02%)</title><rect x="811.7" y="757" width="0.3" height="15.0" fill="rgb(241,170,40)" rx="2" ry="2" />
<text  x="814.74" y="767.5" ></text>
</g>
<g >
<title>bool std::operator==&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (44,048,226 samples, 0.01%)</title><rect x="450.6" y="789" width="0.1" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="453.60" y="799.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;queue&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;queue&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::operator[] (2,337,239,598 samples, 0.60%)</title><rect x="186.5" y="933" width="7.1" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="189.51" y="943.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::_M_check_len (113,953,579 samples, 0.03%)</title><rect x="834.0" y="741" width="0.3" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="836.95" y="751.5" ></text>
</g>
<g >
<title>_int_malloc (288,742,590 samples, 0.07%)</title><rect x="477.8" y="613" width="0.9" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="480.80" y="623.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::push_front (773,783,393 samples, 0.20%)</title><rect x="524.9" y="773" width="2.3" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="527.86" y="783.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1,204,878,717 samples, 0.31%)</title><rect x="911.1" y="741" width="3.7" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="914.15" y="751.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (68,188,423 samples, 0.02%)</title><rect x="451.4" y="741" width="0.2" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="454.38" y="751.5" ></text>
</g>
<g >
<title>futex_wait (47,227,817 samples, 0.01%)</title><rect x="1103.7" y="629" width="0.2" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1106.74" y="639.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (63,120,315 samples, 0.02%)</title><rect x="877.7" y="757" width="0.2" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="880.70" y="767.5" ></text>
</g>
<g >
<title>std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::getline&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (53,542,116 samples, 0.01%)</title><rect x="1114.9" y="869" width="0.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1117.94" y="879.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (106,930,579 samples, 0.03%)</title><rect x="1090.5" y="661" width="0.3" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1093.49" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (12,585,710,056 samples, 3.26%)</title><rect x="539.3" y="757" width="38.4" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="542.30" y="767.5" >std..</text>
</g>
<g >
<title>__x64_sys_poll (41,439,606 samples, 0.01%)</title><rect x="1111.3" y="773" width="0.1" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="1114.26" y="783.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (203,857,120 samples, 0.05%)</title><rect x="426.8" y="725" width="0.7" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="429.84" y="735.5" ></text>
</g>
<g >
<title>__GI___libc_free (65,079,736 samples, 0.02%)</title><rect x="1094.2" y="725" width="0.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1097.23" y="735.5" ></text>
</g>
<g >
<title>__pthread_once_slow (2,254,733,702 samples, 0.58%)</title><rect x="465.9" y="725" width="6.8" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="468.86" y="735.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::shared_ptr&lt;std::allocator&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;&gt; (782,359,441 samples, 0.20%)</title><rect x="1106.0" y="725" width="2.3" height="15.0" fill="rgb(211,32,7)" rx="2" ry="2" />
<text  x="1108.96" y="735.5" ></text>
</g>
<g >
<title>handle_mm_fault (77,893,829 samples, 0.02%)</title><rect x="1155.8" y="725" width="0.2" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1158.77" y="735.5" ></text>
</g>
<g >
<title>std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::pair&lt;operation&amp;, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;&amp;, true&gt; (184,151,789 samples, 0.05%)</title><rect x="1104.9" y="741" width="0.5" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="1107.86" y="751.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt;* std::_Rb_tree&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;, std::_Identity&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt;, bool  (267,996,578 samples, 0.07%)</title><rect x="1142.3" y="805" width="0.9" height="15.0" fill="rgb(230,117,27)" rx="2" ry="2" />
<text  x="1145.35" y="815.5" ></text>
</g>
<g >
<title>std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::future (51,126,802 samples, 0.01%)</title><rect x="1101.1" y="709" width="0.2" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="1104.14" y="719.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (53,758,014 samples, 0.01%)</title><rect x="907.0" y="661" width="0.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="910.03" y="671.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;::_Tuple_impl (55,721,870 samples, 0.01%)</title><rect x="77.4" y="933" width="0.2" height="15.0" fill="rgb(231,124,29)" rx="2" ry="2" />
<text  x="80.41" y="943.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::construct&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (61,098,300 samples, 0.02%)</title><rect x="1091.0" y="629" width="0.2" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1094.02" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_S_relocate (95,153,509 samples, 0.02%)</title><rect x="1165.1" y="805" width="0.3" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1168.07" y="815.5" ></text>
</g>
<g >
<title>__gthread_mutex_unlock (321,952,242 samples, 0.08%)</title><rect x="459.5" y="725" width="0.9" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="462.46" y="735.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (78,588,653 samples, 0.02%)</title><rect x="159.2" y="933" width="0.2" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="162.18" y="943.5" ></text>
</g>
<g >
<title>__GI___libc_free (69,678,196 samples, 0.02%)</title><rect x="205.8" y="773" width="0.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="208.76" y="783.5" ></text>
</g>
<g >
<title>tcp_write_xmit (186,898,110 samples, 0.05%)</title><rect x="1085.3" y="645" width="0.6" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1088.30" y="655.5" ></text>
</g>
<g >
<title>operator new (300,997,279 samples, 0.08%)</title><rect x="925.3" y="677" width="0.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="928.29" y="687.5" ></text>
</g>
<g >
<title>__GI___libc_free (99,490,149 samples, 0.03%)</title><rect x="920.7" y="565" width="0.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="923.74" y="575.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::size (43,652,689 samples, 0.01%)</title><rect x="886.3" y="661" width="0.2" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="889.32" y="671.5" ></text>
</g>
<g >
<title>cpp_redis::network::tcp_client::async_write (82,260,734 samples, 0.02%)</title><rect x="935.2" y="725" width="0.2" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="938.15" y="735.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned_erms (434,750,510 samples, 0.11%)</title><rect x="519.4" y="757" width="1.4" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="522.43" y="767.5" ></text>
</g>
<g >
<title>operator delete (382,850,430 samples, 0.10%)</title><rect x="706.2" y="709" width="1.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="709.23" y="719.5" ></text>
</g>
<g >
<title>sock_alloc_send_pskb (69,649,483 samples, 0.02%)</title><rect x="1111.6" y="709" width="0.2" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="1114.61" y="719.5" ></text>
</g>
<g >
<title>__libc_recv (187,753,476 samples, 0.05%)</title><rect x="1083.0" y="821" width="0.6" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="1086.05" y="831.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (48,917,204 samples, 0.01%)</title><rect x="1095.3" y="677" width="0.1" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1098.29" y="687.5" ></text>
</g>
<g >
<title>__sys_recvfrom (160,608,717 samples, 0.04%)</title><rect x="1083.1" y="741" width="0.5" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="1086.06" y="751.5" ></text>
</g>
<g >
<title>operator new (392,057,351 samples, 0.10%)</title><rect x="909.1" y="693" width="1.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="912.06" y="703.5" ></text>
</g>
<g >
<title>std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::~future (33,945,745 samples, 0.01%)</title><rect x="1057.9" y="693" width="0.1" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1060.86" y="703.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;::erase (3,547,198,287 samples, 0.92%)</title><rect x="504.1" y="773" width="10.9" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="507.15" y="783.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (48,835,477 samples, 0.01%)</title><rect x="440.9" y="741" width="0.1" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="443.86" y="751.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (162,877,242 samples, 0.04%)</title><rect x="1094.5" y="709" width="0.5" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1097.49" y="719.5" ></text>
</g>
<g >
<title>___pthread_mutex_lock (45,431,987 samples, 0.01%)</title><rect x="1117.0" y="805" width="0.1" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1120.01" y="815.5" ></text>
</g>
<g >
<title>_int_free (176,052,799 samples, 0.05%)</title><rect x="958.5" y="533" width="0.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="961.52" y="543.5" ></text>
</g>
<g >
<title>_int_free (115,783,980 samples, 0.03%)</title><rect x="1074.1" y="757" width="0.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1077.05" y="767.5" ></text>
</g>
<g >
<title>tcache_put (39,687,452 samples, 0.01%)</title><rect x="1049.0" y="725" width="0.2" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="1052.04" y="735.5" ></text>
</g>
<g >
<title>void std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::emplace_back&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (658,132,796 samples, 0.17%)</title><rect x="959.3" y="757" width="2.0" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="962.26" y="767.5" ></text>
</g>
<g >
<title>void std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_range_insert&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; (446,248,747 samples, 0.12%)</title><rect x="909.0" y="725" width="1.3" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="911.96" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_S_equals (428,553,308 samples, 0.11%)</title><rect x="511.9" y="693" width="1.3" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="514.86" y="703.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;cpp_redis::reply*&gt; (51,150,634 samples, 0.01%)</title><rect x="1074.5" y="741" width="0.2" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="1077.52" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (57,689,516 samples, 0.01%)</title><rect x="829.9" y="693" width="0.1" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="832.85" y="703.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator+= (144,505,790 samples, 0.04%)</title><rect x="856.4" y="757" width="0.4" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="859.36" y="767.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_List_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::allocate (169,504,226 samples, 0.04%)</title><rect x="432.2" y="709" width="0.6" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="435.25" y="719.5" ></text>
</g>
<g >
<title>_int_free (168,664,086 samples, 0.04%)</title><rect x="921.1" y="549" width="0.5" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="924.11" y="559.5" ></text>
</g>
<g >
<title>__GI___lll_lock_wait (72,494,884 samples, 0.02%)</title><rect x="1093.1" y="645" width="0.2" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="1096.09" y="655.5" ></text>
</g>
<g >
<title>schedule_hrtimeout_range (105,067,086 samples, 0.03%)</title><rect x="202.0" y="629" width="0.3" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="205.00" y="639.5" ></text>
</g>
<g >
<title>__GI___libc_free (127,462,449 samples, 0.03%)</title><rect x="524.5" y="693" width="0.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="527.45" y="703.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::~_Hashtable (609,088,378 samples, 0.16%)</title><rect x="1015.4" y="773" width="1.9" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1018.44" y="783.5" ></text>
</g>
<g >
<title>__libc_send (407,960,148 samples, 0.11%)</title><rect x="1059.8" y="613" width="1.2" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="1062.78" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_insert_unique_node (54,371,330 samples, 0.01%)</title><rect x="1174.9" y="821" width="0.2" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="1177.92" y="831.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (37,500,744 samples, 0.01%)</title><rect x="73.1" y="933" width="0.1" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="76.12" y="943.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::base (74,212,993 samples, 0.02%)</title><rect x="58.8" y="933" width="0.2" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="61.79" y="943.5" ></text>
</g>
<g >
<title>void std::deque&lt;std::pair&lt;int, std::pair&lt;sequence_id const&amp;, std::vector&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int, std::pair&lt;sequence_id const&amp;, std::vector&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::emplace_back&lt;std::pair&lt;int, std::pair&lt;sequence_id const&amp;, std::vector&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; (83,128,217 samples, 0.02%)</title><rect x="1100.5" y="725" width="0.3" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1103.51" y="735.5" ></text>
</g>
<g >
<title>_int_free (2,304,065,927 samples, 0.60%)</title><rect x="697.5" y="693" width="7.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="700.52" y="703.5" ></text>
</g>
<g >
<title>__dev_queue_xmit (114,100,136 samples, 0.03%)</title><rect x="1085.3" y="485" width="0.4" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="1088.35" y="495.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (44,277,047 samples, 0.01%)</title><rect x="902.4" y="645" width="0.1" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="905.38" y="655.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;operation&gt; (139,294,875 samples, 0.04%)</title><rect x="487.4" y="709" width="0.4" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="490.39" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_S_equals (203,945,701 samples, 0.05%)</title><rect x="1170.8" y="789" width="0.6" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1173.77" y="799.5" ></text>
</g>
<g >
<title>CRYPTO_zalloc (59,430,766 samples, 0.02%)</title><rect x="1150.5" y="821" width="0.1" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="1153.47" y="831.5" ></text>
</g>
<g >
<title>__get_user_8 (55,216,278 samples, 0.01%)</title><rect x="1088.6" y="629" width="0.1" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="1091.57" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (49,061,509 samples, 0.01%)</title><rect x="833.0" y="741" width="0.2" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="836.05" y="751.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (576,228,338 samples, 0.15%)</title><rect x="589.2" y="677" width="1.8" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="592.20" y="687.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (516,223,018 samples, 0.13%)</title><rect x="957.6" y="757" width="1.6" height="15.0" fill="rgb(253,220,52)" rx="2" ry="2" />
<text  x="960.61" y="767.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (266,928,259 samples, 0.07%)</title><rect x="1065.1" y="757" width="0.8" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1068.06" y="767.5" ></text>
</g>
<g >
<title>_int_malloc (189,049,878 samples, 0.05%)</title><rect x="931.7" y="725" width="0.5" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="934.67" y="735.5" ></text>
</g>
<g >
<title>std::mutex::unlock (90,284,116 samples, 0.02%)</title><rect x="1118.9" y="837" width="0.3" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1121.92" y="847.5" ></text>
</g>
<g >
<title>unsigned int apache::thrift::protocol::TBinaryProtocolT&lt;apache::thrift::transport::TTransport, apache::thrift::protocol::TNetworkBigEndian&gt;::readString&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (211,681,708 samples, 0.05%)</title><rect x="1108.5" y="757" width="0.7" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1111.55" y="767.5" ></text>
</g>
<g >
<title>__sk_mem_raise_allocated (64,226,889 samples, 0.02%)</title><rect x="1086.1" y="645" width="0.2" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="1089.08" y="655.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (125,600,365 samples, 0.03%)</title><rect x="821.4" y="693" width="0.3" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="824.36" y="703.5" ></text>
</g>
<g >
<title>__GI___libc_free (66,747,588 samples, 0.02%)</title><rect x="503.8" y="693" width="0.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="506.80" y="703.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::deallocate (99,490,149 samples, 0.03%)</title><rect x="920.7" y="597" width="0.3" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="923.74" y="607.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, void  (36,095,138 samples, 0.01%)</title><rect x="1089.5" y="821" width="0.1" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="1092.49" y="831.5" ></text>
</g>
<g >
<title>std::mutex::unlock (158,986,715 samples, 0.04%)</title><rect x="492.7" y="757" width="0.5" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="495.75" y="767.5" ></text>
</g>
<g >
<title>__GI___libc_free (192,380,376 samples, 0.05%)</title><rect x="1016.6" y="677" width="0.6" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1019.64" y="687.5" ></text>
</g>
<g >
<title>check_cfs_rq_runtime (49,166,358 samples, 0.01%)</title><rect x="1093.1" y="453" width="0.2" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="1096.15" y="463.5" ></text>
</g>
<g >
<title>cpp_redis::builders::reply_builder::operator&lt;&lt; (3,421,930,314 samples, 0.89%)</title><rect x="1064.3" y="821" width="10.4" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="1067.30" y="831.5" ></text>
</g>
<g >
<title>EVP_MD_CTX_free (129,751,635 samples, 0.03%)</title><rect x="860.3" y="725" width="0.4" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="863.28" y="735.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_allocate (431,029,276 samples, 0.11%)</title><rect x="1098.7" y="757" width="1.4" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1101.74" y="767.5" ></text>
</g>
<g >
<title>EVP_CIPHER_CTX_free (167,832,587 samples, 0.04%)</title><rect x="839.2" y="741" width="0.5" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="842.19" y="751.5" ></text>
</g>
<g >
<title>do_user_addr_fault (90,081,862 samples, 0.02%)</title><rect x="139.0" y="725" width="0.2" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="141.97" y="735.5" ></text>
</g>
<g >
<title>pick_next_task (49,166,358 samples, 0.01%)</title><rect x="1093.1" y="485" width="0.2" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="1096.15" y="495.5" ></text>
</g>
<g >
<title>do_sys_poll (41,439,606 samples, 0.01%)</title><rect x="1111.3" y="757" width="0.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1114.26" y="767.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::~shared_ptr (36,783,226 samples, 0.01%)</title><rect x="474.1" y="789" width="0.1" height="15.0" fill="rgb(248,197,47)" rx="2" ry="2" />
<text  x="477.07" y="799.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::~unique_ptr (93,839,182 samples, 0.02%)</title><rect x="464.2" y="645" width="0.3" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="467.22" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, true&gt;::_M_next (161,423,097 samples, 0.04%)</title><rect x="1148.6" y="773" width="0.5" height="15.0" fill="rgb(234,133,31)" rx="2" ry="2" />
<text  x="1151.57" y="783.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__future_base::_Result_base::_Deleter&gt;::get_deleter (62,412,803 samples, 0.02%)</title><rect x="810.5" y="533" width="0.2" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="813.54" y="543.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1,217,303,327 samples, 0.31%)</title><rect x="1037.5" y="773" width="3.7" height="15.0" fill="rgb(206,9,2)" rx="2" ry="2" />
<text  x="1040.50" y="783.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;operation*&gt; (148,687,542 samples, 0.04%)</title><rect x="487.4" y="741" width="0.4" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="490.36" y="751.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;cpp_redis::reply*&gt; (352,928,655 samples, 0.09%)</title><rect x="926.5" y="741" width="1.1" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="929.52" y="751.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (208,022,128 samples, 0.05%)</title><rect x="459.8" y="645" width="0.6" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="462.80" y="655.5" ></text>
</g>
<g >
<title>do_syscall_64 (768,399,516 samples, 0.20%)</title><rect x="466.7" y="677" width="2.4" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="469.74" y="687.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (119,055,589 samples, 0.03%)</title><rect x="500.7" y="709" width="0.4" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="503.74" y="719.5" ></text>
</g>
<g >
<title>futex_wait_queue (64,290,560 samples, 0.02%)</title><rect x="1093.1" y="533" width="0.2" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="1096.10" y="543.5" ></text>
</g>
<g >
<title>__GI___pthread_mutex_unlock_usercnt (58,556,819 samples, 0.02%)</title><rect x="1103.9" y="677" width="0.2" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1106.92" y="687.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;char*&gt;::difference_type std::distance&lt;char*&gt; (308,586,539 samples, 0.08%)</title><rect x="1138.0" y="773" width="0.9" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1141.00" y="783.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (171,239,066 samples, 0.04%)</title><rect x="813.3" y="709" width="0.6" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="816.35" y="719.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (371,874,489 samples, 0.10%)</title><rect x="208.4" y="693" width="1.1" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="211.36" y="703.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (909,192,202 samples, 0.24%)</title><rect x="428.4" y="757" width="2.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="431.38" y="767.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (35,959,428 samples, 0.01%)</title><rect x="139.2" y="805" width="0.2" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="142.25" y="815.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (141,496,152 samples, 0.04%)</title><rect x="432.3" y="661" width="0.5" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="435.33" y="671.5" ></text>
</g>
<g >
<title>__GI___libc_free (227,888,250 samples, 0.06%)</title><rect x="1005.8" y="661" width="0.7" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1008.84" y="671.5" ></text>
</g>
<g >
<title>apache::thrift::concurrency::Monitor::Impl::wait (417,423,561 samples, 0.11%)</title><rect x="1087.6" y="869" width="1.3" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="1090.60" y="879.5" ></text>
</g>
<g >
<title>lll_mutex_unlock_optimized (297,925,433 samples, 0.08%)</title><rect x="459.5" y="677" width="0.9" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="462.54" y="687.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt;::tuple&lt;std::__future_base::_Result_base*&amp;, std::__future_base::_Result_base::_Deleter, true&gt; (75,847,031 samples, 0.02%)</title><rect x="471.2" y="517" width="0.2" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="474.17" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (56,479,011 samples, 0.01%)</title><rect x="439.4" y="741" width="0.2" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="442.41" y="751.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (371,874,489 samples, 0.10%)</title><rect x="208.4" y="661" width="1.1" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="211.36" y="671.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, int&amp;, true&gt; (523,429,044 samples, 0.14%)</title><rect x="578.8" y="773" width="1.6" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="581.76" y="783.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (43,088,256 samples, 0.01%)</title><rect x="1087.3" y="837" width="0.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1090.32" y="847.5" ></text>
</g>
<g >
<title>cpp_redis::builders::bulk_string_builder::bulk_string_builder (45,553,047 samples, 0.01%)</title><rect x="1069.9" y="741" width="0.1" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="1072.90" y="751.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (194,624,633 samples, 0.05%)</title><rect x="1119.4" y="805" width="0.6" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1122.36" y="815.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::push_back (489,541,001 samples, 0.13%)</title><rect x="833.3" y="773" width="1.5" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="836.27" y="783.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;std::__future_base::_Result&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;*, std::__future_base::_Result_base::_Deleter&gt; &gt;::type&amp; std::get&lt;0ul, std::__future_base::_Result&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;*, std::__future_base::_Result_base::_Deleter&gt; (39,115,969 samples, 0.01%)</title><rect x="1108.1" y="549" width="0.1" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="1111.05" y="559.5" ></text>
</g>
<g >
<title>__local_bh_enable_ip (34,007,746 samples, 0.01%)</title><rect x="204.0" y="293" width="0.1" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="207.04" y="303.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (38,504,981 samples, 0.01%)</title><rect x="858.3" y="757" width="0.1" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="861.31" y="767.5" ></text>
</g>
<g >
<title>std::mutex::unlock (35,992,591 samples, 0.01%)</title><rect x="425.3" y="757" width="0.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="428.33" y="767.5" ></text>
</g>
<g >
<title>std::mutex::unlock (100,707,272 samples, 0.03%)</title><rect x="805.1" y="757" width="0.4" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="808.15" y="767.5" ></text>
</g>
<g >
<title>___pthread_mutex_lock (63,736,509 samples, 0.02%)</title><rect x="1103.7" y="677" width="0.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1106.69" y="687.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (1,227,689,561 samples, 0.32%)</title><rect x="441.9" y="741" width="3.7" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="444.85" y="751.5" ></text>
</g>
<g >
<title>do_user_addr_fault (63,056,467 samples, 0.02%)</title><rect x="1159.1" y="661" width="0.2" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1162.11" y="671.5" ></text>
</g>
<g >
<title>std::_List_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;* std::__cxx11::list&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (301,750,625 samples, 0.08%)</title><rect x="432.0" y="741" width="0.9" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="435.02" y="751.5" ></text>
</g>
<g >
<title>__GI___libc_free (268,436,215 samples, 0.07%)</title><rect x="861.3" y="709" width="0.8" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="864.27" y="719.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (43,404,697 samples, 0.01%)</title><rect x="1009.2" y="661" width="0.1" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1012.17" y="671.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_ptr (34,005,746 samples, 0.01%)</title><rect x="1003.3" y="725" width="0.1" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="1006.32" y="735.5" ></text>
</g>
<g >
<title>EVP_MD_CTX_reset (63,814,694 samples, 0.02%)</title><rect x="1153.1" y="805" width="0.2" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1156.12" y="815.5" ></text>
</g>
<g >
<title>__gthread_mutex_lock (36,016,087 samples, 0.01%)</title><rect x="1118.8" y="821" width="0.1" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1121.81" y="831.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (190,405,031 samples, 0.05%)</title><rect x="821.2" y="725" width="0.6" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="824.19" y="735.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare (104,956,668 samples, 0.03%)</title><rect x="500.3" y="661" width="0.3" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="503.26" y="671.5" ></text>
</g>
<g >
<title>operator new (2,700,041,334 samples, 0.70%)</title><rect x="479.1" y="709" width="8.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="482.06" y="719.5" ></text>
</g>
<g >
<title>__GI___libc_free (192,112,434 samples, 0.05%)</title><rect x="1004.2" y="677" width="0.6" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1007.17" y="687.5" ></text>
</g>
<g >
<title>libcuckoo::cuckoohash_map&lt;long, std::shared_ptr&lt;thrift_response_client&gt;, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, std::shared_ptr&lt;thrift_response_client&gt; &gt; &gt;, 4ul&gt;::lock_two (43,817,430 samples, 0.01%)</title><rect x="1059.3" y="757" width="0.1" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="1062.29" y="767.5" ></text>
</g>
<g >
<title>event_process_active_single_queue (537,536,370 samples, 0.14%)</title><rect x="202.5" y="741" width="1.7" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="205.51" y="751.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;,  (81,306,485 samples, 0.02%)</title><rect x="817.7" y="485" width="0.3" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="820.72" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;cpp_redis::reply&gt;::new_allocator (47,416,169 samples, 0.01%)</title><rect x="59.3" y="933" width="0.2" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="62.31" y="943.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (36,105,652 samples, 0.01%)</title><rect x="427.5" y="725" width="0.1" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="430.52" y="735.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::~_Vector_base (799,397,902 samples, 0.21%)</title><rect x="1178.4" y="853" width="2.5" height="15.0" fill="rgb(252,217,51)" rx="2" ry="2" />
<text  x="1181.42" y="863.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::_S_do_relocate (119,268,610 samples, 0.03%)</title><rect x="448.4" y="725" width="0.4" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="451.41" y="735.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node_base*&gt; &gt;::deallocate (192,112,434 samples, 0.05%)</title><rect x="1004.2" y="709" width="0.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1007.17" y="719.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_S_do_relocate (168,413,275 samples, 0.04%)</title><rect x="218.5" y="741" width="0.5" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="221.47" y="751.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_S_do_relocate (283,658,468 samples, 0.07%)</title><rect x="138.5" y="869" width="0.9" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="141.53" y="879.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (177,302,160 samples, 0.05%)</title><rect x="504.8" y="709" width="0.6" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="507.82" y="719.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;*, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (95,656,980 samples, 0.02%)</title><rect x="1164.3" y="709" width="0.3" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1167.31" y="719.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (609,034,536 samples, 0.16%)</title><rect x="900.3" y="661" width="1.8" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="903.26" y="671.5" ></text>
</g>
<g >
<title>unlink_chunk (125,488,749 samples, 0.03%)</title><rect x="913.9" y="613" width="0.3" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="916.87" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin (81,747,255 samples, 0.02%)</title><rect x="435.9" y="725" width="0.3" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="438.94" y="735.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;*, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; (1,031,246,476 samples, 0.27%)</title><rect x="816.7" y="629" width="3.2" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="819.74" y="639.5" ></text>
</g>
<g >
<title>perf_iterate_ctx (35,718,104 samples, 0.01%)</title><rect x="1097.0" y="261" width="0.1" height="15.0" fill="rgb(205,4,0)" rx="2" ry="2" />
<text  x="1100.03" y="271.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (71,940,566 samples, 0.02%)</title><rect x="830.2" y="693" width="0.3" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="833.25" y="703.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::construct&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;&gt; (632,644,706 samples, 0.16%)</title><rect x="1106.3" y="661" width="1.9" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1109.26" y="671.5" ></text>
</g>
<g >
<title>std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::get_future (140,379,713 samples, 0.04%)</title><rect x="1095.0" y="757" width="0.5" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="1098.04" y="767.5" ></text>
</g>
<g >
<title>__libc_start_call_main (22,473,549,962 samples, 5.81%)</title><rect x="1113.8" y="917" width="68.6" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="1116.76" y="927.5" >__libc_..</text>
</g>
<g >
<title>apache::thrift::concurrency::Monitor::wait (417,423,561 samples, 0.11%)</title><rect x="1087.6" y="885" width="1.3" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1090.60" y="895.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_S_equals (465,178,094 samples, 0.12%)</title><rect x="983.8" y="709" width="1.4" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="986.76" y="719.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::operator[] (70,885,151 samples, 0.02%)</title><rect x="1019.7" y="789" width="0.2" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="1022.71" y="799.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::~pair (95,656,980 samples, 0.02%)</title><rect x="1164.3" y="645" width="0.3" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1167.31" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (85,760,264 samples, 0.02%)</title><rect x="1107.7" y="501" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1110.72" y="511.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned_erms (570,823,058 samples, 0.15%)</title><rect x="454.3" y="725" width="1.8" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="457.34" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;::_M_v (101,073,587 samples, 0.03%)</title><rect x="564.6" y="693" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="567.57" y="703.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;* std::__relocate_a_1&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;*, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;*, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; (95,153,509 samples, 0.02%)</title><rect x="1165.1" y="757" width="0.3" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1168.07" y="767.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_eq (66,663,050 samples, 0.02%)</title><rect x="564.9" y="693" width="0.2" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="567.90" y="703.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_rehash (168,992,636 samples, 0.04%)</title><rect x="1012.5" y="725" width="0.6" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1015.54" y="735.5" ></text>
</g>
<g >
<title>void std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_realloc_insert&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (511,077,939 samples, 0.13%)</title><rect x="959.7" y="741" width="1.6" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="962.71" y="751.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (49,733,296 samples, 0.01%)</title><rect x="1160.4" y="661" width="0.2" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1163.42" y="671.5" ></text>
</g>
<g >
<title>std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::_M_state (204,430,286 samples, 0.05%)</title><rect x="473.4" y="773" width="0.6" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="476.37" y="783.5" ></text>
</g>
<g >
<title>operator new (2,114,816,846 samples, 0.55%)</title><rect x="752.7" y="693" width="6.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="755.68" y="703.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (47,227,817 samples, 0.01%)</title><rect x="1103.7" y="613" width="0.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1106.74" y="623.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (36,894,717 samples, 0.01%)</title><rect x="502.3" y="773" width="0.1" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="505.27" y="783.5" ></text>
</g>
<g >
<title>_int_free (34,943,067 samples, 0.01%)</title><rect x="818.2" y="421" width="0.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="821.17" y="431.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (289,710,710 samples, 0.07%)</title><rect x="801.9" y="693" width="0.9" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="804.88" y="703.5" ></text>
</g>
<g >
<title>__libc_recv (67,468,248 samples, 0.02%)</title><rect x="202.5" y="709" width="0.2" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="205.53" y="719.5" ></text>
</g>
<g >
<title>cpp_redis::client::commit (244,864,896 samples, 0.06%)</title><rect x="205.0" y="789" width="0.7" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="207.97" y="799.5" ></text>
</g>
<g >
<title>__netif_receive_skb_one_core (136,814,316 samples, 0.04%)</title><rect x="1060.1" y="165" width="0.4" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1063.08" y="175.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (121,450,718 samples, 0.03%)</title><rect x="522.3" y="725" width="0.4" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="525.32" y="735.5" ></text>
</g>
<g >
<title>bool*&amp;&amp; std::forward&lt;bool*&gt; (37,543,821 samples, 0.01%)</title><rect x="1078.2" y="725" width="0.1" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="1081.17" y="735.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::_List_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::destroy&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (44,534,467 samples, 0.01%)</title><rect x="431.7" y="741" width="0.2" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="434.75" y="751.5" ></text>
</g>
<g >
<title>__gthread_mutex_lock (45,431,987 samples, 0.01%)</title><rect x="1117.0" y="821" width="0.1" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1120.01" y="831.5" ></text>
</g>
<g >
<title>arena_for_chunk (352,923,123 samples, 0.09%)</title><rect x="704.6" y="693" width="1.0" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="707.55" y="703.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (287,147,463 samples, 0.07%)</title><rect x="978.1" y="757" width="0.9" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="981.07" y="767.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;::tuple (34,606,405 samples, 0.01%)</title><rect x="1000.2" y="693" width="0.1" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="1003.24" y="703.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (584,530,320 samples, 0.15%)</title><rect x="962.8" y="773" width="1.8" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="965.80" y="783.5" ></text>
</g>
<g >
<title>do_softirq.part.0 (34,007,746 samples, 0.01%)</title><rect x="204.0" y="277" width="0.1" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="207.04" y="287.5" ></text>
</g>
<g >
<title>cpp_redis::reply* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;cpp_redis::reply const*, std::vector&lt;cpp_redis::reply, std::allocator&lt;cpp_redis::reply&gt; &gt; &gt;, cpp_redis::reply*&gt; (54,638,532 samples, 0.01%)</title><rect x="922.5" y="645" width="0.2" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="925.50" y="655.5" ></text>
</g>
<g >
<title>tcache_put (61,305,354 samples, 0.02%)</title><rect x="212.1" y="629" width="0.2" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="215.13" y="639.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (35,026,177 samples, 0.01%)</title><rect x="839.9" y="709" width="0.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="842.94" y="719.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::allocate (405,301,599 samples, 0.10%)</title><rect x="1025.0" y="725" width="1.2" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1027.98" y="735.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::deallocate (799,397,902 samples, 0.21%)</title><rect x="1178.4" y="805" width="2.5" height="15.0" fill="rgb(214,41,10)" rx="2" ry="2" />
<text  x="1181.42" y="815.5" ></text>
</g>
<g >
<title>operator new (363,137,460 samples, 0.09%)</title><rect x="928.1" y="709" width="1.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="931.10" y="719.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (421,853,810 samples, 0.11%)</title><rect x="579.1" y="757" width="1.3" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="582.07" y="767.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (187,872,195 samples, 0.05%)</title><rect x="210.4" y="757" width="0.6" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="213.43" y="767.5" ></text>
</g>
<g >
<title>dequeue_task (47,511,970 samples, 0.01%)</title><rect x="1086.7" y="661" width="0.1" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="1089.66" y="671.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::__future_base::_State_baseV2&gt; &gt;::construct&lt;std::__future_base::_State_baseV2&gt; (50,122,862 samples, 0.01%)</title><rect x="1107.2" y="517" width="0.2" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="1110.24" y="527.5" ></text>
</g>
<g >
<title>waffle_proxy::create_security_batch (22,441,292,501 samples, 5.80%)</title><rect x="421.5" y="805" width="68.5" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="424.50" y="815.5" >waffle_..</text>
</g>
<g >
<title>_int_free (101,745,497 samples, 0.03%)</title><rect x="926.2" y="677" width="0.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="929.20" y="687.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (43,579,596 samples, 0.01%)</title><rect x="1012.7" y="613" width="0.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1015.72" y="623.5" ></text>
</g>
<g >
<title>___pthread_mutex_unlock (39,761,606 samples, 0.01%)</title><rect x="829.2" y="725" width="0.1" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="832.18" y="735.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned_erms (1,126,419,340 samples, 0.29%)</title><rect x="609.7" y="677" width="3.4" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="612.67" y="687.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, false&gt; &gt; &gt;::destroy&lt;std::pair&lt;int const, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; (317,899,685 samples, 0.08%)</title><rect x="920.7" y="693" width="1.0" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="923.74" y="703.5" ></text>
</g>
<g >
<title>cpp_redis::reply* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;cpp_redis::reply const*, std::vector&lt;cpp_redis::reply, std::allocator&lt;cpp_redis::reply&gt; &gt; &gt;, cpp_redis::reply*&gt; (40,830,740 samples, 0.01%)</title><rect x="922.5" y="629" width="0.2" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="925.54" y="639.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (83,580,128 samples, 0.02%)</title><rect x="894.0" y="709" width="0.3" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="897.03" y="719.5" ></text>
</g>
<g >
<title>std::mutex::unlock (32,879,621 samples, 0.01%)</title><rect x="428.1" y="757" width="0.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="431.15" y="767.5" ></text>
</g>
<g >
<title>operator new (55,710,721 samples, 0.01%)</title><rect x="520.9" y="757" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="523.85" y="767.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (36,152,529 samples, 0.01%)</title><rect x="1092.6" y="613" width="0.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1095.58" y="623.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;char*&gt;::difference_type std::distance&lt;char*&gt; (1,411,069,327 samples, 0.36%)</title><rect x="689.0" y="693" width="4.3" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="692.03" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt;::_M_allocate_buckets (47,647,154 samples, 0.01%)</title><rect x="1012.7" y="677" width="0.2" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1015.71" y="687.5" ></text>
</g>
<g >
<title>malloc_consolidate (407,827,019 samples, 0.11%)</title><rect x="1098.8" y="661" width="1.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1101.81" y="671.5" ></text>
</g>
<g >
<title>__mem_cgroup_charge (49,726,926 samples, 0.01%)</title><rect x="1142.6" y="565" width="0.2" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="1145.64" y="575.5" ></text>
</g>
<g >
<title>heap_for_ptr (42,843,664 samples, 0.01%)</title><rect x="863.1" y="677" width="0.1" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="866.11" y="687.5" ></text>
</g>
<g >
<title>__gthread_mutex_unlock (58,366,606 samples, 0.02%)</title><rect x="439.0" y="741" width="0.2" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="442.03" y="751.5" ></text>
</g>
<g >
<title>tacopie::io_service::set_rd_callback (80,674,918 samples, 0.02%)</title><rect x="1080.0" y="789" width="0.3" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="1083.02" y="799.5" ></text>
</g>
<g >
<title>std::mutex::lock (36,016,087 samples, 0.01%)</title><rect x="1118.8" y="837" width="0.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1121.81" y="847.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, true&gt;* std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (213,910,957 samples, 0.06%)</title><rect x="1149.1" y="805" width="0.7" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1152.13" y="815.5" ></text>
</g>
<g >
<title>operation::~operation (57,047,432 samples, 0.01%)</title><rect x="452.8" y="789" width="0.2" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="455.78" y="799.5" ></text>
</g>
<g >
<title>event_add (50,908,151 samples, 0.01%)</title><rect x="202.7" y="661" width="0.2" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="205.74" y="671.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cpp_redis::reply, std::allocator&lt;cpp_redis::reply&gt; &gt;::_Vector_base (300,997,279 samples, 0.08%)</title><rect x="925.3" y="757" width="0.9" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="928.29" y="767.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::assign (46,370,903 samples, 0.01%)</title><rect x="93.7" y="933" width="0.1" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="96.67" y="943.5" ></text>
</g>
<g >
<title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;cpp_redis::reply&gt;, cpp_redis::reply&gt;::_S_select_on_copy (40,202,124 samples, 0.01%)</title><rect x="922.3" y="661" width="0.1" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="925.31" y="671.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (34,130,415 samples, 0.01%)</title><rect x="925.0" y="661" width="0.1" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="928.00" y="671.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (94,213,797 samples, 0.02%)</title><rect x="1175.5" y="805" width="0.2" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="1178.45" y="815.5" ></text>
</g>
<g >
<title>CRYPTO_zalloc (54,406,163 samples, 0.01%)</title><rect x="1153.4" y="805" width="0.2" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="1156.44" y="815.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::~unique_ptr (81,227,747 samples, 0.02%)</title><rect x="472.4" y="613" width="0.3" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="475.45" y="623.5" ></text>
</g>
<g >
<title>_int_free (105,074,009 samples, 0.03%)</title><rect x="917.3" y="661" width="0.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="920.32" y="671.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (117,076,141 samples, 0.03%)</title><rect x="138.9" y="773" width="0.3" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="141.89" y="783.5" ></text>
</g>
<g >
<title>apache::thrift::concurrency::ThreadManager::Impl::add (98,815,458 samples, 0.03%)</title><rect x="203.1" y="645" width="0.3" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="206.14" y="655.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;cpp_redis::client&amp;  (264,661,793 samples, 0.07%)</title><rect x="910.3" y="757" width="0.8" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="913.34" y="767.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cpp_redis::reply, std::allocator&lt;cpp_redis::reply&gt; &gt;::~_Vector_base (53,681,302 samples, 0.01%)</title><rect x="918.5" y="645" width="0.1" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="921.47" y="655.5" ></text>
</g>
<g >
<title>heap_max_size (42,279,734 samples, 0.01%)</title><rect x="1077.7" y="741" width="0.1" height="15.0" fill="rgb(244,179,43)" rx="2" ry="2" />
<text  x="1080.71" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (169,394,486 samples, 0.04%)</title><rect x="504.8" y="693" width="0.6" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="507.84" y="703.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;char*&gt;::difference_type std::distance&lt;char*&gt; (52,187,993 samples, 0.01%)</title><rect x="518.0" y="661" width="0.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="520.96" y="671.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;queue&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;,  (36,321,250 samples, 0.01%)</title><rect x="460.7" y="789" width="0.1" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="463.71" y="799.5" ></text>
</g>
<g >
<title>napi_consume_skb (38,320,702 samples, 0.01%)</title><rect x="1085.6" y="405" width="0.1" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1088.58" y="415.5" ></text>
</g>
<g >
<title>do_anonymous_page (36,139,354 samples, 0.01%)</title><rect x="1160.4" y="565" width="0.1" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1163.43" y="575.5" ></text>
</g>
<g >
<title>operator new (145,636,294 samples, 0.04%)</title><rect x="1173.5" y="773" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1176.46" y="783.5" ></text>
</g>
<g >
<title>encryption_engine::encrypt (1,405,465,460 samples, 0.36%)</title><rect x="848.6" y="757" width="4.3" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="851.61" y="767.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, false, true&gt;::operator (63,963,593 samples, 0.02%)</title><rect x="536.9" y="741" width="0.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="539.87" y="751.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::wait (56,618,046 samples, 0.01%)</title><rect x="953.3" y="741" width="0.1" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="956.27" y="751.5" ></text>
</g>
<g >
<title>cpp_redis::builders::reply_builder::build_reply (3,416,731,802 samples, 0.88%)</title><rect x="1064.3" y="805" width="10.4" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="1067.30" y="815.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;char*&gt;::difference_type std::distance&lt;char*&gt; (1,634,513,175 samples, 0.42%)</title><rect x="767.8" y="693" width="5.0" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="770.84" y="703.5" ></text>
</g>
<g >
<title>tacopie::tcp_socket::send (582,093,686 samples, 0.15%)</title><rect x="1084.5" y="837" width="1.8" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="1087.51" y="847.5" ></text>
</g>
<g >
<title>__random (77,240,433 samples, 0.02%)</title><rect x="1152.3" y="837" width="0.3" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="1155.33" y="847.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (260,636,642 samples, 0.07%)</title><rect x="709.3" y="725" width="0.8" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="712.34" y="735.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;int, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;::~unordered_map (252,879,747 samples, 0.07%)</title><rect x="214.2" y="789" width="0.8" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="217.22" y="799.5" ></text>
</g>
<g >
<title>gen_random[abi:cxx11] (72,181,411 samples, 0.02%)</title><rect x="1156.2" y="869" width="0.2" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1159.17" y="879.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;::_M_valptr (90,526,928 samples, 0.02%)</title><rect x="799.1" y="677" width="0.2" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="802.07" y="687.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (40,597,503 samples, 0.01%)</title><rect x="1164.6" y="805" width="0.2" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1167.64" y="815.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (84,766,128 samples, 0.02%)</title><rect x="797.4" y="677" width="0.2" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="800.38" y="687.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (6,123,324,168 samples, 1.58%)</title><rect x="1063.7" y="853" width="18.7" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1066.68" y="863.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__future_base::_Result_base::_Deleter&gt;::get_deleter (57,346,250 samples, 0.01%)</title><rect x="471.4" y="549" width="0.2" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="474.40" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (33,749,558 samples, 0.01%)</title><rect x="148.9" y="933" width="0.1" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="151.87" y="943.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (81,912,137 samples, 0.02%)</title><rect x="953.6" y="741" width="0.3" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="956.63" y="751.5" ></text>
</g>
<g >
<title>std::__future_base::_Result_base::_Deleter::operator (255,751,669 samples, 0.07%)</title><rect x="1056.6" y="629" width="0.7" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1059.57" y="639.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (46,267,426 samples, 0.01%)</title><rect x="202.8" y="549" width="0.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="205.75" y="559.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (788,116,534 samples, 0.20%)</title><rect x="466.7" y="693" width="2.4" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="469.71" y="703.5" ></text>
</g>
<g >
<title>operator new (48,083,837 samples, 0.01%)</title><rect x="790.6" y="645" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="793.58" y="655.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (107,357,476 samples, 0.03%)</title><rect x="536.4" y="693" width="0.4" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="539.44" y="703.5" ></text>
</g>
<g >
<title>_int_malloc (54,421,487 samples, 0.01%)</title><rect x="1153.8" y="757" width="0.2" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1156.80" y="767.5" ></text>
</g>
<g >
<title>unlink_chunk (130,594,081 samples, 0.03%)</title><rect x="931.8" y="709" width="0.4" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="934.84" y="719.5" ></text>
</g>
<g >
<title>SHA256_Final (38,395,918 samples, 0.01%)</title><rect x="1154.2" y="789" width="0.1" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1157.20" y="799.5" ></text>
</g>
<g >
<title>try_to_wake_up (37,909,472 samples, 0.01%)</title><rect x="1082.9" y="613" width="0.1" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1085.86" y="623.5" ></text>
</g>
<g >
<title>cpp_redis::client::mset (35,300,145 samples, 0.01%)</title><rect x="42.0" y="933" width="0.1" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="44.96" y="943.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;, std::_Identity&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt;, bool  (51,467,716 samples, 0.01%)</title><rect x="788.6" y="725" width="0.1" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="791.57" y="735.5" ></text>
</g>
<g >
<title>___pthread_mutex_lock (36,016,087 samples, 0.01%)</title><rect x="1118.8" y="805" width="0.1" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1121.81" y="815.5" ></text>
</g>
<g >
<title>Cache::getValueWithoutPositionChange (903,165,085 samples, 0.23%)</title><rect x="425.0" y="789" width="2.8" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="428.02" y="799.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::~_Vector_base (2,469,083,501 samples, 0.64%)</title><rect x="1030.0" y="773" width="7.5" height="15.0" fill="rgb(252,217,51)" rx="2" ry="2" />
<text  x="1032.96" y="783.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (534,743,605 samples, 0.14%)</title><rect x="824.9" y="645" width="1.6" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="827.86" y="655.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (44,542,621 samples, 0.01%)</title><rect x="1105.6" y="677" width="0.2" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1108.63" y="687.5" ></text>
</g>
<g >
<title>malloc_consolidate (64,702,261 samples, 0.02%)</title><rect x="1071.4" y="693" width="0.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1074.45" y="703.5" ></text>
</g>
<g >
<title>malloc_consolidate (101,745,497 samples, 0.03%)</title><rect x="926.2" y="661" width="0.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="929.20" y="671.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;*, std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (56,730,796 samples, 0.01%)</title><rect x="1057.8" y="757" width="0.2" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="1060.79" y="767.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (280,267,135 samples, 0.07%)</title><rect x="535.1" y="613" width="0.9" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="538.13" y="623.5" ></text>
</g>
<g >
<title>apache::thrift::protocol::TBinaryProtocolT&lt;apache::thrift::transport::TTransport, apache::thrift::protocol::TNetworkBigEndian&gt;::readFieldBegin (33,971,680 samples, 0.01%)</title><rect x="1097.7" y="757" width="0.1" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="1100.71" y="767.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::substr (83,117,653 samples, 0.02%)</title><rect x="847.6" y="757" width="0.3" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="850.61" y="767.5" ></text>
</g>
<g >
<title>operator new (112,801,794 samples, 0.03%)</title><rect x="1093.8" y="725" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1096.77" y="735.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (44,542,621 samples, 0.01%)</title><rect x="1105.6" y="693" width="0.2" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="1108.63" y="703.5" ></text>
</g>
<g >
<title>memcmp@plt (57,162,023 samples, 0.01%)</title><rect x="721.8" y="677" width="0.2" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="724.82" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (138,022,115 samples, 0.04%)</title><rect x="427.0" y="709" width="0.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="430.04" y="719.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (52,512,502 samples, 0.01%)</title><rect x="1057.5" y="789" width="0.1" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1060.48" y="799.5" ></text>
</g>
<g >
<title>arena_for_chunk (172,035,209 samples, 0.04%)</title><rect x="783.0" y="677" width="0.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="786.01" y="687.5" ></text>
</g>
<g >
<title>malloc_consolidate (98,661,490 samples, 0.03%)</title><rect x="1164.8" y="709" width="0.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1167.77" y="719.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::allocate (41,163,775 samples, 0.01%)</title><rect x="1092.6" y="645" width="0.1" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1095.57" y="655.5" ></text>
</g>
<g >
<title>Cache::evictLRElementFromCache[abi:cxx11] (6,747,957,779 samples, 1.75%)</title><rect x="501.2" y="789" width="20.6" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="504.24" y="799.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (81,378,256 samples, 0.02%)</title><rect x="1107.7" y="469" width="0.3" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1110.74" y="479.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (42,826,517 samples, 0.01%)</title><rect x="1084.0" y="853" width="0.1" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1086.99" y="863.5" ></text>
</g>
<g >
<title>main::{lambda (773,925,518 samples, 0.20%)</title><rect x="201.9" y="821" width="2.4" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="204.90" y="831.5" ></text>
</g>
<g >
<title>std::_List_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_valptr (53,320,774 samples, 0.01%)</title><rect x="502.6" y="741" width="0.1" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="505.57" y="751.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::pair (74,049,113 samples, 0.02%)</title><rect x="526.8" y="693" width="0.2" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="529.82" y="703.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_do_set (505,935,797 samples, 0.13%)</title><rect x="1078.3" y="693" width="1.5" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="1081.29" y="703.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (57,689,516 samples, 0.01%)</title><rect x="829.9" y="709" width="0.1" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="832.85" y="719.5" ></text>
</g>
<g >
<title>do_syscall_64 (52,451,026 samples, 0.01%)</title><rect x="953.3" y="645" width="0.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="956.27" y="655.5" ></text>
</g>
<g >
<title>__schedule (133,624,755 samples, 0.03%)</title><rect x="1054.2" y="581" width="0.4" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="1057.22" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_S_do_relocate (222,794,742 samples, 0.06%)</title><rect x="1058.4" y="741" width="0.7" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1061.44" y="751.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::__uniq_ptr_impl (40,389,659 samples, 0.01%)</title><rect x="1096.4" y="437" width="0.2" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1099.45" y="447.5" ></text>
</g>
<g >
<title>EVP_CIPHER_CTX_reset (118,393,809 samples, 0.03%)</title><rect x="849.0" y="725" width="0.4" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="852.04" y="735.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt; &gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt; (64,808,557 samples, 0.02%)</title><rect x="791.1" y="677" width="0.2" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="794.13" y="687.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (48,742,259 samples, 0.01%)</title><rect x="1111.3" y="805" width="0.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1114.26" y="815.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_capacity (39,852,990 samples, 0.01%)</title><rect x="1015.1" y="661" width="0.1" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="1018.07" y="671.5" ></text>
</g>
<g >
<title>_int_malloc (547,314,668 samples, 0.14%)</title><rect x="1047.7" y="741" width="1.7" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1050.70" y="751.5" ></text>
</g>
<g >
<title>exit_to_user_mode_loop (39,708,055 samples, 0.01%)</title><rect x="1086.9" y="725" width="0.2" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="1089.94" y="735.5" ></text>
</g>
<g >
<title>std::__atomic_futex_unsigned&lt;2147483648u&gt;::_M_load_and_test (44,934,140 samples, 0.01%)</title><rect x="918.9" y="725" width="0.1" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="921.90" y="735.5" ></text>
</g>
<g >
<title>cpp_redis::network::redis_connection::send (640,151,362 samples, 0.17%)</title><rect x="206.3" y="709" width="2.0" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="209.34" y="719.5" ></text>
</g>
<g >
<title>heap_max_size (84,089,302 samples, 0.02%)</title><rect x="783.3" y="645" width="0.2" height="15.0" fill="rgb(244,179,43)" rx="2" ry="2" />
<text  x="786.28" y="655.5" ></text>
</g>
<g >
<title>operator delete (37,233,791 samples, 0.01%)</title><rect x="1040.9" y="709" width="0.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1043.86" y="719.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;::tuple&lt;true, true&gt; (33,195,021 samples, 0.01%)</title><rect x="894.6" y="741" width="0.1" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="897.59" y="751.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;operation*&gt; (197,521,552 samples, 0.05%)</title><rect x="405.1" y="757" width="0.6" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="408.12" y="767.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::~lock_guard (36,887,298 samples, 0.01%)</title><rect x="452.1" y="773" width="0.1" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="455.11" y="783.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;void  (281,054,969,830 samples, 72.70%)</title><rect x="204.3" y="853" width="857.8" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="207.26" y="863.5" >std::__invoke_result&lt;void </text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::resize (438,705,609 samples, 0.11%)</title><rect x="1098.7" y="789" width="1.4" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="1101.74" y="799.5" ></text>
</g>
<g >
<title>ip_finish_output2 (200,404,724 samples, 0.05%)</title><rect x="1060.1" y="325" width="0.6" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1063.06" y="335.5" ></text>
</g>
<g >
<title>__gthread_mutex_unlock (74,977,004 samples, 0.02%)</title><rect x="805.2" y="741" width="0.3" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="808.23" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (37,127,723 samples, 0.01%)</title><rect x="425.6" y="725" width="0.1" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="428.58" y="735.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;char*&gt;::difference_type std::__distance&lt;char*&gt; (461,745,242 samples, 0.12%)</title><rect x="34.0" y="933" width="1.4" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="36.95" y="943.5" ></text>
</g>
<g >
<title>void std::shuffle&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::mersenne_twister_engine&lt;unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul&gt;&amp;&gt; (352,244,735 samples, 0.09%)</title><rect x="139.4" y="917" width="1.1" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="142.41" y="927.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_erase (289,337,945 samples, 0.07%)</title><rect x="1068.5" y="725" width="0.9" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1071.51" y="735.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (42,763,941 samples, 0.01%)</title><rect x="948.3" y="597" width="0.1" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="951.31" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (40,491,492 samples, 0.01%)</title><rect x="1163.9" y="821" width="0.1" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="1166.91" y="831.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter, true, true&gt;::__uniq_ptr_impl&lt;std::__future_base::_Result_base::_Deleter&gt; (111,898,253 samples, 0.03%)</title><rect x="471.1" y="549" width="0.3" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="474.06" y="559.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (296,809,693 samples, 0.08%)</title><rect x="907.9" y="581" width="0.9" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="910.85" y="591.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter, true, true&gt;::__uniq_ptr_impl&lt;std::__future_base::_Result_base::_Deleter&gt; (81,467,729 samples, 0.02%)</title><rect x="463.8" y="629" width="0.2" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="466.75" y="639.5" ></text>
</g>
<g >
<title>std::queue&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::deque&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::push (286,571,045 samples, 0.07%)</title><rect x="1102.7" y="741" width="0.9" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="1105.74" y="751.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (45,412,600 samples, 0.01%)</title><rect x="526.9" y="677" width="0.1" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="529.91" y="687.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (1,657,031,749 samples, 0.43%)</title><rect x="675.6" y="677" width="5.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="678.63" y="687.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (240,053,635 samples, 0.06%)</title><rect x="892.9" y="645" width="0.8" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="895.92" y="655.5" ></text>
</g>
<g >
<title>checked_request2size (35,322,611 samples, 0.01%)</title><rect x="613.6" y="645" width="0.1" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="616.56" y="655.5" ></text>
</g>
<g >
<title>void std::__future_base::_State_baseV2::_S_check&lt;std::__future_base::_State_baseV2&gt; (149,387,314 samples, 0.04%)</title><rect x="812.1" y="741" width="0.4" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="815.08" y="751.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::deallocate (239,335,656 samples, 0.06%)</title><rect x="957.6" y="581" width="0.8" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="960.63" y="591.5" ></text>
</g>
<g >
<title>tcp_send_ack (34,007,746 samples, 0.01%)</title><rect x="204.0" y="485" width="0.1" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="207.04" y="495.5" ></text>
</g>
<g >
<title>CRYPTO_zalloc (177,782,612 samples, 0.05%)</title><rect x="863.3" y="725" width="0.6" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="866.33" y="735.5" ></text>
</g>
<g >
<title>__ip_queue_xmit (200,404,724 samples, 0.05%)</title><rect x="1060.1" y="405" width="0.6" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1063.06" y="415.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (139,376,988 samples, 0.04%)</title><rect x="947.7" y="613" width="0.4" height="15.0" fill="rgb(214,41,9)" rx="2" ry="2" />
<text  x="950.68" y="623.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;::pair (3,650,308,690 samples, 0.94%)</title><rect x="603.7" y="709" width="11.1" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="606.68" y="719.5" ></text>
</g>
<g >
<title>std::vector&lt;cpp_redis::reply, std::allocator&lt;cpp_redis::reply&gt; &gt;::~vector (80,469,878 samples, 0.02%)</title><rect x="918.4" y="661" width="0.3" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="921.45" y="671.5" ></text>
</g>
<g >
<title>_int_malloc (332,327,448 samples, 0.09%)</title><rect x="923.9" y="629" width="1.1" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="926.95" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::_S_relocate (74,970,771 samples, 0.02%)</title><rect x="834.3" y="741" width="0.2" height="15.0" fill="rgb(252,217,51)" rx="2" ry="2" />
<text  x="837.30" y="751.5" ></text>
</g>
<g >
<title>std::once_flag::_Prepare_execution::_Prepare_execution&lt;std::call_once&lt;void  (1,182,102,884 samples, 0.31%)</title><rect x="469.1" y="693" width="3.6" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="472.14" y="703.5" ></text>
</g>
<g >
<title>std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::pair (135,096,279 samples, 0.03%)</title><rect x="1092.2" y="661" width="0.4" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="1095.15" y="671.5" ></text>
</g>
<g >
<title>sock_rfree (39,687,081 samples, 0.01%)</title><rect x="1083.2" y="661" width="0.2" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1086.25" y="671.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, main::{lambda (773,925,518 samples, 0.20%)</title><rect x="201.9" y="837" width="2.4" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="204.90" y="847.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (2,104,010,851 samples, 0.54%)</title><rect x="494.2" y="725" width="6.4" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="497.16" y="735.5" ></text>
</g>
<g >
<title>tacopie::io_service::set_wr_callback (38,888,645 samples, 0.01%)</title><rect x="935.3" y="693" width="0.1" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="938.28" y="703.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (89,351,279 samples, 0.02%)</title><rect x="440.2" y="725" width="0.2" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="443.17" y="735.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_break_promise (38,389,729 samples, 0.01%)</title><rect x="818.5" y="437" width="0.1" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="821.53" y="447.5" ></text>
</g>
<g >
<title>freqCmp (38,964,265 samples, 0.01%)</title><rect x="1141.5" y="805" width="0.1" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1144.45" y="815.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;std::__future_base::_State_baseV2&gt;::~shared_ptr (33,035,557 samples, 0.01%)</title><rect x="1100.8" y="741" width="0.1" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="1103.76" y="751.5" ></text>
</g>
<g >
<title>apache::thrift::transport::TSocket::hasPendingDataToRead (36,750,610 samples, 0.01%)</title><rect x="203.8" y="693" width="0.2" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="206.85" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_node (419,093,869 samples, 0.11%)</title><rect x="884.1" y="709" width="1.2" height="15.0" fill="rgb(252,217,52)" rx="2" ry="2" />
<text  x="887.05" y="719.5" ></text>
</g>
<g >
<title>redis::get_batch (10,468,709,756 samples, 2.71%)</title><rect x="902.5" y="789" width="32.0" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="905.53" y="799.5" >re..</text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (1,463,244,640 samples, 0.38%)</title><rect x="1020.4" y="757" width="4.5" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1023.43" y="767.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;char*&gt;::difference_type std::distance&lt;char*&gt; (51,873,856 samples, 0.01%)</title><rect x="1000.0" y="645" width="0.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1003.00" y="655.5" ></text>
</g>
<g >
<title>std::vector&lt;cpp_redis::reply, std::allocator&lt;cpp_redis::reply&gt; &gt;::~vector (116,292,841 samples, 0.03%)</title><rect x="927.2" y="677" width="0.4" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="930.24" y="687.5" ></text>
</g>
<g >
<title>tacopie::utils::thread_pool::add_task (49,863,924 samples, 0.01%)</title><rect x="1063.2" y="837" width="0.1" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="1066.18" y="847.5" ></text>
</g>
<g >
<title>apache::thrift::transport::TTransport::write (82,478,893 samples, 0.02%)</title><rect x="1061.6" y="629" width="0.2" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="1064.55" y="639.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;char*&gt;::iterator_category std::__iterator_category&lt;char*&gt; (199,396,173 samples, 0.05%)</title><rect x="95.8" y="933" width="0.6" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="98.82" y="943.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;::operator[] (1,672,245,459 samples, 0.43%)</title><rect x="532.0" y="773" width="5.1" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="535.01" y="783.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::_List_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::destroy&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (148,134,183 samples, 0.04%)</title><rect x="524.4" y="725" width="0.5" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="527.41" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_buckets (192,112,434 samples, 0.05%)</title><rect x="1004.2" y="725" width="0.6" height="15.0" fill="rgb(214,41,9)" rx="2" ry="2" />
<text  x="1007.17" y="735.5" ></text>
</g>
<g >
<title>operator new (66,211,557 samples, 0.02%)</title><rect x="516.2" y="693" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="519.22" y="703.5" ></text>
</g>
<g >
<title>dequeue_task (49,306,296 samples, 0.01%)</title><rect x="1062.6" y="709" width="0.2" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="1065.61" y="719.5" ></text>
</g>
<g >
<title>arena_for_chunk (42,843,664 samples, 0.01%)</title><rect x="863.1" y="693" width="0.1" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="866.11" y="703.5" ></text>
</g>
<g >
<title>__GI___libc_free (100,418,849 samples, 0.03%)</title><rect x="1069.5" y="741" width="0.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1072.48" y="751.5" ></text>
</g>
<g >
<title>main (22,473,549,962 samples, 5.81%)</title><rect x="1113.8" y="901" width="68.6" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="1116.76" y="911.5" >main</text>
</g>
<g >
<title>drain_stock (35,594,671 samples, 0.01%)</title><rect x="1083.3" y="581" width="0.1" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1086.26" y="591.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (74,623,135 samples, 0.02%)</title><rect x="832.7" y="645" width="0.2" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="835.69" y="655.5" ></text>
</g>
<g >
<title>do_syscall_64 (110,776,464 samples, 0.03%)</title><rect x="1082.7" y="773" width="0.3" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1085.68" y="783.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (82,948,276 samples, 0.02%)</title><rect x="212.9" y="773" width="0.3" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="215.91" y="783.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::length (66,262,860 samples, 0.02%)</title><rect x="1003.0" y="725" width="0.2" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="1005.99" y="735.5" ></text>
</g>
<g >
<title>void std::__relocate_object_a&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (34,400,412 samples, 0.01%)</title><rect x="111.5" y="933" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="114.50" y="943.5" ></text>
</g>
<g >
<title>dequeue_task_fair (47,415,701 samples, 0.01%)</title><rect x="1088.0" y="597" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1091.02" y="607.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (217,048,027 samples, 0.06%)</title><rect x="1165.7" y="869" width="0.6" height="15.0" fill="rgb(218,59,14)" rx="2" ry="2" />
<text  x="1168.66" y="879.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, false&gt; &gt; &gt;::_M_deallocate_node (317,899,685 samples, 0.08%)</title><rect x="920.7" y="709" width="1.0" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="923.74" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (67,657,967 samples, 0.02%)</title><rect x="1117.6" y="805" width="0.2" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="1120.59" y="815.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (722,499,815 samples, 0.19%)</title><rect x="422.6" y="741" width="2.2" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="425.57" y="751.5" ></text>
</g>
<g >
<title>encryption_engine::decrypt (1,488,215,385 samples, 0.38%)</title><rect x="838.6" y="757" width="4.6" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="841.62" y="767.5" ></text>
</g>
<g >
<title>std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::~promise (591,928,749 samples, 0.15%)</title><rect x="462.7" y="661" width="1.8" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="465.70" y="671.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::uninitialized_copy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (541,246,322 samples, 0.14%)</title><rect x="516.5" y="725" width="1.6" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="519.50" y="735.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_assign (137,421,910 samples, 0.04%)</title><rect x="1093.7" y="741" width="0.4" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="1096.72" y="751.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt;::_Tuple_impl&lt;std::__future_base::_Result_base*&amp;, std::__future_base::_Result_base::_Deleter, void&gt; (40,650,464 samples, 0.01%)</title><rect x="463.9" y="581" width="0.1" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="466.88" y="591.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::find (100,241,107 samples, 0.03%)</title><rect x="452.3" y="773" width="0.3" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="455.27" y="783.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;::type const&amp; std::get&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; (36,156,600 samples, 0.01%)</title><rect x="1118.0" y="757" width="0.1" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="1120.99" y="767.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (544,482,724 samples, 0.14%)</title><rect x="528.5" y="741" width="1.7" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="531.50" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_node_allocator (47,288,965 samples, 0.01%)</title><rect x="992.1" y="725" width="0.1" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="995.06" y="735.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, 0ul&gt; (327,068,197 samples, 0.08%)</title><rect x="444.5" y="661" width="1.0" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="447.48" y="671.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::construct&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; (179,041,128 samples, 0.05%)</title><rect x="1102.9" y="677" width="0.5" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="1105.87" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;int, std::pair&lt;int const, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (135,101,127 samples, 0.03%)</title><rect x="920.1" y="709" width="0.4" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="923.10" y="719.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (48,084,647 samples, 0.01%)</title><rect x="1104.4" y="629" width="0.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1107.41" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt;::_M_ptr (287,978,555 samples, 0.07%)</title><rect x="726.0" y="693" width="0.9" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="729.04" y="703.5" ></text>
</g>
<g >
<title>lll_mutex_lock_optimized (135,464,623 samples, 0.04%)</title><rect x="975.3" y="725" width="0.4" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="978.26" y="735.5" ></text>
</g>
<g >
<title>void std::vector&lt;operation, std::allocator&lt;operation&gt; &gt;::_M_realloc_insert&lt;operation const&amp;&gt; (3,666,684,697 samples, 0.95%)</title><rect x="476.7" y="773" width="11.2" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="479.67" y="783.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (510,872,793 samples, 0.13%)</title><rect x="907.4" y="661" width="1.5" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="910.36" y="671.5" ></text>
</g>
<g >
<title>sock_recvmsg (56,254,800 samples, 0.01%)</title><rect x="202.6" y="613" width="0.1" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="205.56" y="623.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::~lock_guard (40,030,983 samples, 0.01%)</title><rect x="422.2" y="773" width="0.1" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="425.16" y="783.5" ></text>
</g>
<g >
<title>ip_output (200,404,724 samples, 0.05%)</title><rect x="1060.1" y="373" width="0.6" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1063.06" y="383.5" ></text>
</g>
<g >
<title>std::__basic_future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::_Reset::~_Reset (761,344,702 samples, 0.20%)</title><rect x="1055.2" y="789" width="2.3" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="1058.16" y="799.5" ></text>
</g>
<g >
<title>__schedule (108,293,963 samples, 0.03%)</title><rect x="1062.6" y="725" width="0.3" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="1065.58" y="735.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::unique_ptr&lt;std::__future_base::_Result&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__future_base::_Result_base::_Deleter, void&gt; (181,612,317 samples, 0.05%)</title><rect x="463.7" y="645" width="0.5" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="466.67" y="655.5" ></text>
</g>
<g >
<title>bool std::operator&lt; &lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (66,617,069 samples, 0.02%)</title><rect x="67.3" y="933" width="0.2" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="70.33" y="943.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::swap (223,931,456 samples, 0.06%)</title><rect x="471.8" y="613" width="0.6" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="474.76" y="623.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt;* std::_Rb_tree&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;, std::_Identity&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt;, bool  (331,954,000 samples, 0.09%)</title><rect x="790.3" y="709" width="1.0" height="15.0" fill="rgb(230,117,27)" rx="2" ry="2" />
<text  x="793.32" y="719.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (82,091,495 samples, 0.02%)</title><rect x="902.1" y="581" width="0.3" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="905.13" y="591.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_allocate (151,200,242 samples, 0.04%)</title><rect x="218.0" y="757" width="0.5" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="221.01" y="767.5" ></text>
</g>
<g >
<title>operator new (49,532,520 samples, 0.01%)</title><rect x="207.8" y="645" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="210.81" y="655.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (167,061,135 samples, 0.04%)</title><rect x="439.6" y="725" width="0.5" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="442.60" y="735.5" ></text>
</g>
<g >
<title>std::mutex::lock (44,823,967 samples, 0.01%)</title><rect x="433.1" y="757" width="0.2" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="436.14" y="767.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_put_node (54,669,502 samples, 0.01%)</title><rect x="524.1" y="741" width="0.2" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="527.15" y="751.5" ></text>
</g>
<g >
<title>thrift_server::create (40,693,115 samples, 0.01%)</title><rect x="1116.5" y="885" width="0.2" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="1119.53" y="895.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (105,930,416 samples, 0.03%)</title><rect x="500.8" y="693" width="0.3" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="503.78" y="703.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;cpp_redis::client&amp;  (163,460,393 samples, 0.04%)</title><rect x="211.0" y="773" width="0.5" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="214.00" y="783.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (45,170,247 samples, 0.01%)</title><rect x="530.5" y="693" width="0.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="533.49" y="703.5" ></text>
</g>
<g >
<title>__GI___libc_free (83,026,831 samples, 0.02%)</title><rect x="19.9" y="933" width="0.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="22.88" y="943.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (183,764,561 samples, 0.05%)</title><rect x="213.5" y="757" width="0.5" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="216.48" y="767.5" ></text>
</g>
<g >
<title>wake_up_q (73,026,765 samples, 0.02%)</title><rect x="465.2" y="661" width="0.2" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="468.23" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (39,696,801 samples, 0.01%)</title><rect x="882.0" y="741" width="0.1" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="884.97" y="751.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (2,491,410,872 samples, 0.64%)</title><rect x="493.6" y="757" width="7.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="496.61" y="767.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (254,824,674 samples, 0.07%)</title><rect x="958.4" y="581" width="0.8" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="961.41" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_node (438,819,517 samples, 0.11%)</title><rect x="505.4" y="709" width="1.4" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="508.45" y="719.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (151,323,165 samples, 0.04%)</title><rect x="821.3" y="709" width="0.5" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="824.31" y="719.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt;::_M_valptr (39,466,307 samples, 0.01%)</title><rect x="791.0" y="677" width="0.1" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="793.99" y="687.5" ></text>
</g>
<g >
<title>thrift_response_client_map::async_respond_client (946,306,448 samples, 0.24%)</title><rect x="1059.2" y="805" width="2.9" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="1062.23" y="815.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt; &gt; &gt;::allocate (87,182,852 samples, 0.02%)</title><rect x="891.7" y="709" width="0.3" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="894.74" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (972,134,477 samples, 0.25%)</title><rect x="1147.0" y="837" width="3.0" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1150.03" y="847.5" ></text>
</g>
<g >
<title>std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;  (567,540,778 samples, 0.15%)</title><rect x="809.2" y="597" width="1.7" height="15.0" fill="rgb(241,170,40)" rx="2" ry="2" />
<text  x="812.16" y="607.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (2,241,375,505 samples, 0.58%)</title><rect x="194.2" y="933" width="6.9" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="197.22" y="943.5" ></text>
</g>
<g >
<title>void std::__relocate_object_a&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (261,174,288 samples, 0.07%)</title><rect x="138.6" y="821" width="0.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="141.56" y="831.5" ></text>
</g>
<g >
<title>_int_malloc (208,612,790 samples, 0.05%)</title><rect x="909.6" y="661" width="0.6" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="912.59" y="671.5" ></text>
</g>
<g >
<title>schedule (64,290,560 samples, 0.02%)</title><rect x="1093.1" y="517" width="0.2" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1096.10" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_allocate_buckets (41,896,807 samples, 0.01%)</title><rect x="988.9" y="709" width="0.1" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="991.85" y="719.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_allocate (405,301,599 samples, 0.10%)</title><rect x="1025.0" y="757" width="1.2" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1027.98" y="767.5" ></text>
</g>
<g >
<title>neigh_hh_output (200,404,724 samples, 0.05%)</title><rect x="1060.1" y="309" width="0.6" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="1063.06" y="319.5" ></text>
</g>
<g >
<title>_int_free (71,278,199 samples, 0.02%)</title><rect x="1057.0" y="565" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1059.95" y="575.5" ></text>
</g>
<g >
<title>[unknown] (28,773,737,720 samples, 7.44%)</title><rect x="113.5" y="949" width="87.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="116.46" y="959.5" >[unknown]</text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (99,843,256 samples, 0.03%)</title><rect x="522.4" y="709" width="0.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="525.39" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_node_ptr (262,530,312 samples, 0.07%)</title><rect x="814.1" y="693" width="0.8" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="817.12" y="703.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (198,393,857 samples, 0.05%)</title><rect x="208.7" y="597" width="0.6" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="211.72" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (63,429,492 samples, 0.02%)</title><rect x="532.3" y="741" width="0.2" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="535.31" y="751.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (325,105,443 samples, 0.08%)</title><rect x="219.6" y="789" width="1.0" height="15.0" fill="rgb(206,9,2)" rx="2" ry="2" />
<text  x="222.57" y="799.5" ></text>
</g>
<g >
<title>memcpy@plt (51,846,587 samples, 0.01%)</title><rect x="1046.4" y="773" width="0.2" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1049.42" y="783.5" ></text>
</g>
<g >
<title>_int_malloc (153,920,777 samples, 0.04%)</title><rect x="944.4" y="565" width="0.5" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="947.44" y="575.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;*&gt; (95,656,980 samples, 0.02%)</title><rect x="1164.3" y="677" width="0.3" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="1167.31" y="687.5" ></text>
</g>
<g >
<title>decltype  (36,156,600 samples, 0.01%)</title><rect x="1118.0" y="773" width="0.1" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1120.99" y="783.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::find (406,704,607 samples, 0.11%)</title><rect x="439.3" y="773" width="1.2" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="442.29" y="783.5" ></text>
</g>
<g >
<title>__schedule (75,824,688 samples, 0.02%)</title><rect x="458.9" y="533" width="0.3" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="461.94" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_S_relocate (156,132,048 samples, 0.04%)</title><rect x="1161.1" y="789" width="0.5" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1164.14" y="799.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;,  (696,588,899 samples, 0.18%)</title><rect x="1106.1" y="677" width="2.1" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1109.06" y="687.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt; &gt;::allocate (78,944,916 samples, 0.02%)</title><rect x="891.8" y="693" width="0.2" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="894.77" y="703.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (43,908,095 samples, 0.01%)</title><rect x="790.6" y="629" width="0.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="793.58" y="639.5" ></text>
</g>
<g >
<title>apache::thrift::transport::TSocket::read (63,046,455 samples, 0.02%)</title><rect x="204.0" y="693" width="0.2" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="206.96" y="703.5" ></text>
</g>
<g >
<title>__futex_abstimed_wait_common (368,397,105 samples, 0.10%)</title><rect x="1087.7" y="773" width="1.2" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="1090.73" y="783.5" ></text>
</g>
<g >
<title>_int_malloc (45,170,758 samples, 0.01%)</title><rect x="1160.2" y="645" width="0.2" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1163.22" y="655.5" ></text>
</g>
<g >
<title>exc_page_fault (33,854,263 samples, 0.01%)</title><rect x="1116.3" y="693" width="0.1" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1119.32" y="703.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::clear (609,088,378 samples, 0.16%)</title><rect x="1015.4" y="757" width="1.9" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1018.44" y="767.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (89,949,497 samples, 0.02%)</title><rect x="1114.7" y="853" width="0.2" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="1117.65" y="863.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;, std::_Identity&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt;, bool  (42,261,003,232 samples, 10.93%)</title><rect x="581.1" y="741" width="129.0" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="584.15" y="751.5" >std::_Rb_tree&lt;st..</text>
</g>
<g >
<title>do_pselect.constprop.0 (261,200,729 samples, 0.07%)</title><rect x="1062.2" y="821" width="0.8" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="1065.17" y="831.5" ></text>
</g>
<g >
<title>std::vector&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::push_back (351,056,667 samples, 0.09%)</title><rect x="1101.0" y="773" width="1.0" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1103.95" y="783.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (35,771,255 samples, 0.01%)</title><rect x="907.2" y="661" width="0.1" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="910.20" y="671.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;&amp;&amp; std::forward&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (42,276,041 samples, 0.01%)</title><rect x="105.0" y="933" width="0.1" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="107.97" y="943.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;,  (91,231,110 samples, 0.02%)</title><rect x="818.0" y="469" width="0.3" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="821.04" y="479.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (41,486,327 samples, 0.01%)</title><rect x="531.3" y="677" width="0.1" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="534.28" y="687.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter, true, true&gt;::__uniq_ptr_impl&lt;std::__future_base::_Result_base::_Deleter&gt; (85,890,886 samples, 0.02%)</title><rect x="819.1" y="421" width="0.3" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="822.13" y="431.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, void  (832,326,221 samples, 0.22%)</title><rect x="809.0" y="629" width="2.6" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="812.05" y="639.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;cpp_redis::reply*, cpp_redis::reply&gt; (322,501,085 samples, 0.08%)</title><rect x="917.7" y="741" width="1.0" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="920.71" y="751.5" ></text>
</g>
<g >
<title>__x64_sys_futex (122,767,422 samples, 0.03%)</title><rect x="458.9" y="613" width="0.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="461.87" y="623.5" ></text>
</g>
<g >
<title>do_futex (48,270,130 samples, 0.01%)</title><rect x="953.3" y="613" width="0.1" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="956.27" y="623.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::__future_base::_State_baseV2,  (183,705,723 samples, 0.05%)</title><rect x="473.4" y="741" width="0.6" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="476.43" y="751.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (557,965,703 samples, 0.14%)</title><rect x="1055.7" y="709" width="1.7" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="1058.71" y="719.5" ></text>
</g>
<g >
<title>malloc_consolidate (76,311,019 samples, 0.02%)</title><rect x="218.2" y="661" width="0.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="221.23" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_S_do_relocate (186,064,483 samples, 0.05%)</title><rect x="1101.5" y="709" width="0.5" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1104.45" y="719.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt; &gt;::operator[] (976,624,376 samples, 0.25%)</title><rect x="1147.0" y="853" width="3.0" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="1150.02" y="863.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::construct&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;&gt; (2,142,752,043 samples, 0.55%)</title><rect x="895.6" y="741" width="6.5" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="898.59" y="751.5" ></text>
</g>
<g >
<title>encryption_engine::prf_encrypt (7,321,939,088 samples, 1.89%)</title><rect x="859.3" y="773" width="22.3" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="862.27" y="783.5" >e..</text>
</g>
<g >
<title>cpp_redis::client::try_commit (244,864,896 samples, 0.06%)</title><rect x="205.0" y="773" width="0.7" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="207.97" y="783.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (95,656,980 samples, 0.02%)</title><rect x="1164.3" y="661" width="0.3" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="1167.31" y="671.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (67,806,510 samples, 0.02%)</title><rect x="1118.5" y="805" width="0.2" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1121.46" y="815.5" ></text>
</g>
<g >
<title>___pthread_mutex_lock (49,700,085 samples, 0.01%)</title><rect x="438.8" y="725" width="0.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="441.81" y="735.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (265,908,177 samples, 0.07%)</title><rect x="1115.2" y="853" width="0.8" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="1118.16" y="863.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (39,577,918 samples, 0.01%)</title><rect x="615.6" y="693" width="0.1" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="618.57" y="703.5" ></text>
</g>
<g >
<title>[[stack]] (2,059,322,953 samples, 0.53%)</title><rect x="39.2" y="949" width="6.3" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="42.19" y="959.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (620,669,177 samples, 0.16%)</title><rect x="831.1" y="741" width="1.9" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="834.14" y="751.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.30] (290,154,911,415 samples, 75.05%)</title><rect x="201.9" y="917" width="885.6" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="204.90" y="927.5" >[libstdc++.so.6.0.30]</text>
</g>
<g >
<title>std::_Function_handler&lt;void  (651,242,671 samples, 0.17%)</title><rect x="1078.0" y="805" width="2.0" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1081.01" y="815.5" ></text>
</g>
<g >
<title>tcache_get (41,820,771 samples, 0.01%)</title><rect x="849.7" y="693" width="0.2" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="852.74" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_S_equals (172,524,390 samples, 0.04%)</title><rect x="1146.3" y="773" width="0.5" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="1149.29" y="783.5" ></text>
</g>
<g >
<title>_int_malloc (92,098,729 samples, 0.02%)</title><rect x="853.4" y="709" width="0.3" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="856.40" y="719.5" ></text>
</g>
<g >
<title>cpp_redis::builders::array_builder::build_row (2,661,718,038 samples, 0.69%)</title><rect x="1065.9" y="773" width="8.1" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1068.90" y="783.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_S_do_relocate (82,560,140 samples, 0.02%)</title><rect x="1178.1" y="821" width="0.3" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1181.10" y="831.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt;::_M_ptr (449,339,378 samples, 0.12%)</title><rect x="598.5" y="693" width="1.3" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="601.45" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (374,362,289 samples, 0.10%)</title><rect x="576.3" y="741" width="1.1" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="579.30" y="751.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned_erms (67,753,755 samples, 0.02%)</title><rect x="1181.9" y="853" width="0.2" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1184.86" y="863.5" ></text>
</g>
<g >
<title>_int_free (39,685,986 samples, 0.01%)</title><rect x="849.3" y="693" width="0.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="852.27" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (133,970,303 samples, 0.03%)</title><rect x="978.5" y="725" width="0.4" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="981.53" y="735.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (94,213,797 samples, 0.02%)</title><rect x="1175.5" y="821" width="0.2" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="1178.45" y="831.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::~vector (1,382,094,092 samples, 0.36%)</title><rect x="815.7" y="645" width="4.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="818.67" y="655.5" ></text>
</g>
<g >
<title>__GI___pthread_mutex_unlock_usercnt (36,368,212 samples, 0.01%)</title><rect x="1117.3" y="789" width="0.1" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1120.27" y="799.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, 0ul&gt; (144,388,854 samples, 0.04%)</title><rect x="437.5" y="661" width="0.5" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="440.54" y="671.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_deallocate_node (106,907,245 samples, 0.03%)</title><rect x="457.3" y="725" width="0.4" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="460.34" y="735.5" ></text>
</g>
<g >
<title>__handle_mm_fault (77,893,829 samples, 0.02%)</title><rect x="1155.8" y="709" width="0.2" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1158.77" y="719.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cpp_redis::reply, std::allocator&lt;cpp_redis::reply&gt; &gt;::_M_create_storage (69,055,593 samples, 0.02%)</title><rect x="1078.6" y="597" width="0.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1081.62" y="607.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (63,488,903 samples, 0.02%)</title><rect x="1166.1" y="853" width="0.2" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1169.13" y="863.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (156,590,395 samples, 0.04%)</title><rect x="1056.0" y="661" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1059.01" y="671.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (392,604,108 samples, 0.10%)</title><rect x="892.5" y="677" width="1.2" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="895.48" y="687.5" ></text>
</g>
<g >
<title>handle_mm_fault (77,801,589 samples, 0.02%)</title><rect x="1142.6" y="629" width="0.3" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1145.64" y="639.5" ></text>
</g>
<g >
<title>apache::thrift::transport::TFramedTransport::flush (413,020,716 samples, 0.11%)</title><rect x="1059.8" y="709" width="1.2" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="1062.78" y="719.5" ></text>
</g>
<g >
<title>page_counter_try_charge (52,567,224 samples, 0.01%)</title><rect x="1086.1" y="597" width="0.1" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1089.08" y="607.5" ></text>
</g>
<g >
<title>__GI___libc_free (120,954,362 samples, 0.03%)</title><rect x="1056.8" y="581" width="0.4" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1059.84" y="591.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (122,075,141 samples, 0.03%)</title><rect x="858.7" y="757" width="0.3" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="861.66" y="767.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::swap (190,440,045 samples, 0.05%)</title><rect x="810.9" y="581" width="0.6" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="813.89" y="591.5" ></text>
</g>
<g >
<title>__x64_sys_sendto (258,502,300 samples, 0.07%)</title><rect x="1111.4" y="757" width="0.8" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="1114.41" y="767.5" ></text>
</g>
<g >
<title>__GI___libc_free (94,351,392 samples, 0.02%)</title><rect x="206.9" y="677" width="0.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="209.92" y="687.5" ></text>
</g>
<g >
<title>__tcp_push_pending_frames (212,328,039 samples, 0.05%)</title><rect x="1085.2" y="661" width="0.7" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1088.22" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt;::_M_cget (42,289,920 samples, 0.01%)</title><rect x="89.1" y="933" width="0.1" height="15.0" fill="rgb(241,165,39)" rx="2" ry="2" />
<text  x="92.09" y="943.5" ></text>
</g>
<g >
<title>_int_malloc (71,748,930 samples, 0.02%)</title><rect x="126.3" y="933" width="0.2" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="129.29" y="943.5" ></text>
</g>
<g >
<title>__futex_abstimed_wait_common64 (368,397,105 samples, 0.10%)</title><rect x="1087.7" y="757" width="1.2" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="1090.73" y="767.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (177,837,546 samples, 0.05%)</title><rect x="214.4" y="597" width="0.6" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="217.45" y="607.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned_erms (314,597,426 samples, 0.08%)</title><rect x="215.3" y="773" width="0.9" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="218.27" y="783.5" ></text>
</g>
<g >
<title>skb_copy_datagram_iter (37,973,678 samples, 0.01%)</title><rect x="1083.1" y="661" width="0.1" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="1086.13" y="671.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt; &gt;::destroy&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt; (160,698,724 samples, 0.04%)</title><rect x="596.5" y="661" width="0.5" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="599.53" y="671.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy_chars (81,214,659 samples, 0.02%)</title><rect x="1137.6" y="773" width="0.3" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="1140.63" y="783.5" ></text>
</g>
<g >
<title>_int_free (49,310,838 samples, 0.01%)</title><rect x="503.8" y="677" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="506.83" y="687.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Vector_impl_data::_M_copy_data (169,518,257 samples, 0.04%)</title><rect x="1018.1" y="741" width="0.5" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="1021.08" y="751.5" ></text>
</g>
<g >
<title>do_futex (672,066,036 samples, 0.17%)</title><rect x="466.8" y="645" width="2.0" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="469.77" y="655.5" ></text>
</g>
<g >
<title>void std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_realloc_insert&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (315,535,078 samples, 0.08%)</title><rect x="1058.2" y="773" width="1.0" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1061.21" y="783.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (418,164,006 samples, 0.11%)</title><rect x="1081.0" y="805" width="1.3" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1084.04" y="815.5" ></text>
</g>
<g >
<title>operator new (53,129,658 samples, 0.01%)</title><rect x="1014.4" y="677" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1017.42" y="687.5" ></text>
</g>
<g >
<title>do_syscall_64 (35,718,104 samples, 0.01%)</title><rect x="1097.0" y="373" width="0.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1100.03" y="383.5" ></text>
</g>
<g >
<title>__GI___pthread_mutex_unlock_usercnt (309,763,617 samples, 0.08%)</title><rect x="459.5" y="693" width="0.9" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="462.50" y="703.5" ></text>
</g>
<g >
<title>std::future&lt;cpp_redis::reply&gt;::get (83,592,484 samples, 0.02%)</title><rect x="953.2" y="773" width="0.3" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="956.24" y="783.5" ></text>
</g>
<g >
<title>_int_malloc (216,489,855 samples, 0.06%)</title><rect x="903.4" y="693" width="0.7" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="906.40" y="703.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::lock_guard (52,919,507 samples, 0.01%)</title><rect x="829.0" y="773" width="0.2" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="832.00" y="783.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt;::_M_addr (87,511,524 samples, 0.02%)</title><rect x="726.7" y="677" width="0.2" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="729.65" y="687.5" ></text>
</g>
<g >
<title>__sys_recvfrom (63,046,455 samples, 0.02%)</title><rect x="204.0" y="597" width="0.2" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="206.96" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (2,306,903,271 samples, 0.60%)</title><rect x="979.1" y="757" width="7.0" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="982.07" y="767.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned_erms (1,091,997,831 samples, 0.28%)</title><rect x="748.0" y="693" width="3.4" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="751.04" y="703.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (41,664,605 samples, 0.01%)</title><rect x="533.4" y="693" width="0.1" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="536.38" y="703.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;::~pair (1,550,041,278 samples, 0.40%)</title><rect x="815.2" y="661" width="4.7" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="818.16" y="671.5" ></text>
</g>
<g >
<title>_int_free (62,800,337 samples, 0.02%)</title><rect x="1175.5" y="757" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1178.54" y="767.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cpp_redis::reply, std::allocator&lt;cpp_redis::reply&gt; &gt;::~_Vector_base (101,745,497 samples, 0.03%)</title><rect x="926.2" y="757" width="0.3" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="929.20" y="767.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (108,823,145 samples, 0.03%)</title><rect x="1177.6" y="789" width="0.3" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1180.59" y="799.5" ></text>
</g>
<g >
<title>do_futex (132,475,330 samples, 0.03%)</title><rect x="465.0" y="693" width="0.4" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="468.05" y="703.5" ></text>
</g>
<g >
<title>_int_malloc (231,298,094 samples, 0.06%)</title><rect x="865.0" y="677" width="0.7" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="868.02" y="687.5" ></text>
</g>
<g >
<title>ThreadSafeUnorderedMap&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::insertIfNotPresent (1,904,696,316 samples, 0.49%)</title><rect x="829.0" y="789" width="5.8" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="831.96" y="799.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash (33,181,270 samples, 0.01%)</title><rect x="86.2" y="933" width="0.1" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="89.24" y="943.5" ></text>
</g>
<g >
<title>__GI___libc_free (72,032,981 samples, 0.02%)</title><rect x="404.9" y="725" width="0.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="407.88" y="735.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;* std::__relocate_a&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;*, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;*, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; (61,686,527 samples, 0.02%)</title><rect x="834.3" y="709" width="0.2" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="837.34" y="719.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;operation, std::allocator&lt;operation&gt; &gt;::_M_deallocate (72,032,981 samples, 0.02%)</title><rect x="404.9" y="773" width="0.2" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="407.88" y="783.5" ></text>
</g>
<g >
<title>_int_malloc (53,030,902 samples, 0.01%)</title><rect x="1115.5" y="773" width="0.2" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1118.52" y="783.5" ></text>
</g>
<g >
<title>do_user_addr_fault (45,239,788 samples, 0.01%)</title><rect x="1160.4" y="629" width="0.2" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1163.42" y="639.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;1ul, std::tuple&lt;std::__future_base::_Result&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;*, std::__future_base::_Result_base::_Deleter&gt; &gt;::type&amp; std::get&lt;1ul, std::__future_base::_Result&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;*, std::__future_base::_Result_base::_Deleter&gt; (40,558,753 samples, 0.01%)</title><rect x="471.5" y="517" width="0.1" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="474.45" y="527.5" ></text>
</g>
<g >
<title>std::mutex::unlock (47,202,380 samples, 0.01%)</title><rect x="96.7" y="933" width="0.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="99.69" y="943.5" ></text>
</g>
<g >
<title>ip_queue_xmit (135,624,005 samples, 0.04%)</title><rect x="1085.3" y="613" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1088.32" y="623.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;cpp_redis::reply&gt; &gt;::deallocate (105,074,009 samples, 0.03%)</title><rect x="917.3" y="709" width="0.3" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="920.32" y="719.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, true&gt; &gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (149,773,694 samples, 0.04%)</title><rect x="1149.3" y="789" width="0.5" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="1152.33" y="799.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt; &gt;::allocate (209,102,489 samples, 0.05%)</title><rect x="1142.4" y="741" width="0.6" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="1145.39" y="751.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::~lock_guard (39,954,692 samples, 0.01%)</title><rect x="96.6" y="933" width="0.1" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="99.57" y="943.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (272,009,177 samples, 0.07%)</title><rect x="1169.9" y="789" width="0.9" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1172.93" y="799.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::_M_deleter (68,382,373 samples, 0.02%)</title><rect x="471.8" y="581" width="0.2" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="474.84" y="591.5" ></text>
</g>
<g >
<title>___pthread_mutex_lock (104,911,580 samples, 0.03%)</title><rect x="492.4" y="725" width="0.3" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="495.41" y="735.5" ></text>
</g>
<g >
<title>_int_free (88,697,734 samples, 0.02%)</title><rect x="1066.0" y="741" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1068.96" y="751.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (255,870,248 samples, 0.07%)</title><rect x="831.5" y="661" width="0.8" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="834.48" y="671.5" ></text>
</g>
<g >
<title>cpp_redis::reply::~reply (255,249,011 samples, 0.07%)</title><rect x="917.9" y="677" width="0.8" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="920.91" y="687.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, true&gt; &gt; &gt;::deallocate (197,721,136 samples, 0.05%)</title><rect x="814.2" y="677" width="0.6" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="817.22" y="687.5" ></text>
</g>
<g >
<title>__GI___libc_free (179,780,405 samples, 0.05%)</title><rect x="1074.8" y="805" width="0.5" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1077.78" y="815.5" ></text>
</g>
<g >
<title>__gthread_mutex_lock (65,630,134 samples, 0.02%)</title><rect x="804.8" y="741" width="0.2" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="807.85" y="751.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::~shared_ptr (877,206,533 samples, 0.23%)</title><rect x="817.2" y="565" width="2.7" height="15.0" fill="rgb(248,197,47)" rx="2" ry="2" />
<text  x="820.19" y="575.5" ></text>
</g>
<g >
<title>cpp_redis::client::try_commit (283,175,084 samples, 0.07%)</title><rect x="903.2" y="757" width="0.9" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="906.20" y="767.5" ></text>
</g>
<g >
<title>__handle_mm_fault (57,781,780 samples, 0.01%)</title><rect x="1162.4" y="725" width="0.1" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1165.36" y="735.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::__uniq_ptr_impl&lt;std::__future_base::_Result_base::_Deleter&gt; (64,537,634 samples, 0.02%)</title><rect x="463.8" y="613" width="0.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="466.80" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (52,152,478 samples, 0.01%)</title><rect x="435.5" y="709" width="0.1" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="438.47" y="719.5" ></text>
</g>
<g >
<title>__random (54,058,185 samples, 0.01%)</title><rect x="1156.2" y="837" width="0.2" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="1159.20" y="847.5" ></text>
</g>
<g >
<title>_int_malloc (353,529,832 samples, 0.09%)</title><rect x="913.2" y="629" width="1.0" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="916.17" y="639.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (80,810,961 samples, 0.02%)</title><rect x="109.0" y="933" width="0.2" height="15.0" fill="rgb(214,41,9)" rx="2" ry="2" />
<text  x="111.96" y="943.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_deallocate (2,368,754,940 samples, 0.61%)</title><rect x="1030.2" y="757" width="7.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1033.18" y="767.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::allocate (1,529,530,198 samples, 0.40%)</title><rect x="895.6" y="629" width="4.7" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="898.59" y="639.5" ></text>
</g>
<g >
<title>operator new (145,680,197 samples, 0.04%)</title><rect x="218.0" y="709" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="221.03" y="719.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (332,605,824 samples, 0.09%)</title><rect x="532.5" y="741" width="1.0" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="535.51" y="751.5" ></text>
</g>
<g >
<title>_int_free (112,400,561 samples, 0.03%)</title><rect x="875.8" y="741" width="0.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="878.83" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::_M_valptr (50,943,965 samples, 0.01%)</title><rect x="536.9" y="709" width="0.2" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="539.91" y="719.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::lock_guard (83,145,805 samples, 0.02%)</title><rect x="450.8" y="773" width="0.2" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="453.79" y="783.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__uninitialized_copy_a&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (558,098,554 samples, 0.14%)</title><rect x="516.4" y="741" width="1.7" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="519.45" y="751.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (137,749,880 samples, 0.04%)</title><rect x="889.7" y="709" width="0.4" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="892.70" y="719.5" ></text>
</g>
<g >
<title>__x64_sys_epoll_ctl (46,267,426 samples, 0.01%)</title><rect x="202.8" y="517" width="0.1" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="205.75" y="527.5" ></text>
</g>
<g >
<title>__gthread_mutex_lock (56,497,993 samples, 0.01%)</title><rect x="60.4" y="933" width="0.1" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="63.37" y="943.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (61,425,568 samples, 0.02%)</title><rect x="438.1" y="709" width="0.2" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="441.12" y="719.5" ></text>
</g>
<g >
<title>CRYPTO_zalloc (97,207,425 samples, 0.03%)</title><rect x="838.9" y="741" width="0.3" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="841.90" y="751.5" ></text>
</g>
<g >
<title>operator new (145,846,737 samples, 0.04%)</title><rect x="432.3" y="677" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="435.32" y="687.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::allocate (431,029,276 samples, 0.11%)</title><rect x="1098.7" y="741" width="1.4" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="1101.74" y="751.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1,032,785,593 samples, 0.27%)</title><rect x="730.5" y="709" width="3.2" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="733.50" y="719.5" ></text>
</g>
<g >
<title>thrift_response_client_map::async_respond_client (836,617,581 samples, 0.22%)</title><rect x="1059.6" y="773" width="2.5" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="1062.57" y="783.5" ></text>
</g>
<g >
<title>lll_mutex_unlock_optimized (107,398,532 samples, 0.03%)</title><rect x="492.9" y="693" width="0.3" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="495.86" y="703.5" ></text>
</g>
<g >
<title>apache::thrift::protocol::TVirtualProtocol&lt;apache::thrift::protocol::TBinaryProtocolT&lt;apache::thrift::transport::TTransport, apache::thrift::protocol::TNetworkBigEndian&gt;, apache::thrift::protocol::TProtocolDefaults&gt;::writeString_virt (203,629,757 samples, 0.05%)</title><rect x="1061.3" y="677" width="0.6" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="1064.30" y="687.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;::allocate (41,163,775 samples, 0.01%)</title><rect x="1092.6" y="661" width="0.1" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="1095.57" y="671.5" ></text>
</g>
<g >
<title>__wake_up_sync_key (37,909,472 samples, 0.01%)</title><rect x="1082.9" y="693" width="0.1" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="1085.86" y="703.5" ></text>
</g>
<g >
<title>inet_recvmsg (119,226,672 samples, 0.03%)</title><rect x="1083.1" y="709" width="0.3" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="1086.08" y="719.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__relocate_a&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (156,132,048 samples, 0.04%)</title><rect x="1161.1" y="757" width="0.5" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="1164.14" y="767.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::__future_base::_Result_base*, std::__future_base::_Result_base::_Deleter&gt;::tuple&lt;std::__future_base::_Result_base*&amp;, std::__future_base::_Result_base::_Deleter, true&gt; (48,469,868 samples, 0.01%)</title><rect x="463.9" y="597" width="0.1" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="466.85" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (203,945,701 samples, 0.05%)</title><rect x="1170.8" y="805" width="0.6" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="1173.77" y="815.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned_erms (342,217,186 samples, 0.09%)</title><rect x="22.2" y="933" width="1.0" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="25.15" y="943.5" ></text>
</g>
<g >
<title>tcp_sendmsg (373,189,006 samples, 0.10%)</title><rect x="1059.8" y="517" width="1.2" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="1062.81" y="527.5" ></text>
</g>
<g >
<title>cpp_redis::client::try_commit (148,105,251 samples, 0.04%)</title><rect x="935.0" y="757" width="0.5" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="938.03" y="767.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (35,718,104 samples, 0.01%)</title><rect x="1097.0" y="389" width="0.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1100.03" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (175,630,649 samples, 0.05%)</title><rect x="883.3" y="709" width="0.5" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="886.31" y="719.5" ></text>
</g>
<g >
<title>lll_mutex_unlock_optimized (60,159,368 samples, 0.02%)</title><rect x="882.7" y="693" width="0.2" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="885.72" y="703.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (199,981,793 samples, 0.05%)</title><rect x="829.5" y="725" width="0.6" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="832.53" y="735.5" ></text>
</g>
<g >
<title>_int_malloc (2,691,834,777 samples, 0.70%)</title><rect x="479.1" y="677" width="8.2" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="482.07" y="687.5" ></text>
</g>
<g >
<title>HMAC_Init_ex (262,861,259 samples, 0.07%)</title><rect x="1154.4" y="821" width="0.8" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1157.39" y="831.5" ></text>
</g>
<g >
<title>futex_wake (124,539,475 samples, 0.03%)</title><rect x="465.1" y="677" width="0.3" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="468.07" y="687.5" ></text>
</g>
<g >
<title>do_syscall_64 (230,467,899 samples, 0.06%)</title><rect x="1086.4" y="773" width="0.7" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1089.38" y="783.5" ></text>
</g>
<g >
<title>operator new (463,517,182 samples, 0.12%)</title><rect x="943.6" y="597" width="1.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="946.62" y="607.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Vector_base (66,186,672 samples, 0.02%)</title><rect x="1019.0" y="741" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1021.97" y="751.5" ></text>
</g>
<g >
<title>handle_pte_fault (54,058,358 samples, 0.01%)</title><rect x="1159.1" y="613" width="0.2" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1162.12" y="623.5" ></text>
</g>
<g >
<title>encryption_engine::prf (1,068,625,748 samples, 0.28%)</title><rect x="1152.9" y="869" width="3.3" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1155.91" y="879.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (285,731,961 samples, 0.07%)</title><rect x="795.4" y="725" width="0.8" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="798.36" y="735.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (268,877,032 samples, 0.07%)</title><rect x="1111.4" y="789" width="0.8" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1114.41" y="799.5" ></text>
</g>
<g >
<title>EVP_CIPHER_CTX_reset (68,103,147 samples, 0.02%)</title><rect x="1150.6" y="805" width="0.3" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="1153.65" y="815.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (426,429,521 samples, 0.11%)</title><rect x="945.4" y="709" width="1.3" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="948.35" y="719.5" ></text>
</g>
<g >
<title>_int_malloc (729,650,633 samples, 0.19%)</title><rect x="993.3" y="661" width="2.2" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="996.32" y="671.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (69,263,299 samples, 0.02%)</title><rect x="800.8" y="645" width="0.2" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="803.79" y="655.5" ></text>
</g>
<g >
<title>_int_malloc (167,351,094 samples, 0.04%)</title><rect x="535.5" y="597" width="0.5" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="538.46" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_node_ptr (258,921,145 samples, 0.07%)</title><rect x="1015.7" y="709" width="0.8" height="15.0" fill="rgb(218,59,14)" rx="2" ry="2" />
<text  x="1018.74" y="719.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (322,434,225 samples, 0.08%)</title><rect x="920.7" y="757" width="1.0" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="923.72" y="767.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;::destroy&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; (124,791,236 samples, 0.03%)</title><rect x="457.8" y="741" width="0.4" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="460.79" y="751.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cpp_redis::reply, std::allocator&lt;cpp_redis::reply&gt; &gt;::_M_create_storage (300,997,279 samples, 0.08%)</title><rect x="925.3" y="741" width="0.9" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="928.29" y="751.5" ></text>
</g>
<g >
<title>__libc_recv (181,999,590 samples, 0.05%)</title><rect x="1083.1" y="805" width="0.5" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="1086.06" y="815.5" ></text>
</g>
<g >
<title>__GI___libc_free (2,293,822,861 samples, 0.59%)</title><rect x="1030.4" y="709" width="7.0" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1033.38" y="719.5" ></text>
</g>
<g >
<title>__GI___libc_free (276,323,975 samples, 0.07%)</title><rect x="1180.9" y="789" width="0.8" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1183.89" y="799.5" ></text>
</g>
<g >
<title>__ip_queue_xmit (34,007,746 samples, 0.01%)</title><rect x="204.0" y="421" width="0.1" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="207.04" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_S_do_relocate (485,283,310 samples, 0.13%)</title><rect x="959.8" y="709" width="1.5" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="962.77" y="719.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::destroy&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (595,848,843 samples, 0.15%)</title><rect x="462.7" y="677" width="1.8" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="465.69" y="687.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;operation&gt; &gt;::construct&lt;operation, operation const&amp;&gt; (775,858,116 samples, 0.20%)</title><rect x="474.3" y="773" width="2.4" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="477.30" y="783.5" ></text>
</g>
<g >
<title>operator new (227,899,976 samples, 0.06%)</title><rect x="1155.5" y="821" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1158.46" y="831.5" ></text>
</g>
<g >
<title>__schedule (186,787,855 samples, 0.05%)</title><rect x="1087.9" y="629" width="0.6" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="1090.89" y="639.5" ></text>
</g>
<g >
<title>void std::deque&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;::emplace_back&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; (255,946,740 samples, 0.07%)</title><rect x="1092.1" y="709" width="0.7" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1095.07" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (211,020,762 samples, 0.05%)</title><rect x="522.9" y="757" width="0.6" height="15.0" fill="rgb(253,225,53)" rx="2" ry="2" />
<text  x="525.86" y="767.5" ></text>
</g>
<g >
<title>tcache_get (35,483,505 samples, 0.01%)</title><rect x="941.7" y="597" width="0.1" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="944.68" y="607.5" ></text>
</g>
<g >
<title>_int_free (108,650,338 samples, 0.03%)</title><rect x="1056.1" y="629" width="0.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1059.05" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::_M_valptr (33,410,788 samples, 0.01%)</title><rect x="1014.0" y="709" width="0.1" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1017.01" y="719.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (1,181,475,583 samples, 0.31%)</title><rect x="1037.6" y="757" width="3.6" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="1040.60" y="767.5" ></text>
</g>
<g >
<title>__GI___pthread_mutex_unlock_usercnt (48,248,058 samples, 0.01%)</title><rect x="805.3" y="709" width="0.1" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="808.28" y="719.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (34,016,703 samples, 0.01%)</title><rect x="988.9" y="629" width="0.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="991.87" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, true&gt;* std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (682,005,096 samples, 0.18%)</title><rect x="534.0" y="725" width="2.1" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="537.03" y="735.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (137,950,314 samples, 0.04%)</title><rect x="797.2" y="709" width="0.4" height="15.0" fill="rgb(220,71,16)" rx="2" ry="2" />
<text  x="800.22" y="719.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;&amp;&amp; std::forward&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; &gt; (72,096,970 samples, 0.02%)</title><rect x="106.5" y="933" width="0.3" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="109.54" y="943.5" ></text>
</g>
<g >
<title>void std::deque&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;::emplace_back&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; (277,961,939 samples, 0.07%)</title><rect x="1102.8" y="709" width="0.8" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1105.77" y="719.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt; &gt;::destroy&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (773,329,949 samples, 0.20%)</title><rect x="1006.9" y="693" width="2.4" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="1009.94" y="703.5" ></text>
</g>
<g >
<title>_int_free (58,769,725 samples, 0.02%)</title><rect x="916.7" y="741" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="919.75" y="751.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;char*&gt;::difference_type std::distance&lt;char*&gt; (32,858,324 samples, 0.01%)</title><rect x="893.6" y="629" width="0.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="896.56" y="639.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct (86,992,229 samples, 0.02%)</title><rect x="941.9" y="661" width="0.2" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="944.86" y="671.5" ></text>
</g>
<g >
<title>tacopie::utils::thread_pool::run (7,884,099,939 samples, 2.04%)</title><rect x="1063.5" y="901" width="24.0" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1066.47" y="911.5" >t..</text>
</g>
<g >
<title>std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::pair (1,126,108,601 samples, 0.29%)</title><rect x="453.3" y="773" width="3.5" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="456.31" y="783.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, true&gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (113,733,019 samples, 0.03%)</title><rect x="1149.4" y="773" width="0.4" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="1152.44" y="783.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_S_equals (2,931,907,240 samples, 0.76%)</title><rect x="565.1" y="693" width="8.9" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="568.10" y="703.5" ></text>
</g>
<g >
<title>std::once_flag::_Prepare_execution::_Prepare_execution&lt;std::call_once&lt;void  (881,098,283 samples, 0.23%)</title><rect x="808.9" y="677" width="2.7" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="811.91" y="687.5" ></text>
</g>
<g >
<title>std::queue&lt;std::pair&lt;int, std::pair&lt;sequence_id const&amp;, std::vector&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::deque&lt;std::pair&lt;int, std::pair&lt;sequence_id const&amp;, std::vector&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int, std::pair&lt;sequence_id const&amp;, std::vector&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::push (83,128,217 samples, 0.02%)</title><rect x="1100.5" y="757" width="0.3" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1103.51" y="767.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (35,662,155 samples, 0.01%)</title><rect x="902.4" y="613" width="0.1" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="905.41" y="623.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (166,617,531 samples, 0.04%)</title><rect x="21.6" y="933" width="0.6" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="24.64" y="943.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_allocate (98,661,490 samples, 0.03%)</title><rect x="1164.8" y="805" width="0.3" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="1167.77" y="815.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (80,618,482 samples, 0.02%)</title><rect x="863.4" y="709" width="0.3" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="866.43" y="719.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt;::allocate (109,629,927 samples, 0.03%)</title><rect x="1014.3" y="693" width="0.3" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="1017.25" y="703.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::lock_guard (110,752,824 samples, 0.03%)</title><rect x="438.6" y="773" width="0.4" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="441.64" y="783.5" ></text>
</g>
<g >
<title>tcache_get (55,580,238 samples, 0.01%)</title><rect x="995.7" y="661" width="0.2" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="998.68" y="671.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned_erms (126,202,150 samples, 0.03%)</title><rect x="930.8" y="757" width="0.4" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="933.78" y="767.5" ></text>
</g>
<g >
<title>std::__atomic_futex_unsigned&lt;2147483648u&gt;::_M_load_and_test (303,312,919 samples, 0.08%)</title><rect x="1054.0" y="757" width="0.9" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="1056.97" y="767.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (504,150,685 samples, 0.13%)</title><rect x="55.7" y="933" width="1.5" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="58.68" y="943.5" ></text>
</g>
<g >
<title>Cache::checkIfKeyExists (1,002,036,280 samples, 0.26%)</title><rect x="422.0" y="789" width="3.0" height="15.0" fill="rgb(213,36,8)" rx="2" ry="2" />
<text  x="424.96" y="799.5" ></text>
</g>
<g >
<title>_int_free (63,781,375 samples, 0.02%)</title><rect x="1164.4" y="613" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1167.36" y="623.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (46,667,770 samples, 0.01%)</title><rect x="866.2" y="693" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="869.24" y="703.5" ></text>
</g>
<g >
<title>operator new (106,930,579 samples, 0.03%)</title><rect x="1090.5" y="677" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1093.49" y="687.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (204,576,532 samples, 0.05%)</title><rect x="956.7" y="741" width="0.6" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="959.69" y="751.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (340,171,225 samples, 0.09%)</title><rect x="981.9" y="725" width="1.1" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="984.92" y="735.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, true&gt; &gt;::destroy&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; (109,728,834 samples, 0.03%)</title><rect x="506.5" y="677" width="0.3" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="509.45" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_node (1,359,309,619 samples, 0.35%)</title><rect x="1005.2" y="725" width="4.1" height="15.0" fill="rgb(252,217,52)" rx="2" ry="2" />
<text  x="1008.15" y="735.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (50,483,135 samples, 0.01%)</title><rect x="517.6" y="645" width="0.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="520.60" y="655.5" ></text>
</g>
<g >
<title>bool std::operator&lt; &lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (71,387,175 samples, 0.02%)</title><rect x="586.1" y="725" width="0.2" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="589.11" y="735.5" ></text>
</g>
<g >
<title>__GI___lll_lock_wait (47,227,817 samples, 0.01%)</title><rect x="1103.7" y="645" width="0.2" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="1106.74" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, false&gt; &gt; &gt;::_M_deallocate_node (158,696,342 samples, 0.04%)</title><rect x="1164.1" y="789" width="0.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1167.12" y="799.5" ></text>
</g>
<g >
<title>do_user_addr_fault (41,294,646 samples, 0.01%)</title><rect x="1157.8" y="773" width="0.1" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1160.81" y="783.5" ></text>
</g>
<g >
<title>std::_List_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;* std::__cxx11::list&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (640,669,741 samples, 0.17%)</title><rect x="525.1" y="741" width="1.9" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="528.09" y="751.5" ></text>
</g>
<g >
<title>queue&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::push (584,377,698 samples, 0.15%)</title><rect x="1102.3" y="757" width="1.8" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="1105.31" y="767.5" ></text>
</g>
<g >
<title>std::__cxx11::to_string (437,677,330 samples, 0.11%)</title><rect x="973.0" y="789" width="1.3" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="975.99" y="799.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt;* std::_Rb_tree&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;, std::_Identity&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt;, bool  (340,520,724 samples, 0.09%)</title><rect x="790.3" y="725" width="1.0" height="15.0" fill="rgb(230,117,27)" rx="2" ry="2" />
<text  x="793.30" y="735.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__relocate_a_1&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (168,413,275 samples, 0.04%)</title><rect x="218.5" y="709" width="0.5" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="221.47" y="719.5" ></text>
</g>
<g >
<title>std::vector&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_S_do_relocate (124,950,978 samples, 0.03%)</title><rect x="1090.9" y="709" width="0.4" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1093.87" y="719.5" ></text>
</g>
<g >
<title>__do_softirq (110,074,073 samples, 0.03%)</title><rect x="1085.4" y="437" width="0.3" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1088.36" y="447.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (104,209,429 samples, 0.03%)</title><rect x="968.3" y="741" width="0.3" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="971.31" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (166,614,907 samples, 0.04%)</title><rect x="514.4" y="725" width="0.5" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="517.41" y="735.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::lock_guard (119,248,590 samples, 0.03%)</title><rect x="804.7" y="773" width="0.4" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="807.70" y="783.5" ></text>
</g>
<g >
<title>__GI___libc_free (107,508,149 samples, 0.03%)</title><rect x="487.5" y="677" width="0.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="490.47" y="687.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (336,948,762 samples, 0.09%)</title><rect x="826.8" y="693" width="1.0" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="829.80" y="703.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (431,029,276 samples, 0.11%)</title><rect x="1098.7" y="693" width="1.4" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1101.74" y="703.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::find (212,834,350 samples, 0.06%)</title><rect x="451.2" y="773" width="0.7" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="454.22" y="783.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (161,787,199 samples, 0.04%)</title><rect x="795.7" y="709" width="0.5" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="798.73" y="719.5" ></text>
</g>
<g >
<title>waffle_thriftProcessor::process_async_get_batch (3,484,472,718 samples, 0.90%)</title><rect x="1089.6" y="821" width="10.6" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1092.60" y="831.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::allocate (94,854,947 samples, 0.02%)</title><rect x="833.6" y="725" width="0.3" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="836.64" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, false&gt; &gt; &gt;::_M_deallocate_nodes (158,696,342 samples, 0.04%)</title><rect x="1164.1" y="805" width="0.5" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="1167.12" y="815.5" ></text>
</g>
<g >
<title>__GI___libc_free (62,313,302 samples, 0.02%)</title><rect x="214.3" y="581" width="0.1" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="217.26" y="591.5" ></text>
</g>
<g >
<title>alloc_skb_with_frags (69,649,483 samples, 0.02%)</title><rect x="1111.6" y="693" width="0.2" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1114.61" y="703.5" ></text>
</g>
<g >
<title>__GI___pthread_mutex_unlock_usercnt (47,876,971 samples, 0.01%)</title><rect x="578.6" y="709" width="0.1" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="581.57" y="719.5" ></text>
</g>
<g >
<title>_int_free (95,920,471 samples, 0.02%)</title><rect x="1016.9" y="661" width="0.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1019.93" y="671.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::_M_deallocate (219,638,622 samples, 0.06%)</title><rect x="816.0" y="613" width="0.7" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="819.02" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash (42,557,771 samples, 0.01%)</title><rect x="576.4" y="725" width="0.2" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="579.43" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (195,264,687 samples, 0.05%)</title><rect x="1145.7" y="773" width="0.6" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="1148.66" y="783.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (328,471,130 samples, 0.08%)</title><rect x="83.1" y="933" width="1.0" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="86.05" y="943.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (1,028,342,502 samples, 0.27%)</title><rect x="461.4" y="725" width="3.1" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="464.40" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (99,725,022 samples, 0.03%)</title><rect x="1118.4" y="821" width="0.3" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="1121.37" y="831.5" ></text>
</g>
<g >
<title>arena_for_chunk (44,925,137 samples, 0.01%)</title><rect x="220.4" y="693" width="0.2" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="223.41" y="703.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned_erms (85,933,242 samples, 0.02%)</title><rect x="941.1" y="629" width="0.2" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="944.07" y="639.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (1,040,067,919 samples, 0.27%)</title><rect x="461.4" y="741" width="3.1" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="464.36" y="751.5" ></text>
</g>
<g >
<title>thrift_handler::async_get_batch (2,525,031,679 samples, 0.65%)</title><rect x="1090.0" y="805" width="7.7" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="1092.99" y="815.5" ></text>
</g>
<g >
<title>std::vector&lt;cpp_redis::reply, std::allocator&lt;cpp_redis::reply&gt; &gt;::vector (203,671,044 samples, 0.05%)</title><rect x="1080.4" y="805" width="0.6" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="1083.42" y="815.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned_erms (112,112,506 samples, 0.03%)</title><rect x="954.7" y="725" width="0.4" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="957.75" y="735.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (688,533,184 samples, 0.18%)</title><rect x="719.9" y="693" width="2.1" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="722.89" y="703.5" ></text>
</g>
<g >
<title>Cache::getValueWithoutPositionChange (556,004,939 samples, 0.14%)</title><rect x="521.9" y="789" width="1.7" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="524.87" y="799.5" ></text>
</g>
<g >
<title>_int_malloc (138,779,063 samples, 0.04%)</title><rect x="529.3" y="693" width="0.5" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="532.34" y="703.5" ></text>
</g>
<g >
<title>std::__atomic_base&lt;int&gt;::operator int (2,554,666,236 samples, 0.66%)</title><rect x="343.0" y="805" width="7.8" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="345.98" y="815.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (213,880,027 samples, 0.06%)</title><rect x="921.1" y="581" width="0.6" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="924.05" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (161,242,941 samples, 0.04%)</title><rect x="500.6" y="741" width="0.5" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="503.62" y="751.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;::deallocate (94,495,181 samples, 0.02%)</title><rect x="457.4" y="709" width="0.3" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="460.38" y="719.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_assign (88,161,469 samples, 0.02%)</title><rect x="887.9" y="757" width="0.3" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="890.93" y="767.5" ></text>
</g>
<g >
<title>std::mutex::unlock (96,593,705 samples, 0.02%)</title><rect x="578.4" y="757" width="0.3" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="581.43" y="767.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::~pair (62,902,092 samples, 0.02%)</title><rect x="528.0" y="773" width="0.2" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="531.01" y="783.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__strip_reference_wrapper&lt;std::decay&lt;operation&amp;&gt;::type&gt;::__type, std::__strip_reference_wrapper&lt;std::decay&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;&amp;&gt;::type&gt;::__type&gt; std::make_pair&lt;operation&amp;, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;&amp;&gt; (184,151,789 samples, 0.05%)</title><rect x="1104.9" y="757" width="0.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1107.86" y="767.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (34,100,432 samples, 0.01%)</title><rect x="1115.7" y="789" width="0.1" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1118.68" y="799.5" ></text>
</g>
<g >
<title>std::__basic_future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::__basic_future (35,389,632 samples, 0.01%)</title><rect x="1091.1" y="597" width="0.1" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1094.10" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (1,373,676,695 samples, 0.36%)</title><rect x="822.3" y="741" width="4.2" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="825.31" y="751.5" ></text>
</g>
<g >
<title>ip_rcv (65,045,447 samples, 0.02%)</title><rect x="1085.4" y="341" width="0.2" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="1088.37" y="351.5" ></text>
</g>
<g >
<title>std::__allocated_ptr&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (195,439,637 samples, 0.05%)</title><rect x="1107.4" y="533" width="0.6" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="1110.39" y="543.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;std::__future_base::_State_baseV2&gt;,  (107,799,233 samples, 0.03%)</title><rect x="1096.2" y="533" width="0.4" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="1099.24" y="543.5" ></text>
</g>
<g >
<title>do_syscall_64 (35,941,144 samples, 0.01%)</title><rect x="918.9" y="645" width="0.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="921.91" y="655.5" ></text>
</g>
<g >
<title>__GI___libc_free (90,951,558 samples, 0.02%)</title><rect x="875.3" y="741" width="0.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="878.30" y="751.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_insert_bucket_begin (226,885,282 samples, 0.06%)</title><rect x="1011.8" y="725" width="0.7" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1014.85" y="735.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::shared_ptr (44,580,258 samples, 0.01%)</title><rect x="456.6" y="757" width="0.1" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="459.60" y="767.5" ></text>
</g>
<g >
<title>void std::__relocate_object_a&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; (90,661,736 samples, 0.02%)</title><rect x="1165.1" y="741" width="0.3" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="1168.08" y="751.5" ></text>
</g>
<g >
<title>FrequencySmoother::getFrequency (576,413,026 samples, 0.15%)</title><rect x="1117.0" y="869" width="1.7" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1119.97" y="879.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;::find (925,482,121 samples, 0.24%)</title><rect x="428.3" y="773" width="2.9" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="431.35" y="783.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (707,778,671 samples, 0.18%)</title><rect x="912.2" y="645" width="2.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="915.21" y="655.5" ></text>
</g>
<g >
<title>std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::future (140,379,713 samples, 0.04%)</title><rect x="1095.0" y="741" width="0.5" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="1098.04" y="751.5" ></text>
</g>
<g >
<title>CRYPTO_zalloc (61,024,175 samples, 0.02%)</title><rect x="113.5" y="933" width="0.2" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="116.46" y="943.5" ></text>
</g>
<g >
<title>CRYPTO_zalloc (75,806,070 samples, 0.02%)</title><rect x="839.9" y="725" width="0.2" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="842.87" y="735.5" ></text>
</g>
<g >
<title>_int_malloc (85,633,520 samples, 0.02%)</title><rect x="933.5" y="661" width="0.2" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="936.48" y="671.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (58,650,712 samples, 0.02%)</title><rect x="109.2" y="933" width="0.2" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="112.24" y="943.5" ></text>
</g>
<g >
<title>waffle_thrift_async_get_batch_args::~waffle_thrift_async_get_batch_args (40,309,381 samples, 0.01%)</title><rect x="1100.1" y="805" width="0.1" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1103.11" y="815.5" ></text>
</g>
<g >
<title>_int_malloc (112,726,469 samples, 0.03%)</title><rect x="1070.6" y="709" width="0.3" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1073.59" y="719.5" ></text>
</g>
<g >
<title>cpp_redis::client::mset (3,782,461,097 samples, 0.98%)</title><rect x="937.0" y="741" width="11.6" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="940.04" y="751.5" ></text>
</g>
<g >
<title> (61,845,968 samples, 0.02%)</title><rect x="894.4" y="725" width="0.2" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="897.39" y="735.5" ></text>
</g>
<g >
<title>__GI___libc_free (106,211,668 samples, 0.03%)</title><rect x="1065.9" y="757" width="0.4" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1068.94" y="767.5" ></text>
</g>
<g >
<title>tacopie::tcp_client::async_write (77,913,058 samples, 0.02%)</title><rect x="935.2" y="709" width="0.2" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="938.16" y="719.5" ></text>
</g>
<g >
<title>lll_mutex_lock_optimized (83,471,007 samples, 0.02%)</title><rect x="492.5" y="709" width="0.2" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="495.48" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (81,119,795 samples, 0.02%)</title><rect x="426.0" y="709" width="0.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="428.99" y="719.5" ></text>
</g>
<g >
<title>ip_finish_output (200,404,724 samples, 0.05%)</title><rect x="1060.1" y="357" width="0.6" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1063.06" y="367.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__future_base::_Result_base::_Deleter&gt;::_M_ptr (47,133,589 samples, 0.01%)</title><rect x="1108.0" y="565" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1111.03" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;::_M_next (37,066,870 samples, 0.01%)</title><rect x="1012.9" y="693" width="0.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1015.94" y="703.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::destroy&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (429,445,211 samples, 0.11%)</title><rect x="818.5" y="469" width="1.3" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="821.49" y="479.5" ></text>
</g>
<g >
<title> (2,665,727,192 samples, 0.69%)</title><rect x="177.0" y="917" width="8.1" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="179.98" y="927.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, 0ul&gt; (91,113,743 samples, 0.02%)</title><rect x="1149.5" y="741" width="0.3" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1152.50" y="751.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (70,777,936 samples, 0.02%)</title><rect x="812.8" y="725" width="0.2" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="815.82" y="735.5" ></text>
</g>
<g >
<title>cpp_redis::client::unprotected_send (897,381,175 samples, 0.23%)</title><rect x="1157.9" y="789" width="2.8" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1160.94" y="799.5" ></text>
</g>
<g >
<title>refill_stock (35,594,671 samples, 0.01%)</title><rect x="1083.3" y="613" width="0.1" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="1086.26" y="623.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;,  (860,061,190 samples, 0.22%)</title><rect x="817.2" y="549" width="2.7" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="820.24" y="559.5" ></text>
</g>
<g >
<title>sysmalloc (48,084,647 samples, 0.01%)</title><rect x="1104.4" y="677" width="0.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1107.41" y="687.5" ></text>
</g>
<g >
<title>std::mutex::lock (93,289,761 samples, 0.02%)</title><rect x="578.1" y="757" width="0.3" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="581.08" y="767.5" ></text>
</g>
<g >
<title>core_sys_select (236,827,474 samples, 0.06%)</title><rect x="1062.2" y="805" width="0.8" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="1065.25" y="815.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (144,188,430 samples, 0.04%)</title><rect x="857.9" y="757" width="0.4" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="860.87" y="767.5" ></text>
</g>
<g >
<title>void std::call_once&lt;void  (2,438,917,012 samples, 0.63%)</title><rect x="465.4" y="757" width="7.5" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="468.45" y="767.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator= (667,055,078 samples, 0.17%)</title><rect x="970.0" y="789" width="2.0" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="973.01" y="799.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Scoped_node::~_Scoped_node (47,011,070 samples, 0.01%)</title><rect x="1000.5" y="757" width="0.1" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="1003.47" y="767.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (718,995,616 samples, 0.19%)</title><rect x="1175.9" y="837" width="2.2" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1178.88" y="847.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;&gt; std::forward_as_tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (36,163,625 samples, 0.01%)</title><rect x="1174.3" y="837" width="0.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1177.35" y="847.5" ></text>
</g>
<g >
<title>tcp_v4_do_rcv (58,003,733 samples, 0.02%)</title><rect x="1085.4" y="261" width="0.2" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="1088.38" y="271.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (57,187,870 samples, 0.01%)</title><rect x="426.4" y="725" width="0.1" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="429.36" y="735.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (35,766,783 samples, 0.01%)</title><rect x="615.8" y="709" width="0.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="618.84" y="719.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::allocate (106,930,579 samples, 0.03%)</title><rect x="1090.5" y="709" width="0.3" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1093.49" y="719.5" ></text>
</g>
<g >
<title>std::mutex::lock (39,753,236 samples, 0.01%)</title><rect x="829.0" y="757" width="0.2" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="832.04" y="767.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (668,340,658 samples, 0.17%)</title><rect x="806.9" y="677" width="2.0" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="809.86" y="687.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_deallocate (799,397,902 samples, 0.21%)</title><rect x="1178.4" y="837" width="2.5" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1181.42" y="847.5" ></text>
</g>
<g >
<title>std::queue&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::deque&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;::push (2,269,120,585 samples, 0.59%)</title><rect x="895.6" y="773" width="6.9" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="898.59" y="783.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (491,096,321 samples, 0.13%)</title><rect x="1147.6" y="789" width="1.5" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="1150.57" y="799.5" ></text>
</g>
<g >
<title>waffle_thrift_responseClient::async_response (826,539,130 samples, 0.21%)</title><rect x="1059.6" y="741" width="2.5" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1062.60" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_S_equals (50,743,726 samples, 0.01%)</title><rect x="88.5" y="933" width="0.1" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="91.49" y="943.5" ></text>
</g>
<g >
<title>apache::thrift::protocol::TVirtualProtocol&lt;apache::thrift::protocol::TBinaryProtocolT&lt;apache::thrift::transport::TTransport, apache::thrift::protocol::TNetworkBigEndian&gt;, apache::thrift::protocol::TProtocolDefaults&gt;::readString_virt (258,152,200 samples, 0.07%)</title><rect x="1097.8" y="773" width="0.8" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1100.84" y="783.5" ></text>
</g>
<g >
<title>_int_malloc (541,820,694 samples, 0.14%)</title><rect x="1022.5" y="693" width="1.7" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1025.52" y="703.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_deallocate (62,313,302 samples, 0.02%)</title><rect x="214.3" y="629" width="0.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="217.26" y="639.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_capacity (34,100,432 samples, 0.01%)</title><rect x="1115.7" y="805" width="0.1" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="1118.68" y="815.5" ></text>
</g>
<g >
<title>__sys_recvfrom (60,939,028 samples, 0.02%)</title><rect x="202.5" y="629" width="0.2" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="205.54" y="639.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (213,880,027 samples, 0.06%)</title><rect x="921.1" y="597" width="0.6" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="924.05" y="607.5" ></text>
</g>
<g >
<title>FrequencySmoother::setFrequency (73,846,393,347 samples, 19.10%)</title><rect x="577.8" y="789" width="225.4" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="580.82" y="799.5" >FrequencySmoother::setFrequency</text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (35,987,164 samples, 0.01%)</title><rect x="510.7" y="677" width="0.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="513.72" y="687.5" ></text>
</g>
<g >
<title>___pthread_mutex_unlock (80,120,313 samples, 0.02%)</title><rect x="1093.3" y="693" width="0.3" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1096.35" y="703.5" ></text>
</g>
<g >
<title>operator new (90,105,903 samples, 0.02%)</title><rect x="933.5" y="693" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="936.48" y="703.5" ></text>
</g>
<g >
<title>ip_finish_output (121,704,757 samples, 0.03%)</title><rect x="1085.3" y="549" width="0.4" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1088.32" y="559.5" ></text>
</g>
<g >
<title>void std::_Destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (285,300,912 samples, 0.07%)</title><rect x="1180.9" y="805" width="0.8" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1183.86" y="815.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct_aux&lt;unsigned char*&gt; (685,475,856 samples, 0.18%)</title><rect x="843.5" y="725" width="2.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="846.47" y="735.5" ></text>
</g>
<g >
<title>schedule (34,807,392 samples, 0.01%)</title><rect x="953.3" y="565" width="0.1" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="956.28" y="575.5" ></text>
</g>
<g >
<title>__libc_recv (67,468,248 samples, 0.02%)</title><rect x="202.5" y="693" width="0.2" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="205.53" y="703.5" ></text>
</g>
<g >
<title>rand (195,913,425 samples, 0.05%)</title><rect x="856.9" y="773" width="0.6" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="859.87" y="783.5" ></text>
</g>
<g >
<title>dequeue_entity (43,600,806 samples, 0.01%)</title><rect x="1088.0" y="581" width="0.2" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1091.02" y="591.5" ></text>
</g>
<g >
<title>ip_queue_xmit (34,007,746 samples, 0.01%)</title><rect x="204.0" y="437" width="0.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="207.04" y="447.5" ></text>
</g>
<g >
<title>mas_alloc_nodes (43,581,502 samples, 0.01%)</title><rect x="1104.4" y="517" width="0.2" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="1107.43" y="527.5" ></text>
</g>
<g >
<title>tacopie::io_service::poll (49,670,315 samples, 0.01%)</title><rect x="108.5" y="933" width="0.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="111.46" y="943.5" ></text>
</g>
<g >
<title>__GI___libc_free (182,526,689 samples, 0.05%)</title><rect x="921.1" y="565" width="0.5" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="924.08" y="575.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;, std::_Identity&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt;, bool  (1,610,188,248 samples, 0.42%)</title><rect x="722.0" y="725" width="4.9" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="725.02" y="735.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;::_Tuple_impl (49,736,486 samples, 0.01%)</title><rect x="1003.9" y="741" width="0.2" height="15.0" fill="rgb(231,124,29)" rx="2" ry="2" />
<text  x="1006.90" y="751.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::~lock_guard (127,607,047 samples, 0.03%)</title><rect x="527.6" y="773" width="0.4" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="530.60" y="783.5" ></text>
</g>
<g >
<title>tcp_sendmsg_locked (333,985,194 samples, 0.09%)</title><rect x="1059.9" y="501" width="1.1" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1062.93" y="511.5" ></text>
</g>
<g >
<title>__GI___libc_free (58,307,791 samples, 0.02%)</title><rect x="503.5" y="693" width="0.1" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="506.46" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt;::_Hash_node (40,483,758 samples, 0.01%)</title><rect x="991.8" y="725" width="0.1" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="994.76" y="735.5" ></text>
</g>
<g >
<title>lll_mutex_unlock_optimized (147,981,248 samples, 0.04%)</title><rect x="976.2" y="709" width="0.4" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="979.15" y="719.5" ></text>
</g>
<g >
<title>void std::__relocate_object_a&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; (380,531,906 samples, 0.10%)</title><rect x="960.0" y="661" width="1.2" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="963.01" y="671.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (202,745,451 samples, 0.05%)</title><rect x="136.8" y="869" width="0.6" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="139.77" y="879.5" ></text>
</g>
<g >
<title>operator new (118,034,034 samples, 0.03%)</title><rect x="1184.2" y="949" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1187.21" y="959.5" ></text>
</g>
<g >
<title>std::unique_lock&lt;std::mutex&gt;::unlock (68,639,392 samples, 0.02%)</title><rect x="1103.9" y="741" width="0.2" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1106.88" y="751.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (293,749,225 samples, 0.08%)</title><rect x="1159.8" y="725" width="0.9" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1162.78" y="735.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_deallocate (121,159,207 samples, 0.03%)</title><rect x="910.4" y="709" width="0.3" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="913.35" y="719.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (95,697,638 samples, 0.02%)</title><rect x="493.8" y="741" width="0.2" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="496.75" y="751.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (76,667,827 samples, 0.02%)</title><rect x="1013.5" y="709" width="0.2" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="1016.45" y="719.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (187,471,480 samples, 0.05%)</title><rect x="82.1" y="933" width="0.6" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="85.12" y="943.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (54,898,821 samples, 0.01%)</title><rect x="1163.5" y="789" width="0.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1166.47" y="799.5" ></text>
</g>
<g >
<title>std::mutex::unlock (62,325,414 samples, 0.02%)</title><rect x="439.0" y="757" width="0.2" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="442.01" y="767.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_put_node (130,698,023 samples, 0.03%)</title><rect x="503.3" y="741" width="0.4" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="506.29" y="751.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;main::{lambda (773,925,518 samples, 0.20%)</title><rect x="201.9" y="901" width="2.4" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="204.90" y="911.5" ></text>
</g>
<g >
<title>operator new (319,227,894 samples, 0.08%)</title><rect x="525.7" y="677" width="0.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="528.66" y="687.5" ></text>
</g>
<g >
<title>__skb_datagram_iter (37,973,678 samples, 0.01%)</title><rect x="1083.1" y="645" width="0.1" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="1086.13" y="655.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned_erms (46,778,607 samples, 0.01%)</title><rect x="873.8" y="709" width="0.2" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="876.84" y="719.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (250,230,246 samples, 0.06%)</title><rect x="530.7" y="725" width="0.7" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="533.67" y="735.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;  (502,237,477 samples, 0.13%)</title><rect x="1078.3" y="661" width="1.5" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1081.30" y="671.5" ></text>
</g>
<g >
<title>std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::_M_state (172,014,866 samples, 0.04%)</title><rect x="812.0" y="757" width="0.5" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="815.01" y="767.5" ></text>
</g>
<g >
<title>_int_malloc (48,512,217 samples, 0.01%)</title><rect x="1065.5" y="709" width="0.2" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1068.54" y="719.5" ></text>
</g>
<g >
<title>CRYPTO_malloc (94,695,485 samples, 0.02%)</title><rect x="864.0" y="693" width="0.3" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="867.04" y="703.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (137,622,768 samples, 0.04%)</title><rect x="514.5" y="709" width="0.4" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="517.50" y="719.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__relocate_a_1&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (156,132,048 samples, 0.04%)</title><rect x="1161.1" y="741" width="0.5" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="1164.14" y="751.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (177,837,546 samples, 0.05%)</title><rect x="214.4" y="613" width="0.6" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="217.45" y="623.5" ></text>
</g>
<g >
<title>ip_local_deliver_finish (114,137,500 samples, 0.03%)</title><rect x="1060.1" y="117" width="0.3" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="1063.08" y="127.5" ></text>
</g>
<g >
<title>_int_malloc (115,121,972 samples, 0.03%)</title><rect x="1083.6" y="789" width="0.4" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1086.63" y="799.5" ></text>
</g>
<g >
<title>handle_mm_fault (49,966,537 samples, 0.01%)</title><rect x="1161.4" y="613" width="0.1" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1164.39" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::__enable_if&lt;std::__is_char&lt;char&gt;::__value, bool&gt;::__type std::operator==&lt;char&gt; (121,533,228 samples, 0.03%)</title><rect x="500.2" y="677" width="0.4" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="503.21" y="687.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::size (48,629,463 samples, 0.01%)</title><rect x="32.5" y="933" width="0.1" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="35.47" y="943.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_capacity (298,211,028 samples, 0.08%)</title><rect x="29.0" y="933" width="0.9" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="31.95" y="943.5" ></text>
</g>
<g >
<title>do_futex (206,846,090 samples, 0.05%)</title><rect x="1054.2" y="645" width="0.6" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1057.20" y="655.5" ></text>
</g>
<g >
<title>skb_do_copy_data_nocache (118,218,286 samples, 0.03%)</title><rect x="1084.9" y="677" width="0.3" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="1087.86" y="687.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (66,819,766 samples, 0.02%)</title><rect x="906.6" y="613" width="0.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="909.62" y="623.5" ></text>
</g>
<g >
<title>malloc@plt (202,946,734 samples, 0.05%)</title><rect x="680.7" y="677" width="0.6" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="683.69" y="687.5" ></text>
</g>
<g >
<title>cpp_redis::client::mset (1,351,803,067 samples, 0.35%)</title><rect x="1157.5" y="821" width="4.1" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1160.49" y="831.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::operator!=&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;*, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; (59,772,366 samples, 0.02%)</title><rect x="803.6" y="773" width="0.2" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="806.64" y="783.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::__uniq_ptr_impl&lt;std::__future_base::_Result_base::_Deleter&gt; (72,598,332 samples, 0.02%)</title><rect x="819.2" y="405" width="0.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="822.17" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (356,841,215 samples, 0.09%)</title><rect x="425.5" y="757" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="428.49" y="767.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (40,392,366 samples, 0.01%)</title><rect x="1058.7" y="661" width="0.1" height="15.0" fill="rgb(214,41,9)" rx="2" ry="2" />
<text  x="1061.70" y="671.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned_erms (33,052,310 samples, 0.01%)</title><rect x="1021.7" y="725" width="0.1" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1024.70" y="735.5" ></text>
</g>
<g >
<title>kmem_cache_alloc (37,486,249 samples, 0.01%)</title><rect x="202.8" y="469" width="0.1" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="205.78" y="479.5" ></text>
</g>
<g >
<title>__GI___libc_free (33,703,344 samples, 0.01%)</title><rect x="1113.9" y="869" width="0.1" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1116.89" y="879.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (150,702,271 samples, 0.04%)</title><rect x="211.0" y="709" width="0.5" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="214.04" y="719.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;apache::thrift::concurrency::Runnable&gt;::shared_ptr&lt;apache::thrift::server::TNonblockingServer::TConnection::Task, void&gt; (34,673,565 samples, 0.01%)</title><rect x="203.6" y="661" width="0.1" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="206.62" y="671.5" ></text>
</g>
<g >
<title>malloc_consolidate (58,562,230 samples, 0.02%)</title><rect x="1164.1" y="613" width="0.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1167.13" y="623.5" ></text>
</g>
<g >
<title>lll_mutex_unlock_optimized (36,368,212 samples, 0.01%)</title><rect x="1117.3" y="773" width="0.1" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="1120.27" y="783.5" ></text>
</g>
<g >
<title>__GI___libc_free (676,080,892 samples, 0.17%)</title><rect x="1007.1" y="661" width="2.0" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1010.06" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_S_max_size (61,821,368 samples, 0.02%)</title><rect x="518.5" y="725" width="0.2" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="521.49" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_S_equals (66,524,068 samples, 0.02%)</title><rect x="799.5" y="693" width="0.2" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="802.51" y="703.5" ></text>
</g>
<g >
<title>try_to_wake_up (41,924,497 samples, 0.01%)</title><rect x="1112.0" y="549" width="0.1" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1114.96" y="559.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;cpp_redis::reply*&gt; (290,958,183 samples, 0.08%)</title><rect x="917.8" y="709" width="0.9" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="920.80" y="719.5" ></text>
</g>
<g >
<title>HMAC (5,206,957,511 samples, 1.35%)</title><rect x="859.8" y="757" width="15.9" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="862.78" y="767.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt; &gt;::find (961,662,083 samples, 0.25%)</title><rect x="1144.1" y="853" width="2.9" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1147.08" y="863.5" ></text>
</g>
<g >
<title>cpp_redis::client::commit (283,175,084 samples, 0.07%)</title><rect x="903.2" y="773" width="0.9" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="906.20" y="783.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, false&gt; &gt;::destroy&lt;std::pair&lt;int const, std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; (158,696,342 samples, 0.04%)</title><rect x="1164.1" y="757" width="0.5" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="1167.12" y="767.5" ></text>
</g>
<g >
<title>lll_mutex_lock_optimized (249,727,359 samples, 0.06%)</title><rect x="458.5" y="693" width="0.8" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="461.54" y="703.5" ></text>
</g>
<g >
<title>std::_Identity&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt;::operator (207,343,094 samples, 0.05%)</title><rect x="74.1" y="933" width="0.7" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="77.13" y="943.5" ></text>
</g>
<g >
<title>std::piecewise_construct_t const&amp; std::forward&lt;std::piecewise_construct_t const&amp;&gt; (38,684,380 samples, 0.01%)</title><rect x="105.4" y="933" width="0.1" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="108.36" y="943.5" ></text>
</g>
<g >
<title>__random (678,184,310 samples, 0.18%)</title><rect x="854.2" y="741" width="2.1" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="857.19" y="751.5" ></text>
</g>
<g >
<title>_int_free (43,944,093 samples, 0.01%)</title><rect x="113.1" y="933" width="0.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="116.08" y="943.5" ></text>
</g>
<g >
<title>__gnu_cxx::__enable_if&lt;std::__is_char&lt;char&gt;::__value, bool&gt;::__type std::operator==&lt;char&gt; (278,296,646 samples, 0.07%)</title><rect x="985.2" y="693" width="0.8" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="988.19" y="703.5" ></text>
</g>
<g >
<title>try_to_wake_up (73,026,765 samples, 0.02%)</title><rect x="465.2" y="645" width="0.2" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="468.23" y="655.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::vector (2,142,752,043 samples, 0.55%)</title><rect x="895.6" y="709" width="6.5" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="898.59" y="719.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt;::_M_ptr (39,250,980 samples, 0.01%)</title><rect x="596.1" y="661" width="0.1" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="599.05" y="671.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (222,100,067 samples, 0.06%)</title><rect x="1141.6" y="805" width="0.7" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1144.63" y="815.5" ></text>
</g>
<g >
<title>_int_malloc (227,578,482 samples, 0.06%)</title><rect x="876.7" y="725" width="0.7" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="879.73" y="735.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned_erms (288,838,502 samples, 0.07%)</title><rect x="60.8" y="933" width="0.9" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="63.84" y="943.5" ></text>
</g>
<g >
<title>std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::set_value (2,316,931,784 samples, 0.60%)</title><rect x="805.5" y="773" width="7.1" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="808.48" y="783.5" ></text>
</g>
<g >
<title>operator new (280,267,135 samples, 0.07%)</title><rect x="535.1" y="629" width="0.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="538.13" y="639.5" ></text>
</g>
<g >
<title>do_futex (122,767,422 samples, 0.03%)</title><rect x="458.9" y="597" width="0.3" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="461.87" y="607.5" ></text>
</g>
<g >
<title>tacopie::tcp_socket::recv (307,712,531 samples, 0.08%)</title><rect x="1083.0" y="837" width="1.0" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1086.05" y="847.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (32,763,365 samples, 0.01%)</title><rect x="425.6" y="709" width="0.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="428.60" y="719.5" ></text>
</g>
<g >
<title>std::queue&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::deque&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;operation, std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::push (310,415,091 samples, 0.08%)</title><rect x="1091.9" y="741" width="0.9" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="1094.90" y="751.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::allocate (145,680,197 samples, 0.04%)</title><rect x="218.0" y="725" width="0.5" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="221.03" y="735.5" ></text>
</g>
<g >
<title>__clone3 (298,354,274,895 samples, 77.17%)</title><rect x="201.9" y="949" width="910.6" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="204.89" y="959.5" >__clone3</text>
</g>
<g >
<title>_int_malloc (518,606,204 samples, 0.13%)</title><rect x="1109.3" y="677" width="1.6" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1112.30" y="687.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, true&gt; &gt;::destroy&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; (1,572,203,116 samples, 0.41%)</title><rect x="815.1" y="677" width="4.8" height="15.0" fill="rgb(244,179,43)" rx="2" ry="2" />
<text  x="818.11" y="687.5" ></text>
</g>
<g >
<title>rand (678,184,310 samples, 0.18%)</title><rect x="854.2" y="757" width="2.1" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="857.19" y="767.5" ></text>
</g>
<g >
<title>syscall (35,941,144 samples, 0.01%)</title><rect x="918.9" y="677" width="0.1" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="921.91" y="687.5" ></text>
</g>
<g >
<title>exit_to_user_mode_prepare (44,195,452 samples, 0.01%)</title><rect x="468.9" y="645" width="0.2" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="471.93" y="655.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::pair (50,058,445 samples, 0.01%)</title><rect x="1165.1" y="693" width="0.2" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="1168.15" y="703.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::_List_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (45,306,478 samples, 0.01%)</title><rect x="432.8" y="725" width="0.1" height="15.0" fill="rgb(231,124,29)" rx="2" ry="2" />
<text  x="435.80" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_v (44,229,089 samples, 0.01%)</title><rect x="828.6" y="741" width="0.1" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="831.58" y="751.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt; &gt;::_M_valptr (830,910,003 samples, 0.21%)</title><rect x="597.3" y="709" width="2.5" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="600.29" y="719.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (374,907,608 samples, 0.10%)</title><rect x="1106.8" y="549" width="1.2" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1109.84" y="559.5" ></text>
</g>
<g >
<title>arena_get2 (33,539,657 samples, 0.01%)</title><rect x="1087.3" y="773" width="0.1" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1090.34" y="783.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (57,099,579 samples, 0.01%)</title><rect x="613.9" y="677" width="0.2" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="616.91" y="687.5" ></text>
</g>
<g >
<title>operator new (36,715,295 samples, 0.01%)</title><rect x="437.8" y="629" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="440.81" y="639.5" ></text>
</g>
<g >
<title>__GI___libc_free (97,458,088 samples, 0.03%)</title><rect x="462.3" y="645" width="0.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="465.31" y="655.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;::__uniq_ptr_impl&lt;std::__future_base::_Result_base::_Deleter&gt; (103,670,682 samples, 0.03%)</title><rect x="471.1" y="533" width="0.3" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="474.08" y="543.5" ></text>
</g>
<g >
<title>__rseq_handle_notify_resume (55,216,278 samples, 0.01%)</title><rect x="1088.6" y="661" width="0.1" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="1091.57" y="671.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (173,731,394 samples, 0.04%)</title><rect x="201.9" y="709" width="0.6" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="204.93" y="719.5" ></text>
</g>
<g >
<title>freqCmp (127,166,907 samples, 0.03%)</title><rect x="594.6" y="709" width="0.4" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="597.58" y="719.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_S_relocate (283,658,468 samples, 0.07%)</title><rect x="138.5" y="885" width="0.9" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="141.53" y="895.5" ></text>
</g>
<g >
<title>std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::get_future (160,717,085 samples, 0.04%)</title><rect x="1105.4" y="757" width="0.5" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="1108.42" y="767.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt; &gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (561,723,498 samples, 0.15%)</title><rect x="892.0" y="709" width="1.7" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="895.03" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (1,489,652,613 samples, 0.39%)</title><rect x="1004.8" y="741" width="4.6" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1007.83" y="751.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cpp_redis::reply, std::allocator&lt;cpp_redis::reply&gt; &gt;::~_Vector_base (67,240,571 samples, 0.02%)</title><rect x="927.3" y="661" width="0.2" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="930.32" y="671.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (56,382,975 samples, 0.01%)</title><rect x="468.9" y="661" width="0.2" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="471.92" y="671.5" ></text>
</g>
<g >
<title>malloc_consolidate (142,828,395 samples, 0.04%)</title><rect x="937.6" y="693" width="0.5" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="940.64" y="703.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::allocate (124,603,950 samples, 0.03%)</title><rect x="516.0" y="725" width="0.4" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="519.04" y="735.5" ></text>
</g>
<g >
<title>unix_stream_read_generic (56,254,800 samples, 0.01%)</title><rect x="202.6" y="581" width="0.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="205.56" y="591.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (293,749,225 samples, 0.08%)</title><rect x="1159.8" y="757" width="0.9" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="1162.78" y="767.5" ></text>
</g>
<g >
<title>__GI___libc_write (110,776,464 samples, 0.03%)</title><rect x="1082.7" y="805" width="0.3" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1085.68" y="815.5" ></text>
</g>
<g >
<title>[proxy_server] (131,302,935 samples, 0.03%)</title><rect x="117.0" y="933" width="0.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="119.96" y="943.5" ></text>
</g>
<g >
<title>apache::thrift::server::TNonblockingServer::serve (773,925,518 samples, 0.20%)</title><rect x="201.9" y="805" width="2.4" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="204.90" y="815.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::vector (399,803,468 samples, 0.10%)</title><rect x="208.3" y="709" width="1.2" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="211.31" y="719.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (91,064,773 samples, 0.02%)</title><rect x="217.7" y="757" width="0.3" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="220.70" y="767.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (87,038,178 samples, 0.02%)</title><rect x="822.0" y="725" width="0.3" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="825.05" y="735.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::allocate (82,091,495 samples, 0.02%)</title><rect x="902.1" y="613" width="0.3" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="905.13" y="623.5" ></text>
</g>
<g >
<title>vfs_write (48,319,336 samples, 0.01%)</title><rect x="1080.0" y="677" width="0.2" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1083.03" y="687.5" ></text>
</g>
<g >
<title>malloc_consolidate (99,490,149 samples, 0.03%)</title><rect x="920.7" y="533" width="0.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="923.74" y="543.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (34,502,538 samples, 0.01%)</title><rect x="1024.3" y="725" width="0.1" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="1027.34" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, false, true&gt;::operator++ (35,272,059 samples, 0.01%)</title><rect x="974.6" y="789" width="0.2" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="977.64" y="799.5" ></text>
</g>
<g >
<title>operator new (529,670,459 samples, 0.14%)</title><rect x="1109.3" y="709" width="1.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1112.26" y="719.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::__future_base::_Result&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__future_base::_Result_base::_Deleter&gt;::release (56,207,655 samples, 0.01%)</title><rect x="819.4" y="421" width="0.2" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="822.44" y="431.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;char*&gt;::difference_type std::distance&lt;char*&gt; (123,708,127 samples, 0.03%)</title><rect x="614.4" y="677" width="0.4" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="617.45" y="687.5" ></text>
</g>
<g >
<title>waffle_proxy::async_get_batch (2,513,374,076 samples, 0.65%)</title><rect x="1090.0" y="789" width="7.7" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="1093.02" y="799.5" ></text>
</g>
<g >
<title>EVP_CIPHER_CTX_reset (167,832,587 samples, 0.04%)</title><rect x="839.2" y="725" width="0.5" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="842.19" y="735.5" ></text>
</g>
<g >
<title>unlink_chunk (35,322,207 samples, 0.01%)</title><rect x="938.0" y="677" width="0.1" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="940.96" y="687.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (33,213,855 samples, 0.01%)</title><rect x="522.6" y="693" width="0.1" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="525.59" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (116,135,709 samples, 0.03%)</title><rect x="797.3" y="693" width="0.3" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="800.29" y="703.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int&gt;::~pair (191,816,586 samples, 0.05%)</title><rect x="792.5" y="725" width="0.5" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="795.46" y="735.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt; &gt;::deallocate (170,145,836 samples, 0.04%)</title><rect x="884.3" y="661" width="0.5" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="887.32" y="671.5" ></text>
</g>
<g >
<title>exc_page_fault (91,634,834 samples, 0.02%)</title><rect x="1155.8" y="757" width="0.3" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1158.77" y="767.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::size (105,542,051 samples, 0.03%)</title><rect x="84.9" y="933" width="0.3" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="87.86" y="943.5" ></text>
</g>
<g >
<title>_int_free (43,242,798 samples, 0.01%)</title><rect x="940.9" y="613" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="943.92" y="623.5" ></text>
</g>
<g >
<title>operator new (389,313,434 samples, 0.10%)</title><rect x="477.5" y="645" width="1.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="480.54" y="655.5" ></text>
</g>
<g >
<title>cpp_redis::builders::array_builder::~array_builder (216,947,251 samples, 0.06%)</title><rect x="1074.1" y="789" width="0.6" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="1077.05" y="799.5" ></text>
</g>
<g >
<title>std::__basic_future&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::_M_get_result (783,722,666 samples, 0.20%)</title><rect x="1052.8" y="789" width="2.4" height="15.0" fill="rgb(236,147,35)" rx="2" ry="2" />
<text  x="1055.77" y="799.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (78,694,683 samples, 0.02%)</title><rect x="493.8" y="725" width="0.2" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="496.80" y="735.5" ></text>
</g>
<g >
<title>apache::thrift::concurrency::Monitor::Impl::waitForTimeRelative (372,759,748 samples, 0.10%)</title><rect x="1087.7" y="853" width="1.2" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1090.73" y="863.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (472,979,486 samples, 0.12%)</title><rect x="900.7" y="629" width="1.4" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="903.65" y="639.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, false&gt; &gt;::destroy&lt;std::pair&lt;int const, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; (240,150,848 samples, 0.06%)</title><rect x="214.3" y="693" width="0.7" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="217.26" y="703.5" ></text>
</g>
<g >
<title>exc_page_fault (49,733,296 samples, 0.01%)</title><rect x="1160.4" y="645" width="0.2" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1163.42" y="655.5" ></text>
</g>
<g >
<title>_int_free (47,976,192 samples, 0.01%)</title><rect x="934.8" y="757" width="0.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="937.78" y="767.5" ></text>
</g>
<g >
<title>futex_wait (43,087,133 samples, 0.01%)</title><rect x="1103.8" y="549" width="0.1" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1106.75" y="559.5" ></text>
</g>
<g >
<title>operator new (62,367,787 samples, 0.02%)</title><rect x="1066.5" y="709" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1069.51" y="719.5" ></text>
</g>
<g >
<title>__GI___libc_free (55,621,333 samples, 0.01%)</title><rect x="852.7" y="741" width="0.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="855.73" y="751.5" ></text>
</g>
<g >
<title>dequeue_task (63,465,892 samples, 0.02%)</title><rect x="202.1" y="565" width="0.2" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="205.07" y="575.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, true&gt; &gt; &gt;::destroy&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; (1,601,161,350 samples, 0.41%)</title><rect x="815.0" y="693" width="4.9" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="818.02" y="703.5" ></text>
</g>
<g >
<title>_int_free (54,178,671 samples, 0.01%)</title><rect x="1069.5" y="725" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1072.54" y="735.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (807,052,937 samples, 0.21%)</title><rect x="588.7" y="693" width="2.4" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="591.66" y="703.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (41,034,567 samples, 0.01%)</title><rect x="440.9" y="725" width="0.1" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="443.89" y="735.5" ></text>
</g>
<g >
<title>waffle_thriftProcessor::process_async_put_batch (3,587,820,729 samples, 0.93%)</title><rect x="1100.2" y="821" width="11.0" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="1103.24" y="831.5" ></text>
</g>
<g >
<title>handle_pte_fault (73,308,217 samples, 0.02%)</title><rect x="1142.6" y="597" width="0.3" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1145.64" y="607.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (140,024,005 samples, 0.04%)</title><rect x="932.9" y="693" width="0.4" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="935.88" y="703.5" ></text>
</g>
<g >
<title>__GI___libc_free (56,295,328 samples, 0.01%)</title><rect x="849.2" y="709" width="0.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="852.23" y="719.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;std::promise&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;,  (279,575,363 samples, 0.07%)</title><rect x="449.2" y="693" width="0.8" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="452.17" y="703.5" ></text>
</g>
<g >
<title>_int_free (113,599,795 samples, 0.03%)</title><rect x="501.7" y="757" width="0.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="504.69" y="767.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (195,630,367 samples, 0.05%)</title><rect x="453.4" y="741" width="0.6" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="456.40" y="751.5" ></text>
</g>
<g >
<title>encryption_engine::encrypt (1,829,410,837 samples, 0.47%)</title><rect x="848.2" y="773" width="5.6" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="851.25" y="783.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;*&gt; (268,026,223 samples, 0.07%)</title><rect x="958.4" y="597" width="0.8" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="961.37" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::_List_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (163,170,463 samples, 0.04%)</title><rect x="423.7" y="709" width="0.5" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="426.74" y="719.5" ></text>
</g>
</g>
</svg>
